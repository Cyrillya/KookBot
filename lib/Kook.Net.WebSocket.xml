<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kook.Net.WebSocket</name>
    </assembly>
    <members>
        <member name="T:Kook.WebSocket.BaseSocketClient">
            <summary>
                Represents an abstract base class for WebSocket-based clients.
            </summary>
        </member>
        <member name="F:Kook.WebSocket.BaseSocketClient._baseConfig">
            <summary>
                Gets the configuration used by this client.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.BaseSocketClient.Latency">
            <summary>
                Gets the estimated round-trip latency, in milliseconds, to the gateway server.
            </summary>
            <returns>
                An int that represents the round-trip latency to the WebSocket server. Please
                note that this value does not represent a "true" latency for operations such as sending a message.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.BaseSocketClient.Rest">
            <summary>
                Provides access to a REST-only client with a shared state from this client.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.BaseSocketClient.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.BaseSocketClient.Guilds">
            <summary>
                Gets a collection of guilds that the user is currently in.
            </summary>
            <returns>
                A read-only collection of guilds that the current user is in.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetUser(System.UInt64)">
            <summary>
                Gets a generic user.
            </summary>
            <param name="id">The user ID.</param>
            <remarks>
                This method gets the user present in the WebSocket cache with the given condition.
                <note type="warning">
                    Sometimes a user may return <c>null</c> due to Kook not sending offline users in large guilds
                    (i.e. guild with 100+ members) actively. To download users on startup and to see more information
                    about this subject, see <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadUsers" />.
                </note>
                <note>
                    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.
                    users who don't share mutual guild(s) with the current user). If you wish to get a user that you do
                    not have access to, consider using the REST implementation of
                    <see cref="M:Kook.Rest.KookRestClient.GetUserAsync(System.UInt64,Kook.RequestOptions)" />.
                </note>
            </remarks>
            <returns>
                A generic WebSocket-based user; <c>null</c> when the user cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetUser(System.String,System.String)">
            <summary>
                Gets a user.
            </summary>
            <remarks>
                This method gets the user present in the WebSocket cache with the given condition.
                <note type="warning">
                    Sometimes a user may return <c>null</c> due to Kook not sending offline users in large guilds
                    (i.e. guild with 100+ members) actively. To download users on startup and to see more information
                    about this subject, see <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadUsers" />.
                </note>
                <note>
                    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.
                    users who don't share mutual guild(s) with the current user). If you wish to get a user that you do
                    not have access to, consider using the REST implementation of
                    <see cref="M:Kook.Rest.KookRestClient.GetUserAsync(System.UInt64,Kook.RequestOptions)" />.
                </note>
            </remarks>
            <param name="username">The name of the user.</param>
            <param name="identifyNumber">The identify value of the user.</param>
            <returns>
                A generic WebSocket-based user; <c>null</c> when the user cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetChannel(System.UInt64)">
            <summary>
                Gets a channel.
            </summary>
            <param name="id">The identifier of the channel.</param>
            <returns>
                A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;
                <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetDMChannel(System.Guid)">
            <summary>
                Gets a channel.
            </summary>
            <param name="chatCode">The chat code of the direct-message channel.</param>
            <returns>
                A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;
                <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetDMChannel(System.UInt64)">
            <summary>
                Gets a channel.
            </summary>
            <param name="userId">The user identifier of the direct-message channel.</param>
            <returns>
                A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;
                <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.GetGuild(System.UInt64)">
            <summary>
                Gets a guild.
            </summary>
            <param name="id">The guild identifier.</param>
            <returns>
                A WebSocket-based guild associated with the identifier; <c>null</c> when the guild cannot be
                found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.StartAsync">
            <summary>
                Starts the WebSocket connection.
            </summary>
            <returns> A task that represents the asynchronous start operation. </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.StopAsync">
            <summary>
                Stops the WebSocket connection.
            </summary>
            <returns> A task that represents the asynchronous stop operation. </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Attempts to download users into the user cache for the selected guilds.
            </summary>
            <param name="guilds">The guilds to download the members from.</param>
            <param name="options"> The options to be used when sending the request. </param>
            <returns>
                A task that represents the asynchronous download operation.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.DownloadVoiceStatesAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Downloads all voice states for the specified guilds.
            </summary>
            <param name="guilds">
                The guilds to download the voice states for. If <c>null</c>, all available guilds will be downloaded.
            </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Downloads all boost subscriptions for the specified guilds.
            </summary>
            <param name="guilds">
                The guilds to download the boost subscriptions for. If <c>null</c>, all available guilds will be downloaded.
                To download all boost subscriptions, the current user must has the
                <see cref="F:Kook.GuildPermission.ManageGuild"/> permission.
            </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetDMChannelAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetGuildAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetGuildsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.BaseSocketClient.Kook#IKookClient#GetUserAsync(System.String,System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.ChannelCreated">
            <summary> Fired when a channel is created. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been created. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketChannel"/> as its parameter.
                </para>
                <para>
                    The newly created channel is passed into the event handler parameter. The given channel type may
                    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);
                    see the derived classes of <see cref="T:Kook.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.ChannelDestroyed">
            <summary> Fired when a channel is destroyed. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been destroyed. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketChannel"/> as its parameter.
                </para>
                <para>
                    The destroyed channel is passed into the event handler parameter. The given channel type may
                    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);
                    see the derived classes of <see cref="T:Kook.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.ChannelUpdated">
            <summary> Fired when a channel is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept 2 <see cref="T:Kook.WebSocket.SocketChannel"/> as its parameters.
                </para>
                <para>
                    The original (prior to update) channel is passed into the first <see cref="T:Kook.WebSocket.SocketChannel"/>, while
                    the updated channel is passed into the second. The given channel type may include, but not limited
                    to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of
                    <see cref="T:Kook.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.ReactionAdded">
            <summary> Fired when a reaction is added to a channel message. </summary>
            <remarks>
                <para>
                    This event is fired when a reaction is added to a message in a channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, an
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/>, a <see cref="T:Kook.Cacheable`2"/>, and a
                    <see cref="T:Kook.WebSocket.SocketReaction"/> as its parameter.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the <see cref="T:System.Guid"/>
                </para>
                <para>
                    The source channel of the reaction addition will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
                <para>
                    The user who added the reaction will be passed into the <see cref="T:Kook.Cacheable`2"/>.
                </para>
                <para>
                    The reaction that was added will be passed into the <see cref="T:Kook.WebSocket.SocketReaction"/> parameter.
                </para>
                <note>
                    When fetching the reaction from this event, a user may not be provided under
                    <see cref="P:Kook.WebSocket.SocketReaction.User"/>. Please see the documentation of the property for more
                    information.
                </note>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.ReactionRemoved">
            <summary> Fired when a reaction is removed from a message. </summary>
            <remarks>
                <para>
                    This event is fired when a reaction is removed from a message in a channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, an
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/>, a <see cref="T:Kook.Cacheable`2"/>, and a
                    <see cref="T:Kook.WebSocket.SocketReaction"/> as its parameter.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the <see cref="T:System.Guid"/>
                </para>
                <para>
                    The source channel of the reaction addition will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
                <para>
                    The user who removed the reaction will be passed into the <see cref="T:Kook.Cacheable`2"/>.
                </para>
                <para>
                    The reaction that was removed will be passed into the <see cref="T:Kook.WebSocket.SocketReaction"/> parameter.
                </para>
                <note>
                    When fetching the reaction from this event, a user may not be provided under
                    <see cref="P:Kook.WebSocket.SocketReaction.User"/>. Please see the documentation of the property for more
                    information.
                </note>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectReactionAdded">
            <summary> Fired when a reaction is added to a direct message. </summary>
            <remarks>
                <para>
                    This event is fired when a reaction is added to a user message in a private channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, a
                    <see cref="T:Kook.Cacheable`2"/>, a <see cref="T:Kook.Cacheable`2"/>, and a
                    <see cref="T:Kook.WebSocket.SocketReaction"/> as its parameter.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    If a direct message was sent by the current user to this user, or the recipient had sent a message before
                    in current session, the <see cref="T:Kook.Cacheable`2"/> entity will contains the direct message channel;
                    otherwise, the direct message channel has not been created yet, and the <see cref="T:System.Guid"/> as chat code will be preserved.
                </para>
                <para>
                    The user who removed the reaction will be passed into the <see cref="T:Kook.Cacheable`2"/>.
                </para>
                <para>
                    The reaction that was added will be passed into the <see cref="T:Kook.WebSocket.SocketReaction"/> parameter.
                </para>
                <note>
                    When fetching the reaction from this event, a user may not be provided under
                    <see cref="P:Kook.WebSocket.SocketReaction.User"/>. Please see the documentation of the property for more
                    information.
                </note>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectReactionRemoved">
            <summary> Fired when a reaction is removed from a message. </summary>
            <remarks>
                <para>
                    This event is fired when a reaction is removed from a user message in a private channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, a
                    <see cref="T:Kook.Cacheable`2"/>, a <see cref="T:Kook.Cacheable`2"/>, and a
                    <see cref="T:Kook.WebSocket.SocketReaction"/> as its parameter.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    If a direct message was sent by the current user to this user, or the recipient had sent a message before
                    in current session, the <see cref="T:Kook.Cacheable`2"/> entity will contains the direct message channel;
                    otherwise, the direct message channel has not been created yet, and the <see cref="T:System.Guid"/> as chat code will be preserved.
                </para>
                <para>
                    The user who added the reaction will be passed into the <see cref="T:Kook.Cacheable`2"/>.
                </para>
                <para>
                    The reaction that was added will be passed into the <see cref="T:Kook.WebSocket.SocketReaction"/> parameter.
                </para>
                <note>
                    When fetching the reaction from this event, a user may not be provided under
                    <see cref="P:Kook.WebSocket.SocketReaction.User"/>. Please see the documentation of the property for more
                    information.
                </note>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessageReceived">
            <summary> Fired when a message is received. </summary>
            <remarks>
                <para>
                    This event is fired when a message is received. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketMessage"/>, a
                    <see cref="T:Kook.WebSocket.SocketGuildUser"/>, and a <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameter.
                </para>
                <para>
                    The message that is sent to the client is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketMessage"/>. This message may be a system message (i.e.
                    <see cref="T:Kook.WebSocket.SocketSystemMessage"/>) or a user message (i.e. <see cref="T:Kook.WebSocket.SocketUserMessage"/>. See the
                    derived classes of <see cref="T:Kook.WebSocket.SocketMessage"/> for more details.
                </para>
                <para>
                    The guild member that sent this message is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuildUser"/>.
                </para>
                <para>
                    The source channel of the removed message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessageDeleted">
            <summary> Fired when a message is deleted. </summary>
            <remarks>
                <para>
                    This event is fired when a message is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, and a
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the message cannot be retrieved by Kook
                        after the message has been deleted.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the deleted message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The source channel of the removed message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessageUpdated">
            <summary> Fired when a message is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a message is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.Cacheable`2"/>, and <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original message cannot be retrieved by
                        Kook after the message has been updated.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the updated message; otherwise, in event
                    that the entire message entity cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The source channel of the updated message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessagePinned">
            <summary> Fired when a message is pinned. </summary>
            <remarks>
                <para>
                    This event is fired when a message is pinned. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, <see cref="T:Kook.WebSocket.SocketMessage"/>,
                    and <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original message cannot be retrieved by
                        Kook after the message has been updated.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the pinned message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The source channel of the updated message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
                <para>
                    The guild member that pinned this message is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessageUnpinned">
            <summary> Fired when a message is unpinned. </summary>
            <remarks>
                <para>
                    This event is fired when a message is unpinned. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>, <see cref="T:Kook.WebSocket.SocketMessage"/>,
                    and <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original message cannot be retrieved by
                        Kook after the message has been updated.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the unpinned message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The source channel of the updated message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
                <para>
                    The guild member that unpinned this message is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectMessageReceived">
            <summary> Fired when a direct message is received. </summary>
            <remarks>
                <para>
                    This event is fired when a direct message is received. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketMessage"/>, a
                    <see cref="T:Kook.WebSocket.SocketUser"/>, and a <see cref="T:Kook.WebSocket.SocketDMChannel"/>
                    as its parameters.
                </para>
                <para>
                    The message that is sent to the client is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketMessage"/>. This message may be a system message (i.e.
                    <see cref="T:Kook.WebSocket.SocketSystemMessage"/>) or a user message (i.e. <see cref="T:Kook.WebSocket.SocketUserMessage"/>. See the
                    derived classes of <see cref="T:Kook.WebSocket.SocketMessage"/> for more details.
                </para>
                <para>
                    The user that sent this direct message is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketUser"/>.
                </para>
                <para>
                    The source direct channel of the removed message will be passed into the
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectMessageDeleted">
            <summary> Fired when a direct message is deleted. </summary>
            <remarks>
                <para>
                    This event is fired when a direct message is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.Cacheable`2"/>, and a <see cref="T:Kook.Cacheable`2"/>
                    as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the direct message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original direct message cannot be retrieved by Kook
                        after the message has been deleted.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the deleted direct message; otherwise, in event
                    that the message cannot be retrieved, the ID of the direct message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The user that originally sent this direct message is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    If a direct message was sent by the current user to this user, or the recipient had sent a message before
                    in current session, the <see cref="T:Kook.Cacheable`2"/> entity will contains the direct message channel;
                    otherwise, the direct message channel has not been created yet, and the <see cref="T:System.Guid"/> as chat code will be preserved.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectMessageUpdated">
            <summary> Fired when a message is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a direct message is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.Cacheable`2"/>, a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:Kook.Cacheable`2"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the direct message via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original direct message cannot be retrieved by Kook
                        after the message has been updated.
                    </note>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the updated direct message; otherwise, in event
                    that the message cannot be retrieved, the ID of the direct message is preserved in the
                    <see cref="T:System.Guid"/>.
                </para>
                <para>
                    The user that originally sent this direct message is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    If a direct message was sent by the current user to this user, or the recipient had sent a message before
                    in current session, the <see cref="T:Kook.Cacheable`2"/> entity will contains the direct message channel;
                    otherwise, the direct message channel has not been created yet, and the <see cref="T:System.Guid"/> as chat code will be preserved.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserJoined">
            <summary> Fired when a user joins a guild. </summary>
            <remarks>
                <note type="warning">
                    It is reported that this event will not be fired if a guild contains more than 2000 members.
                </note>
                <para>
                    This event is fired when a user joins a guild. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuildUser"/> and a <see cref="T:System.DateTimeOffset"/>
                    as its parameters.
                </para>
                <para>
                    The joined user will be passed into the <see cref="T:Kook.WebSocket.SocketGuildUser"/> parameter.
                </para>
                <para>
                    The time at which the user joined the guild will be passed into the <see cref="T:System.DateTimeOffset"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserLeft">
            <summary> Fired when a user leaves a guild. </summary>
            <remarks>
                <note type="warning">
                    It is reported that this event will not be fired if a guild contains more than 2000 members.
                </note>
                <para>
                    This event is fired when a user leaves a guild. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuildUser"/> and a <see cref="T:System.DateTimeOffset"/>
                    as its parameters.
                </para>
                <para>
                    If the left user presents in the cache, the <see cref="T:Kook.Cacheable`2"/> entity
                    will contain the left user; otherwise, in event that the user cannot be retrieved,
                    the ID of the left user is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The time at which the user left the guild will be passed into the <see cref="T:System.DateTimeOffset"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserBanned">
            <summary> Fired when a user is banned from a guild. </summary>
            <remarks>
                <para>
                    This event is fired when a user is banned. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, a <see cref="T:Kook.WebSocket.SocketMessage"/>,
                    a <c>string</c> and a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the user via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original user cannot be retrieved by
                        Kook after the user has been banned.
                    </note>
                    The users that are banned are passed into the event handler parameter as
                    <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, where <c>T</c> is <see cref="T:Kook.Cacheable`2"/>,
                    each of which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user presents in the cache; otherwise,
                    in event that the user cannot be retrieved, the ID of the user is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The users who operated the bans is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The guild where the banning action takes place is passed in the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
                <para>
                    The reason of the ban is passed into the event handler parameter as <c>string</c>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserUnbanned">
            <summary> Fired when a user is unbanned from a guild. </summary>
            <remarks>
                <para>
                    This event is fired when a user is unbanned. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, a <see cref="T:Kook.WebSocket.SocketMessage"/>
                    and a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the user via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original user cannot be retrieved by
                        Kook after the user has been unbanned.
                    </note>
                    The users that are unbanned are passed into the event handler parameter as
                    <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, where <c>T</c> is <see cref="T:Kook.Cacheable`2"/>,
                    each of which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user presents in the cache; otherwise,
                    in event that the user cannot be retrieved, the ID of the user is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The users who operated the unbans is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The guild where the unbanning action takes place is passed in the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserUpdated">
            <summary> Fired when a user is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a user is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:Kook.Cacheable`2"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the user via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original user cannot be retrieved by
                        Kook after the user has been updated.
                    </note>
                    The user that is updated is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The user that is updated is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.CurrentUserUpdated">
            <summary> Fired when the connected account is updated. </summary>
            <remarks>
                <para>
                    This event is fired when the connected account is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketSelfUser"/>,
                    and a <see cref="T:Kook.WebSocket.SocketSelfUser"/> as its parameter.
                </para>
                <para>
                    The current user before the update is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketSelfUser"/>.
                </para>
                <para>
                    The current user after the update is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketSelfUser"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildMemberUpdated">
            <summary> Fired when a guild member is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a guild member is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:Kook.Cacheable`2"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the guild member via
                        <see cref="M:Kook.Cacheable`2.DownloadAsync"/>; the original guild member cannot be retrieved by
                        Kook after the guild member has been updated.
                    </note>
                    The guild member that is updated is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The guild member that is updated is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildMemberOnline">
            <summary> Fired when a guild member is online. </summary>
            <remarks>
                <para>
                    This event is fired when a guild member is online. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:System.DateTimeOffset"/> as its parameter.
                </para>
                <para>
                    The guild member that is online is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The time when the guild member is online is passed into the event handler parameter as
                    <see cref="T:System.DateTimeOffset"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildMemberOffline">
            <summary> Fired when a guild member is offline. </summary>
            <remarks>
                <para>
                    This event is fired when a guild member is offline. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:System.DateTimeOffset"/> as its parameter.
                </para>
                <para>
                    The guild member that is offline is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the guild member
                    presents in the cache; otherwise, in event that the guild member cannot be retrieved, the ID of the guild member
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The time when the guild member is offline is passed into the event handler parameter as
                    <see cref="T:System.DateTimeOffset"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserConnected">
            <summary> Fired when a user connected to a voice channel. </summary>
            <remarks>
                <para>
                    This event is fired when a user connected to a voice channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.WebSocket.SocketVoiceChannel"/>, a <see cref="T:Kook.WebSocket.SocketGuild"/>, and a <see cref="T:System.DateTimeOffset"/>
                    as its parameter.
                </para>
                <para>
                    The user that connected to a voice channel is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The voice channel that the user connected to is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketVoiceChannel"/>.
                </para>
                <para>
                    The time when the user is offline is passed into the event handler parameter as
                    <see cref="T:System.DateTimeOffset"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.UserDisconnected">
            <summary> Fired when a user disconnected to a voice channel. </summary>
            <remarks>
                <para>
                    This event is fired when a user disconnected to a voice channel. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.WebSocket.SocketVoiceChannel"/>, a <see cref="T:Kook.WebSocket.SocketGuild"/>, and a <see cref="T:System.DateTimeOffset"/>
                    as its parameter.
                </para>
                <para>
                    The user that disconnected to a voice channel is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains the original <see cref="T:Kook.WebSocket.SocketGuildUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The voice channel that the user disconnected to is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketVoiceChannel"/>.
                </para>
                <para>
                    The time when the user is offline is passed into the event handler parameter as
                    <see cref="T:System.DateTimeOffset"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.RoleCreated">
            <summary> Fired when a role is created. </summary>
            <remarks>
                <para>
                    This event is fired when a role is created. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketRole"/> as its parameter.
                </para>
                <para>
                    The role that is created is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketRole"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.RoleDeleted">
            <summary> Fired when a role is deleted. </summary>
            <remarks>
                <para>
                    This event is fired when a role is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketRole"/> as its parameter.
                </para>
                <para>
                    The role that is deleted is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketRole"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.RoleUpdated">
            <summary> Fired when a role is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a role is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketRole"/> and a <see cref="T:Kook.WebSocket.SocketRole"/>
                    as its parameter.
                </para>
                <para>
                    The original role entity is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketRole"/>.
                </para>
                <para>
                    The updated role entity is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketRole"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.EmoteCreated">
            <summary> Fired when an emote is created. </summary>
            <remarks>
                <para>
                    This event is fired when an emote is created. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.GuildEmote"/> and a <see cref="T:Kook.WebSocket.SocketGuild"/>
                    as its parameter.
                </para>
                <para>
                    The emote that is created is passed into the event handler parameter as
                    <see cref="T:Kook.GuildEmote"/>.
                </para>
                <para>
                    The guild where the emote is created is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.EmoteDeleted">
            <summary> Fired when a emote is deleted. </summary>
            <remarks>
                <para>
                    This event is fired when an emote is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.GuildEmote"/> and a <see cref="T:Kook.WebSocket.SocketGuild"/>
                    as its parameter.
                </para>
                <para>
                    The emote that is deleted is passed into the event handler parameter as
                    <see cref="T:Kook.GuildEmote"/>.
                </para>
                <para>
                    The guild where the emote is deleted is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.EmoteUpdated">
            <summary> Fired when a emote is updated. </summary>
            <remarks>
                <para>
                    This event is fired when an emote is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.GuildEmote"/>, a <see cref="T:Kook.GuildEmote"/>
                    and a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The original emote entity is passed into the event handler parameter as
                    <see cref="T:Kook.GuildEmote"/>.
                </para>
                <para>
                    The updated emote entity is passed into the event handler parameter as
                    <see cref="T:Kook.GuildEmote"/>.
                </para>
                <para>
                    The guild where the emote is updated is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.JoinedGuild">
            <summary> Fired when the connected account joins a guild. </summary>
            <remarks>
                <para>
                    This event is fired when the connected account joins a guild. The event handler must
                    return a <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The guild where the account joins is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.LeftGuild">
            <summary> Fired when the connected account leaves a guild. </summary>
            <remarks>
                <para>
                    This event is fired when the connected account leaves a guild. The event handler must
                    return a <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    <note type="important">
                        This parameter must be accessed within the current thread context. After
                        waiting for completion of the task in this asynchronous event, the object
                        passed to it will be disposed.
                    </note>
                    The guild where the account leaves is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildUpdated">
            <summary> Fired when a guild is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a guild is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuild"/>,
                    and a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The guild before the update is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
                <para>
                    The guild after the update is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildAvailable">
            <summary> Fired when a guild becomes available. </summary>
            <remarks>
                <para>
                    This event is fired when a guild becomes available. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The guild that becomes available is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.GuildUnavailable">
            <summary> Fired when a guild becomes unavailable. </summary>
            <remarks>
                <para>
                    This event is fired when a guild becomes unavailable. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The guild that becomes unavailable is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketGuild"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.MessageButtonClicked">
            <summary> Fired when a button is clicked in a card message. </summary>
            <remarks>
                <para>
                    This event is fired when a button is clicked in a card message. The event handler must
                    return a <see cref="T:System.Threading.Tasks.Task"/> and accept a <c>string</c>,
                    a <see cref="T:Kook.Cacheable`2"/>, a <see cref="T:Kook.Cacheable`2"/>,
                    a <see cref="T:Kook.WebSocket.SocketTextChannel"/>, and a <see cref="T:Kook.WebSocket.SocketGuild"/> as its parameter.
                </para>
                <para>
                    The button value is passed into the event handler parameter as <c>string</c>.
                </para>
                <para>
                    The users who clicked the button is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the card message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the <see cref="T:System.Guid"/>
                </para>
                <para>
                    The channel where the button is clicked is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/>.
                </para>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.BaseSocketClient.DirectMessageButtonClicked">
            <summary> Fired when a button is clicked in a direct card message. </summary>
            <remarks>
                <para>
                    This event is fired when a button is clicked in a direct card message. The event handler must
                    return a <see cref="T:System.Threading.Tasks.Task"/> and accept a <c>string</c>,
                    a <see cref="T:Kook.Cacheable`2"/>, a <see cref="T:Kook.Cacheable`2"/>,
                    and a <see cref="T:Kook.WebSocket.SocketTextChannel"/> as its parameter.
                </para>
                <para>
                    The button value is passed into the event handler parameter as <c>string</c>.
                </para>
                <para>
                    The users who clicked the button is passed into the event handler parameter as
                    <see cref="T:Kook.Cacheable`2"/>, which contains a <see cref="T:Kook.WebSocket.SocketUser"/> when the user
                    presents in the cache; otherwise, in event that the user cannot be retrieved, the ID of the user
                    is preserved in the <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Kook.WebSocket.KookSocketConfig"/>, the
                    <see cref="T:Kook.Cacheable`2"/> entity will contain the direct card message; otherwise, in event
                    that the message cannot be retrieved, the ID of the message is preserved in the <see cref="T:System.Guid"/>
                </para>
                <para>
                    The channel where the button is clicked is passed into the event handler parameter as
                    <see cref="T:Kook.WebSocket.SocketTextChannel"/>.
                </para>
            </remarks>
        </member>
        <member name="T:Kook.WebSocket.ISocketAudioChannel">
            <summary>
                Represents a generic WebSocket-based audio channel.
            </summary>
        </member>
        <member name="T:Kook.WebSocket.ISocketMessageChannel">
            <summary>
                Represents a generic WebSocket-based channel that can send and receive messages.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.ISocketMessageChannel.CachedMessages">
            <summary>
                Gets all messages in this channel's cache.
            </summary>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.ISocketMessageChannel.GetCachedMessage(System.Guid)">
            <summary>
                Gets a cached message from this channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return <c>null</c>. Please refer to
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message from the local WebSocket cache and does not send any additional
                    request to Kook. This message may be a message that has been deleted.
                </para>
            </remarks>
            <param name="id">The Guid of the message.</param>
            <returns>
                A WebSocket-based message object; <c>null</c> if it does not exist in the cache or if caching is not
                enabled.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)">
            <summary>
                Gets the last N cached messages from this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Kook. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Guid,Kook.Direction,System.Int32)">
            <summary>
                Gets the last N cached messages starting from a certain message in this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Kook. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="fromMessageId">The message ID to start the fetching from.</param>
            <param name="dir">The direction of which the message should be gotten from.</param>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.ISocketMessageChannel.GetCachedMessages(Kook.IMessage,Kook.Direction,System.Int32)">
            <summary>
                Gets the last N cached messages starting from a certain message in this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Kook. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="fromMessage">The message to start the fetching from.</param>
            <param name="dir">The direction of which the message should be gotten from.</param>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="T:Kook.WebSocket.ISocketPrivateChannel">
            <summary>
                Represents a generic WebSocket-based channel that is private to select recipients.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.ISocketPrivateChannel.Recipients">
            <summary>
                Gets the users that can access this channel.
            </summary>
            <returns>
                A read-only collection of users that can access this channel.
            </returns>
        </member>
        <member name="T:Kook.WebSocket.SocketCategoryChannel">
            <summary>
                Represents a WebSocket-based category channel.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketCategoryChannel.Users">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketCategoryChannel.Channels">
            <summary>
                Gets the child channels of this category.
            </summary>
            <returns>
                A read-only collection of <see cref="T:Kook.WebSocket.SocketGuildChannel" /> whose
                <see cref="P:Kook.INestedChannel.CategoryId" /> matches the identifier of this category channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketCategoryChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketCategoryChannel.Kook#IGuildChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketCategoryChannel.Kook#IGuildChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketCategoryChannel.Kook#IChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketCategoryChannel.Kook#IChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketChannel">
            <summary>
                Represents a WebSocket-based channel.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketChannel.Users">
            <summary>
                Gets a collection of users from the WebSocket cache.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.SocketChannel.UpdateAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketChannel.GetUser(System.UInt64)">
            <summary>
                Gets a generic user from this channel.
            </summary>
            <param name="id">The identifier of the user.</param>
            <returns>
                A generic WebSocket-based user associated with the identifier.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketChannel.Kook#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketChannel.Kook#IChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketChannel.Kook#IChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketChannelHelper.AddMessage(Kook.WebSocket.ISocketMessageChannel,Kook.WebSocket.KookSocketClient,Kook.WebSocket.SocketMessage)">
            <exception cref="T:System.NotSupportedException">Unexpected <see cref="T:Kook.WebSocket.ISocketMessageChannel"/> type.</exception>
        </member>
        <member name="M:Kook.WebSocket.SocketChannelHelper.RemoveMessage(Kook.WebSocket.ISocketMessageChannel,Kook.WebSocket.KookSocketClient,System.Guid)">
            <exception cref="T:System.NotSupportedException">Unexpected <see cref="T:Kook.WebSocket.ISocketMessageChannel"/> type.</exception>
        </member>
        <member name="T:Kook.WebSocket.SocketDMChannel">
            <summary>
                Represents a WebSocket-based direct-message channel.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Id">
            <summary>
                Get the identifier of the DM channel.
            </summary>
            <remarks>
                This property is the same as <see cref="P:Kook.WebSocket.SocketDMChannel.ChatCode" />.
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.ChatCode">
            <inheritdoc />
            <remarks>
                This property is the same as <see cref="P:Kook.WebSocket.SocketDMChannel.Id" />.
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Recipient">
            <summary>
                Gets the recipient of the channel.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.CachedMessages">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Users">
            <summary>
                Gets a collection that is the current logged-in user and the recipient.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.UpdateAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.CloseAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetCachedMessage(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetMessageAsync(System.Guid,Kook.RequestOptions)">
            <summary>
                Gets the message associated with the given <paramref name="id"/>.
            </summary>
            <param name="id">TThe ID of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                The message gotten from either the cache or the download, or <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetMessagesAsync(System.Int32,Kook.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="referenceMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="referenceMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetCachedMessages(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetCachedMessages(System.Guid,Kook.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetCachedMessages(Kook.IMessage,Kook.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="path">The file path of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="stream">The stream of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="attachment">The attachment containing the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendTextAsync(System.String,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a text message to this message channel.
            </summary>
            <param name="text">The message to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <param name="cards">The cards to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.SendCardAsync(Kook.ICard,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <param name="card">The card to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.ModifyMessageAsync(System.Guid,System.Action{Kook.MessageProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.DeleteMessageAsync(System.Guid,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.DeleteMessageAsync(Kook.IMessage,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetUser(System.UInt64)">
            <summary>
                Gets a user in this channel from the provided <paramref name="id"/>.
            </summary>
            <param name="id">The identifier of the user.</param>
            <returns>
                A <see cref="T:Kook.WebSocket.SocketUser"/> object that is a recipient of this channel; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Update(Kook.WebSocket.ClientState,Kook.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetUsersInternal">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.GetUserInternal(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#Recipient">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Kook#WebSocket#ISocketPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Kook#IPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendTextAsync(System.String,Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendCardAsync(Kook.ICard,Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IDMChannel#SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#GetMessageAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendTextAsync(System.String,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IMessageChannel#SendCardAsync(Kook.ICard,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketDMChannel.Kook#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.Kook#IChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketDMChannel.ToString">
            <summary>
                Returns the recipient user.
            </summary>
        </member>
        <member name="T:Kook.WebSocket.SocketGuildChannel">
            <summary>
                Represent a WebSocket-based guild channel.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Guild">
            <summary>
                Gets the guild associated with this channel.
            </summary>
            <returns>
                A guild object that this channel belongs to.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Position">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Creator">
            <summary>
                Gets the creator of this channel.
            </summary>
            <remarks>
                This method will try to get the user as a member of this channel. If the user is not a member of this guild,
                this method will return <c>null</c>. To get the creator under this circumstance, use
                <see cref="M:Kook.Rest.KookRestClient.GetUserAsync(System.UInt64,Kook.RequestOptions)"/>.
            </remarks>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the creator of this channel.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.RolePermissionOverwrites">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.UserPermissionOverwrites">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Users">
            <summary>
                Gets a collection of users that are able to view the channel.
            </summary>
            <returns>
                A read-only collection of users that can access the channel (i.e. the users seen in the user list).
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Update(Kook.WebSocket.ClientState,Kook.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.UpdateAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Kook.ModifyGuildChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.DeleteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Kook.IUser)">
            <summary>
                Gets the permission overwrite for a specific user.
            </summary>
            <param name="user">The user to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted user; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Kook.IRole)">
            <summary>
                Gets the permission overwrite for a specific role.
            </summary>
            <param name="role">The role to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted role; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.ModifyPermissionOverwriteAsync(Kook.IGuildUser,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <summary>
                Updates the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to modify the overwrite for.</param>
            <param name="func">A delegate containing the values to modify the permission overwrite with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.ModifyPermissionOverwriteAsync(Kook.IRole,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <summary>
                Updates the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite for.</param>
            <param name="func">A delegate containing the values to modify the permission overwrite with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.GetUser(System.UInt64)">
            <summary>
                Gets a <see cref="T:Kook.WebSocket.SocketGuildUser"/> from this channel.
            </summary>
            <param name="id"> The user's identifier. </param>
            <returns> A <see cref="T:Kook.WebSocket.SocketGuildUser"/> with the provided identifier; <c>null</c> if none is found. </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.ToString">
            <summary>
                Gets the name of the channel.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Kook.WebSocket.SocketGuildChannel.Name"/>.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.GetUserInternal(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.GetUsersInternal">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#Guild">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#GuildId">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#AddPermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#AddPermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#RemovePermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#RemovePermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#ModifyPermissionOverwriteAsync(Kook.IRole,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#ModifyPermissionOverwriteAsync(Kook.IGuildUser,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IGuildChannel#GetCreatorAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the creator of this channel.
            </summary>
            <remarks>
                This method will try to get the user as a member of this channel. If the user is not a member of this guild,
                this method will return <c>null</c>. To get the creator under this circumstance, use
                <see cref="M:Kook.Rest.KookRestClient.GetUserAsync(System.UInt64,Kook.RequestOptions)"/>.
            </remarks>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the creator of this channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildChannel.Kook#IChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketTextChannel">
            <summary>
                Represents a WebSocket-based channel in a guild that can send and receive messages.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.Topic">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.SlowModeInterval">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.Category">
            <summary>
                Gets the parent (category) of this channel in the guild's channel list.
            </summary>
            <returns>
                An <see cref="T:Kook.ICategoryChannel"/> representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.IsPermissionSynced">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.KMarkdownMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.PlainTextMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.CachedMessages">
            <inheritdoc />
            <remarks>
                This property is only available if the <see cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize"/> is set to a value greater than zero.
            </remarks>
            <seealso cref="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize"/>
        </member>
        <member name="P:Kook.WebSocket.SocketTextChannel.Users">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.ModifyAsync(System.Action{Kook.ModifyTextChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SyncPermissionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetCachedMessage(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetMessageAsync(System.Guid,Kook.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessageAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="id">The identifier of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <c>null</c> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Kook.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="referenceMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IMessageChannel.GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="referenceMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetCachedMessages(System.Guid,Kook.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetCachedMessages(Kook.IMessage,Kook.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.ITextChannel.GetPinnedMessagesAsync(Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendFileAsync(Kook.FileAttachment,Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendTextAsync(System.String,Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendTextAsync(System.String,Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.SendCardAsync(Kook.ICard,Kook.Quote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IMessageChannel.SendCardAsync(Kook.ICard,Kook.IQuote,Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.ModifyMessageAsync(System.Guid,System.Action{Kook.MessageProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.DeleteMessageAsync(System.Guid,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.DeleteMessageAsync(Kook.IMessage,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetInvitesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.CreateInviteAsync(Kook.InviteMaxAge,Kook.InviteMaxUses,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IGuildChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IGuildChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendTextAsync(System.String,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendCardAsync(Kook.ICard,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#GetMessageAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#IMessageChannel#GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#ITextChannel#GetPinnedMessagesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketTextChannel.Kook#INestedChannel#GetCategoryAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketVoiceChannel">
            <summary>
                Represents a WebSocket-based voice channel in a guild.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.Category">
            <summary>
                Gets the parent (category) of this channel in the guild's channel list.
            </summary>
            <returns>
                An <see cref="T:Kook.ICategoryChannel"/> representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.IsPermissionSynced">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.KMarkdownMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.PlainTextMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.VoiceQuality">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.UserLimit">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.ServerUrl">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.IsVoiceRegionOverwritten">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.VoiceRegion">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.HasPassword">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.Users">
            <inheritdoc />
            <seealso cref="P:Kook.WebSocket.SocketVoiceChannel.ConnectedUsers"/>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceChannel.ConnectedUsers">
            <summary>
                Gets a collection of users that are currently connected to this voice channel.
            </summary>
            <remarks>
                <note type="warning">
                    This property may not always return all the members that are connected to this voice channel,
                    because uses may connected this voice channel before the bot has connected to the gateway.
                    To ensure accuracy, you may need to enable <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadVoiceStates"/>
                    to fetch the full voice states upon startup, or use <see cref="M:Kook.WebSocket.SocketGuild.DownloadVoiceStatesAsync(Kook.RequestOptions)"/>
                    on the guild this voice channel belongs to to manually download the users voice states,
                    or use <see cref="M:Kook.WebSocket.SocketVoiceChannel.GetConnectedUsersAsync(Kook.CacheMode,Kook.RequestOptions)"/> to fetch the connected users from the API.
                </note>
            </remarks>
            <returns>
                A read-only collection of users that are currently connected to this voice channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.Update(Kook.WebSocket.ClientState,Kook.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.ModifyAsync(System.Action{Kook.ModifyVoiceChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.GetConnectedUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of users that are currently connected to this voice channel.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of users
                that are currently connected to this voice channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.SyncPermissionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.GetInvitesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.CreateInviteAsync(Kook.InviteMaxAge,Kook.InviteMaxUses,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.Kook#IVoiceChannel#GetConnectedUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.Kook#IGuildChannel#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.Kook#IGuildChannel#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
            <seealso cref="M:Kook.IVoiceChannel.GetConnectedUsersAsync(Kook.CacheMode,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceChannel.Kook#INestedChannel#GetCategoryAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketGuild">
            <summary>
                Represents a WebSocket-based guild object.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Topic">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.OwnerId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Owner">
            <summary> Gets the user that owns this guild. </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Icon">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.NotifyType">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Region">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.IsOpenEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.OpenId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.DefaultChannelId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.WelcomeChannelId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Features">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.BoostSubscriptionCount">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.BufferBoostSubscriptionCount">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.BoostLevel">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Status">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.AutoDeleteTime">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.RecommendInfo">
            <inheritdoc cref="P:Kook.IGuild.RecommendInfo"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.MemberCount">
            <summary>
                Gets the number of members.
            </summary>
            <remarks>
                This property retrieves the number of members returned by Kook.
                <note type="tip">
                <para>
                    Due to how this property is returned by Kook instead of relying on the WebSocket cache, the
                    number here is the most accurate in terms of counting the number of users within this guild.
                </para>
                <para>
                    Use this instead of enumerating the count of the
                    <see cref="P:Kook.WebSocket.SocketGuild.Users" /> collection, as you may see discrepancy
                    between that and this property.
                </para>
                </note>
                <note type="warning">
                    Only when <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadUsers"/> is set to <c>true</c>
                    will this property be populated upon startup. Otherwise, this property will be <c>null</c>,
                    and will be populated when <see cref="M:Kook.WebSocket.SocketGuild.DownloadUsersAsync(Kook.RequestOptions)"/> is called.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.DownloadedMemberCount">
            <summary> Gets the number of members downloaded to the local guild cache. </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.IsConnected">
            <summary> Indicates whether the client is connected to this guild. </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.HasAllMembers">
            <summary> Indicates whether the client has all the members downloaded to the local guild cache. </summary>
            <remarks>
                <note type="warning">
                    If <see cref="P:Kook.WebSocket.SocketGuild.MemberCount"/> is <c>null</c>, this property will always return <c>null</c>,
                    which means that the client is unable to determine whether all the members are downloaded or not.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.MaxBitrate">
            <inheritdoc/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.MaxUploadLimit">
            <inheritdoc/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.EveryoneRole">
            <summary>
                Gets the built-in role containing all users in this guild.
            </summary>
            <returns>
                A role object that represents an <c>@everyone</c> role in this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.TextChannels">
            <summary>
                Gets a collection of all text channels in this guild.
            </summary>
            <returns>
                A read-only collection of message channels found within this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.VoiceChannels">
            <summary>
                Gets a collection of all voice channels in this guild.
            </summary>
            <returns>
                A read-only collection of voice channels found within this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.CategoryChannels">
            <summary>
                Gets a collection of all stage channels in this guild.
            </summary>
            <returns>
                A read-only collection of stage channels found within this guild.
            </returns>
            <summary>
                Gets a collection of all category channels in this guild.
            </summary>
            <returns>
                A read-only collection of category channels found within this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Channels">
            <summary>
                Gets a collection of all channels in this guild.
            </summary>
            <returns>
                A read-only collection of generic channels found within this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.DefaultChannel">
            <summary>
                Gets the default text channel for this guild.
            </summary>
            <remarks>
                This property retrieves default text channel for this guild.
            </remarks>
            <returns>
                A <see cref="T:Kook.WebSocket.SocketTextChannel"/> representing the default text channel for this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.WelcomeChannel">
            <summary>
                Gets the welcome text channel for this guild.
            </summary>
            <remarks>
                This property retrieves default text channel for this guild.
            </remarks>
            <returns>
                A <see cref="T:Kook.WebSocket.SocketTextChannel"/> representing the default text channel for this guild.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Emotes">
            <inheritdoc cref="P:Kook.IGuild.Emotes"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.BoostSubscriptions">
            <summary>
                Gets a dictionary of all boost subscriptions for this guild.
            </summary>
            <returns>
                A read-only dictionary containing all boost subscription metadata for this guild grouped by users;
                or <c>null</c> if the boost subscription data has never been cached.
            </returns>
            <remarks>
                <note type="warning">
                    <para>
                        Only when <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadBoostSubscriptions"/> is set to <c>true</c>
                        will this property be populated upon startup. Due to the lack of event support for boost subscriptions,
                        this property will never be updated. The changes of <see cref="P:Kook.WebSocket.SocketGuild.BoostSubscriptionCount"/> will trigger the update
                        of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription
                        count. To fetch the latest boost subscription data, use <see cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/> or
                        <see cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> upon a <see cref="T:Kook.WebSocket.KookSocketClient"/> to
                        manually download the latest boost subscription data, or <see cref="M:Kook.WebSocket.SocketGuild.GetBoostSubscriptionsAsync(Kook.RequestOptions)"/>.
                    </para>
                </note>
            </remarks>
            <seealso cref="P:Kook.WebSocket.SocketGuild.ValidBoostSubscriptions"/>
            <seealso cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/>
            <seealso cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/>
            <seealso cref="P:Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.ValidBoostSubscriptions">
            <summary>
                Gets a dictionary of all boost subscriptions which have not expired for this guild.
            </summary>
            <returns>
                A read-only dictionary containing all boost subscription metadata which have not expired for this guild grouped by users;
                or <c>null</c> if the boost subscription data has never been cached.
            </returns>
            <remarks>
                <note type="warning">
                    <para>
                        Only when <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadBoostSubscriptions"/> is set to <c>true</c>
                        will this property be populated upon startup. Due to the lack of event support for boost subscriptions,
                        this property will never be updated. The changes of <see cref="P:Kook.WebSocket.SocketGuild.BoostSubscriptionCount"/> will trigger the update
                        of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription
                        count. To fetch the latest boost subscription data, use <see cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/> or
                        <see cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> upon a <see cref="T:Kook.WebSocket.KookSocketClient"/> to
                        manually download the latest boost subscription data, or <see cref="M:Kook.WebSocket.SocketGuild.GetBoostSubscriptionsAsync(Kook.RequestOptions)"/>.
                    </para>
                </note>
            </remarks>
            <seealso cref="P:Kook.WebSocket.SocketGuild.BoostSubscriptions"/>
            <seealso cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/>
            <seealso cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/>
            <seealso cref="P:Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Users">
            <summary>
                Gets a collection of users in this guild.
            </summary>
            <remarks>
                This property retrieves all users found within this guild.
                <note type="warning">
                    <para>
                        This property may not always return all the members for large guilds (i.e. guilds containing
                        100+ users). If you are simply looking to get the number of users present in this guild,
                        consider using <see cref="P:Kook.WebSocket.SocketGuild.MemberCount"/> instead.
                    </para>
                    <para>
                        Otherwise, you may need to enable <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadUsers"/> to fetch
                        the full user list upon startup, or use <see cref="M:Kook.WebSocket.SocketGuild.DownloadUsersAsync(Kook.RequestOptions)"/> to manually download
                        the users.
                    </para>
                </note>
            </remarks>
            <returns>
                A collection of guild users found within this guild.
            </returns>
            <seealso cref="M:Kook.WebSocket.SocketGuild.DownloadUsersAsync(Kook.RequestOptions)"/>
            <seealso cref="P:Kook.WebSocket.KookSocketClient.AlwaysDownloadUsers"/>
            <seealso cref="M:Kook.WebSocket.KookSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Roles">
            <summary>
                Gets a collection of all roles in this guild.
            </summary>
            <returns>
                A read-only collection of roles found within this guild.
            </returns>
            <remarks>
                <note type="warning">
                    Due to the lack of event args which should contains the reordered roles data
                    when roles are reordered, this property may not be completely accurate.
                    To ensure the most accurate results, it is recommended to
                    call <see cref="M:Kook.WebSocket.SocketGuild.UpdateAsync(Kook.RequestOptions)"/> before this property is used.
                </note>
            </remarks>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.UpdateAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.ToString">
            <summary>
                Gets the name of the guild.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Kook.WebSocket.SocketGuild.Name"/>.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.LeaveAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetBoostSubscriptionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetActiveBoostSubscriptionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetBansAsync(Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IGuild.GetBansAsync(Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetBanAsync(Kook.IUser,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IGuild.GetBanAsync(Kook.IUser,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IGuild.GetBanAsync(System.UInt64,Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.AddBanAsync(Kook.IUser,System.Int32,System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.RemoveBanAsync(Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetChannel(System.UInt64)">
            <summary>
                Gets a channel in this guild.
            </summary>
            <param name="id">The identifier for the channel.</param>
            <returns>
                A generic channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetTextChannel(System.UInt64)">
            <summary>
                Gets a text channel in this guild.
            </summary>
            <param name="id">The identifier for the text channel.</param>
            <returns>
                A text channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)">
            <summary>
                Gets a voice channel in this guild.
            </summary>
            <param name="id">The identifier for the voice channel.</param>
            <returns>
                A voice channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)">
            <summary>
                Gets a category channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the category channel.</param>
            <returns>
                A category channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,System.Action{Kook.CreateTextChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new text channel in this guild.
            </summary>
            <param name="name">The new name for the text channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                text channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,System.Action{Kook.CreateVoiceChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new voice channel in this guild.
            </summary>
            <param name="name">The new name for the voice channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                voice channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,System.Action{Kook.CreateCategoryChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new channel category in this guild.
            </summary>
            <param name="name">The new name for the category.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                category channel.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetRole(System.UInt32)">
            <summary>
                Gets a role in this guild.
            </summary>
            <param name="id">The identifier for the role.</param>
            <returns>
                A role that is associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateRoleAsync(System.String,Kook.RequestOptions)">
            <summary>
                Creates a new role with the provided name.
            </summary>
            <param name="name">The new name for the role.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                role.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetUser(System.UInt64)">
            <summary>
                Gets a user from this guild.
            </summary>
            <remarks>
                This method retrieves a user found within this guild.
                <note>
                    This may return <c>null</c> in the WebSocket implementation due to incomplete user collection in
                    large guilds.
                </note>
            </remarks>
            <param name="id">The identifier of the user.</param>
            <returns>
                A guild user associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.PurgeUserCache">
            <summary>
                Purges this guild's user cache.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.PurgeUserCache(System.Func{Kook.WebSocket.SocketGuildUser,System.Boolean})">
            <summary>
                Purges this guild's user cache.
            </summary>
            <param name="predicate">The predicate used to select which users to clear.</param>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetUsersAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of all users in this guild.
            </summary>
            <remarks>
                <para>This method retrieves all users found within this guild through REST.</para>
                <para>Users returned by this method are not cached.</para>
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users found within this guild.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.DownloadUsersAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.DownloadVoiceStatesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.SearchUsersAsync(System.Action{Kook.SearchGuildMemberProperties},System.Int32,Kook.RequestOptions)">
            <summary>
                Gets a collection of users in this guild that the name or nickname contains the
                provided string at <paramref name="func"/>.
            </summary>
            <remarks>
                The <paramref name="limit"/> can not be higher than <see cref="F:Kook.KookConfig.MaxUsersPerBatch"/>.
            </remarks>
            <param name="func">A delegate containing the properties to search users with.</param>
            <param name="limit">The maximum number of users to be gotten.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users that matches the properties with the provided <see cref="T:System.Action`1"/>
                at <paramref name="func"/>.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.MoveUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuildUser},Kook.IVoiceChannel,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetEmote(System.String)">
            <summary>
                Gets a guild emoji in this guild.
            </summary>
            <param name="id">The identifier for the guild emoji.</param>
            <returns>
                A guild emoji associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetEmotesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetEmoteAsync(System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Kook.Image,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.ModifyEmoteNameAsync(Kook.GuildEmote,System.String,Kook.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.DeleteEmoteAsync(Kook.GuildEmote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetInvitesAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.CreateInviteAsync(Kook.InviteMaxAge,Kook.InviteMaxUses,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Kook#IGuild#Available">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetCurrentUserAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetOwnerAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#SearchUsersAsync(System.Action{Kook.SearchGuildMemberProperties},System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Kook#IGuild#EveryoneRole">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Kook#IGuild#Roles">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Kook#IGuild#Emotes">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetRole(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuild.Kook#IGuild#RecommendInfo">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#CreateRoleAsync(System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetBansAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetBanAsync(Kook.IUser,Kook.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetBanAsync(System.UInt64,Kook.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetDefaultChannelAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetWelcomeChannelAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetTextChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetTextChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetVoiceChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetVoiceChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#GetCategoryChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#CreateTextChannelAsync(System.String,System.Action{Kook.CreateTextChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Kook.CreateVoiceChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.Kook#IGuild#CreateCategoryChannelAsync(System.String,System.Action{Kook.CreateCategoryChannelProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuild.GetBadgeAsync(Kook.BadgeStyle,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketInvite">
            <summary>
                Represents a WebSocket-based invite to a guild.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.ChannelId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Channel">
            <summary>
                Gets the channel where this invite was created.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Guild">
            <summary>
                Gets the guild where this invite was created.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.ExpiresAt">
            <summary>
                Gets the time at which this invite will expire.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.MaxAge">
            <summary>
                Gets the time span until the invite expires.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.RemainingUses">
            <summary>
                Gets the number of times this invite still remains.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Inviter">
            <summary>
                Gets the user that created this invite if available.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Code">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Url">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketInvite.DeleteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketInvite.ToString">
            <summary>
                Gets the URL of the invite.
            </summary>
            <returns>
                A string that resolves to the Url of the invite.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#Guild">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#Channel">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#Inviter">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#ChannelType">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#ChannelName">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketInvite.Kook#IInvite#GuildName">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.MessageCache.GetMany(System.Nullable{System.Guid},Kook.Direction,System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="limit"/> is less than 0.</exception>
        </member>
        <member name="T:Kook.WebSocket.SocketMessage">
            <summary>
                Represents a WebSocket-based message.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Author">
            <summary>
                Gets the author of this message.
            </summary>
            <returns>
                A WebSocket-based user object.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Channel">
            <summary>
                Gets the source channel of the message.
            </summary>
            <returns>
                A WebSocket-based message channel.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Source">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Content">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.RawContent">
            <summary>
                Gets the raw content of the message.
            </summary>
            <remarks>
                This property is only available for messages that were received from the gateway.
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.CleanContent">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.MentionedEveryone">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.MentionedHere">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Type">
            <inheritdoc/>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Attachments">
            <summary>
                Gets the attachment included in this message.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Cards">
            <summary>
                Returns all cards included in this message.
            </summary>
            <returns>
                Collection of card objects.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Embeds">
            <summary>
                Returns all embeds included in this message.
            </summary>
            <returns>
                Collection of embed objects.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Pokes">
            <summary>
                Gets a collection of the <see cref="T:Kook.WebSocket.SocketPokeAction"/>'s on the message.
            </summary>
            <returns>
                Collection of poke action objects.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.MentionedRoles">
            <summary>
                Returns the roles mentioned in this message.
            </summary>
            <returns>
                Collection of WebSocket-based roles.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.MentionedUsers">
            <summary>
                Returns the users mentioned in this message.
            </summary>
            <returns>
                Collection of WebSocket-based users.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Reactions">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.DeleteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.UpdateAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.AddReactionAsync(Kook.IEmote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.RemoveReactionAsync(Kook.IEmote,Kook.IUser,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.RemoveReactionAsync(Kook.IEmote,System.UInt64,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.GetReactionUsersAsync(Kook.IEmote,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketMessage.ToString">
            <summary>
                Gets the content of the message.
            </summary>
            <returns>
                Content of the message.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Author">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Channel">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#MentionedUserIds">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Attachments">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Cards">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Embeds">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketMessage.Kook#IMessage#Pokes">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketPokeAction">
            <summary>
                Represents a single WebSocket-based poke action.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Operator">
            <inheritdoc cref="P:Kook.IPokeAction.Operator" />
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Targets">
            <inheritdoc cref="P:Kook.IPokeAction.Targets" />
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Poke">
            <inheritdoc cref="P:Kook.IPokeAction.Poke" />
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Kook#IPokeAction#Operator">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Kook#IPokeAction#Targets">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketPokeAction.Kook#IPokeAction#Poke">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketReaction">
            <summary>
                Represents a WebSocket-based reaction.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.UserId">
            <summary>
                Gets the ID of the user who added the reaction.
            </summary>
            <remarks>
                This property retrieves the identifier of the user responsible for this reaction. This
                property will always contain the user identifier in event that
                <see cref="P:Kook.WebSocket.SocketReaction.User" /> cannot be retrieved.
            </remarks>
            <returns>
                A user identifier associated with the user.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.User">
            <summary>
                Gets the user who added the reaction if possible.
            </summary>
            <remarks>
                <para>
                    This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from
                    the client. In other words, when the user is not in the WebSocket cache, this property may not
                    contain a value, leaving the only identifiable information to be
                    <see cref="P:Kook.WebSocket.SocketReaction.UserId" />.
                </para>
                <para>
                    If you wish to obtain an identifiable user object, consider utilizing
                    <see cref="T:Kook.Rest.KookRestClient" /> which will attempt to retrieve the user from REST.
                </para>
            </remarks>
            <returns>
                A user object where possible; a value is not always returned.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.MessageId">
            <summary>
                Gets the ID of the message that has been reacted to.
            </summary>
            <returns>
                A message Guid associated with the message.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.Message">
            <summary>
                Gets the message that has been reacted to if possible.
            </summary>
            <returns>
                A WebSocket-based message where possible; a value is not always returned.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.Channel">
            <summary>
                Gets the channel where the reaction takes place in.
            </summary>
            <returns>
                A WebSocket-based message channel.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketReaction.Emote">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketReaction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketReaction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketSystemMessage">
            <summary>
                Represents a WebSocket-based message sent by the system.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketSystemMessage.SystemMessageType">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketUserMessage">
            <summary>
                Represents a WebSocket-based message sent by a user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Quote">
            <inheritdoc cref="P:Kook.IUserMessage.Quote"/>
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Guild">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.SocketGuild"/> that the message was sent from.
            </summary>
            <returns>
                The <see cref="T:Kook.WebSocket.SocketGuild"/> that the message was sent from.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.IsPinned">
            <inheritdoc cref="P:Kook.IMessage.IsPinned"/>
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Attachments">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Cards">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Embeds">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Pokes">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.MentionedRoles">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.MentionedChannels">
            <summary>
                Gets a collection of the mentioned channels in the message.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.MentionedEveryone">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.MentionedHere">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Tags">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUserMessage.ModifyAsync(System.Action{Kook.MessageProperties},Kook.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Only the author of a message may modify the message.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Kook.KookConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Kook.WebSocket.SocketUserMessage.Resolve(System.Int32,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling)">
            <summary>
                Transforms this message's text into a human-readable form by resolving its tags.
            </summary>
            <param name="startIndex">The zero-based index at which to begin the resolving for the specified value.</param>
            <param name="userHandling">Determines how the user tag should be handled.</param>
            <param name="channelHandling">Determines how the channel tag should be handled.</param>
            <param name="roleHandling">Determines how the role tag should be handled.</param>
            <param name="everyoneHandling">Determines how the @everyone tag should be handled.</param>
            <param name="emojiHandling">Determines how the emoji tag should be handled.</param>
        </member>
        <member name="M:Kook.WebSocket.SocketUserMessage.Resolve(Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Kook#IMessage#IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Kook#IUserMessage#Quote">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Kook#IMessage#Cards">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUserMessage.Kook#IMessage#Embeds">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketRole">
            <summary>
                Represents a WebSocket-based role to be given to a guild user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Guild">
            <summary>
                Gets the guild that owns this role.
            </summary>
            <returns>
                A <see cref="T:Kook.WebSocket.SocketGuild"/> representing the parent guild of this role.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Name">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Color">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.ColorType">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.GradientColor">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Position">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.IsHoisted">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.IsMentionable">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.IsEveryone">
            <summary>
                Returns a value that determines if the role is an @everyone role.
            </summary>
            <returns>
                <c>true</c> if the role is @everyone; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketRole.KMarkdownMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketRole.PlainTextMention">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketRole.ModifyAsync(System.Action{Kook.RoleProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketRole.DeleteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketRole.GetUsersAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of users with this role.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of users with this role.
            </returns>
            <remarks>
                If the guild this role belongs to does not has all members cached locally
                by checking <see cref="P:Kook.WebSocket.SocketGuild.HasAllMembers"/>, this method will request
                the data via REST and update the guild users cache, otherwise it will
                return the cached data.
            </remarks>
        </member>
        <member name="M:Kook.WebSocket.SocketRole.CompareTo(Kook.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketRole.ToString">
            <summary>
                Gets the name of the role.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Kook.WebSocket.SocketRole.Name" />.
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketRole.Kook#IRole#Guild">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketRole.Kook#IRole#GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketEntity`1">
            <summary>
                Represents a WebSocket-based entity.
            </summary>
            <typeparam name="T"> The type of the entity's identifier. </typeparam>
        </member>
        <member name="P:Kook.WebSocket.SocketEntity`1.Id">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.IdentifyNumberValue">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.IsBanned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.HasBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.HasAnnualBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.Avatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.BuffAvatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.IsDenoiseEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.UserTag">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.Nameplates">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.IsSystemUser">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGlobalUser.GlobalUser">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketGuildUser">
            <summary>
                Represents a WebSocket-based guild user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Guild">
            <summary>
                Gets the guild the user is in.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Nickname">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsMobileVerified">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.JoinedAt">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.ActiveAt">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Color">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsOwner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.PlainTextMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IdentifyNumberValue">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Avatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.BuffAvatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsBanned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.HasBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.HasAnnualBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsDenoiseEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.UserTag">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Nameplates">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsSystemUser">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.GuildPermissions">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.BoostSubscriptions">
            <summary>
                Gets a collection of all boost subscriptions of this user for this guild.
            </summary>
            <returns>
                A read-only collection of boost subscription metadata of this user for this guild;
                or <c>null</c> if the boost subscription data has never been cached.
            </returns>
            <remarks>
                <note type="warning">
                    <para>
                        Only when <see cref="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadBoostSubscriptions"/> is set to <c>true</c>
                        will this property be populated upon startup. Due to the lack of event support for boost subscriptions,
                        this property may be not up-to-date. The changes of <see cref="P:Kook.WebSocket.SocketGuild.BoostSubscriptionCount"/> will trigger the update
                        of this property, but KOOK gateway will not publish this event resulting from the changes of total boost subscription
                        count. To fetch the latest boost subscription data, use <see cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/> upon <see cref="T:Kook.WebSocket.SocketGuild"/>
                        or <see cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/>
                        upon a <see cref="T:Kook.WebSocket.KookSocketClient"/> to manually download the latest boost subscription data,
                        or <see cref="M:Kook.WebSocket.SocketGuildUser.GetBoostSubscriptionsAsync(Kook.RequestOptions)"/>.
                    </para>
                </note>
            </remarks>
            <seealso cref="M:Kook.WebSocket.SocketGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)"/>
            <seealso cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/>
            <seealso cref="P:Kook.WebSocket.KookSocketClient.AlwaysDownloadBoostSubscriptions"/>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Roles">
            <summary>
                Returns a collection of roles that the user possesses.
            </summary>
            <remarks>
                <note type="warning">
                    Due to the lack of events which should be raised when a role is added or removed from a user,
                    this property may not be completely accurate. To ensure the most accurate results,
                    it is recommended to call <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/> before this property is used.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.VoiceChannel">
            <summary>
                Returns the voice channel the user is in, or <c>null</c> if none or unknown.
                <note type="warning">
                    If a user connects to a voice channel before the bot has connected to the gateway,
                    this property will be <c>null</c> until <see cref="M:Kook.WebSocket.SocketGuild.DownloadVoiceStatesAsync(Kook.RequestOptions)"/>
                    or <see cref="M:Kook.WebSocket.KookSocketClient.DownloadVoiceStatesAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> is called.
                    To ensure whether the user is in a voice channel or not, use those methods above,
                    or <see cref="M:Kook.WebSocket.SocketGuildUser.GetConnectedVoiceChannelsAsync(Kook.RequestOptions)"/>.
                </note>
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.VoiceState">
            <summary>
                Gets the voice status of the user if any.
            </summary>
            <returns>
                A <see cref="T:Kook.WebSocket.SocketVoiceState" /> representing the user's voice status; <c>null</c> if the user is neither
                connected to a voice channel nor is muted or deafened by the guild.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.ModifyNicknameAsync(System.String,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.GetBoostSubscriptionsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.KickAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.AddRoleAsync(System.UInt32,Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is added to a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.AddRoleAsync(Kook.IRole,Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is added to a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{System.UInt32},Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is added to a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Kook.IRole},Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is added to a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.RemoveRoleAsync(System.UInt32,Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is removed from a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.RemoveRoleAsync(Kook.IRole,Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is removed from a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{System.UInt32},Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is removed from a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Kook.IRole},Kook.RequestOptions)">
            <inheritdoc />
            <note type="warning">
                Due to the lack of events which should be raised when a role is removed from a user,
                the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property will not be updated immediately after
                calling this method. To update the cached roles of this user, please use <see cref="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)"/>.
            </note>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.MuteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.DeafenAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.UnmuteAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.UndeafenAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.GetConnectedVoiceChannelsAsync(Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IGuildUser.GetConnectedVoiceChannelsAsync(Kook.RequestOptions)"/>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.UpdateAsync(Kook.RequestOptions)">
            <summary>
                Fetches the users data from the REST API to update this object,
                especially the <see cref="P:Kook.WebSocket.SocketGuildUser.Roles"/> property.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous reloading operation.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.GetPermissions(Kook.IGuildChannel)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Kook#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Kook#IGuildUser#GuildId">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Kook#IGuildUser#RoleIds">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketGuildUser.Kook#IGuildUser#GetConnectedVoiceChannelsAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketGuildUser.Kook#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketPresence">
            <summary>
                Represents the WebSocket user's presence status. This may include their online status and their activity.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketPresence.IsOnline">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketPresence.ActiveClient">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketPresence.ConvertClientType(System.String)">
            <summary>
                The client type where a user is active.
            </summary>
            <param name="clientType">
                A string representing the client type.
            </param>
            <returns>
                A <see cref="T:Kook.ClientType"/> that this user is active.
            </returns>
        </member>
        <member name="T:Kook.WebSocket.SocketSelfUser">
            <summary>
                Represents the logged-in WebSocket-based user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IdentifyNumberValue">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Avatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.BuffAvatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IsBanned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.HasBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.HasAnnualBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IsDenoiseEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.UserTag">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Nameplates">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IsSystemUser">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.MobilePrefix">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.Mobile">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.InvitedCount">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketSelfUser.IsMobileVerified">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketSelfUser.StartPlayingAsync(Kook.IGame,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketSelfUser.StartPlayingAsync(Kook.Music,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketSelfUser.StopPlayingAsync(Kook.ActivityType,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketUnknownUser">
            <summary>
                Represents a WebSocket-based user that is yet to be recognized by the client.
            </summary>
            <remarks>
                A user may not be recognized due to the user missing from the cache or failed to be recognized properly.
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.IdentifyNumberValue">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.IsBanned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.HasBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.HasAnnualBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.Avatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.BuffAvatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.IsDenoiseEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.UserTag">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.Nameplates">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.IsSystemUser">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUnknownUser.GlobalUser">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This field is not supported for an unknown user.</exception>
        </member>
        <member name="T:Kook.WebSocket.SocketUser">
            <summary>
                Represents a WebSocket-based user.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IdentifyNumberValue">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IsBanned">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.HasBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.HasAnnualBuff">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.Avatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.BuffAvatar">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.Banner">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IsDenoiseEnabled">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.UserTag">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.Nameplates">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IsSystemUser">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IdentifyNumber">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.KMarkdownMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.PlainTextMention">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.IsOnline">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketUser.ActiveClient">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.#ctor(Kook.WebSocket.KookSocketClient,System.UInt64)">
            <summary>
                Initializes a new WebSocket-based user.
            </summary>
            <param name="kook"> The WebSocket client. </param>
            <param name="id"> The identifier of the user. </param>
        </member>
        <member name="M:Kook.WebSocket.SocketUser.CreateDMChannelAsync(Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IUser.CreateDMChannelAsync(Kook.RequestOptions)" />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.GetIntimacyAsync(Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IUser.GetIntimacyAsync(Kook.RequestOptions)" />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.UpdateIntimacyAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)">
            <inheritdoc cref="M:Kook.IUser.UpdateIntimacyAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)" />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.BlockAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.UnblockAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.RequestFriendAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.RemoveFriendAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.ToString">
            <summary>
                Gets the full name of the user (e.g. Example#0001).
            </summary>
            <returns>
                The full name of the user.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.SocketUser.Kook#IUser#CreateDMChannelAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.Kook#IUser#GetIntimacyAsync(Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketUser.Kook#IUser#UpdateIntimacyAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.SocketVoiceState">
            <summary>
                Represents a WebSocket user's voice connection status.
            </summary>
        </member>
        <member name="F:Kook.WebSocket.SocketVoiceState.Default">
            <summary>
                Initializes a default <see cref="T:Kook.WebSocket.SocketVoiceState"/> with everything set to <c>null</c> or <c>false</c>.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceState.#ctor(Kook.WebSocket.SocketVoiceChannel,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Initializes a new <see cref="T:Kook.WebSocket.SocketVoiceState"/> with the specified voice channel.
            </summary>
            <param name="voiceChannel"> The voice channel that the user is currently in. </param>
            <param name="isMuted"> Whether the user is muted. </param>
            <param name="isDeafened"> Whether the user is deafened. </param>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceState.VoiceChannel">
            <summary>
                Gets the voice channel that the user is currently in; or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceState.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceState.IsDeafened">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.SocketVoiceState.ToString">
            <summary>
                Gets the name of this voice channel.
            </summary>
            <returns>
                A string that resolves to name of this voice channel; otherwise "Unknown".
            </returns>
        </member>
        <member name="P:Kook.WebSocket.SocketVoiceState.Kook#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="T:Kook.WebSocket.GatewayReconnectException">
            <summary>
                The exception thrown when the gateway client has been requested to reconnect.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.GatewayReconnectException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.WebSocket.GatewayReconnectException" /> class with the reconnection
                message.
            </summary>
            <param name="message">The reason why the gateway has been requested to reconnect.</param>
        </member>
        <member name="T:Kook.WebSocket.KookSocketClient">
            <summary>
                Represents a WebSocket-based KOOK client.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketClient.Rest">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.KookSocketClient.ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.KookSocketClient.Latency">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.KookSocketClient.Guilds">
            <inheritdoc />
        </member>
        <member name="P:Kook.WebSocket.KookSocketClient.DMChannels">
            <summary>
                Gets a collection of direct message channels opened in this session.
            </summary>
            <remarks>
                This method returns a collection of currently opened direct message channels.
                <note type="warning">
                    This method will not return previously opened DM channels outside of the current session! If you
                    have just started the client, this may return an empty collection.
                </note>
            </remarks>
            <returns>
                A collection of DM channels that have been opened in this session.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.#ctor">
            <summary>
                Initializes a new REST/WebSocket-based Kook client.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.#ctor(Kook.WebSocket.KookSocketConfig)">
            <summary>
                Initializes a new REST/WebSocket-based Kook client with the provided configuration.
            </summary>
            <param name="config">The configuration to be used with the client.</param>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetGuild(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetChannel(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetDMChannel(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetDMChannel(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetChannelAsync(System.UInt64,Kook.RequestOptions)">
            <summary>
                Gets a generic channel from the cache or does a rest request if unavailable.
            </summary>
            <param name="id">The identifier of the channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the channel associated
                with the identifier; <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetDMChannelAsync(System.Guid,Kook.RequestOptions)">
            <summary>
                Gets a direct message channel from the cache or does a rest request if unavailable.
            </summary>
            <param name="chatCode">The identifier of the channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the channel associated
                with the identifier; <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetDMChannelsAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of direct message channels from the cache or does a rest request if unavailable.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the channel associated
                with the identifier; <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetUserAsync(System.UInt64,Kook.RequestOptions)">
            <summary>
                Gets a user from the cache or does a rest request if unavailable.
            </summary>
            <param name="id">The identifier of the user (e.g. `168693960628371456`).</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the user associated with
                the identifier; <c>null</c> if the user is not found.
            </returns>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.GetUser(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Downloads all users for the specified guilds.
            </summary>
            <param name="guilds">
                The guilds to download the users for. If <c>null</c>, all available guilds will be downloaded.
            </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.DownloadVoiceStatesAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Downloads all voice states for the specified guilds.
            </summary>
            <param name="guilds">
                The guilds to download the voice states for. If <c>null</c>, all available guilds will be downloaded.
            </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)">
            <summary>
                Downloads all boost subscriptions for the specified guilds.
            </summary>
            <param name="guilds">
                The guilds to download the boost subscriptions for. If <c>null</c>, all available guilds will be downloaded.
                To download all boost subscriptions, the current user must has the
                <see cref="F:Kook.GuildPermission.ManageGuild"/> permission.
            </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetGuildsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetGuildAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetDMChannelAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Kook.WebSocket.KookSocketClient.Kook#IKookClient#GetDMChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="E:Kook.WebSocket.KookSocketClient.Connected">
            <summary> Fired when connected to the Kook gateway. </summary>
        </member>
        <member name="E:Kook.WebSocket.KookSocketClient.Disconnected">
            <summary> Fired when disconnected to the Kook gateway. </summary>
        </member>
        <member name="E:Kook.WebSocket.KookSocketClient.Ready">
            <summary>
                Fired when guild data has finished downloading.
            </summary>
            <remarks>
                <note type="warning">
                    Because guilds may contain a large amount of members,
                    this event will not wait for all users, subscriptions, and voice states
                    to be downloaded. It will only wait for guilds, channels, roles, and
                    emojis to be downloaded.
                </note>
            </remarks>
        </member>
        <member name="E:Kook.WebSocket.KookSocketClient.LatencyUpdated">
            <summary> Fired when a heartbeat is received from the Kook gateway. </summary>
        </member>
        <member name="T:Kook.WebSocket.KookSocketConfig">
            <summary>
                Represents a configuration class for <see cref="T:Kook.WebSocket.KookSocketClient"/>.
            </summary>
            <remarks>
                This configuration, based on <see cref="T:Kook.Rest.KookRestConfig"/>, helps determine several key configurations the
                socket client depend on. For instance, message cache and connection timeout.
            </remarks>
            <example>
                The following config enables the message cache and configures the client to always download user upon guild
                availability.
                <code language="cs">
                var config = new KookSocketConfig
                {
                    AlwaysDownloadUsers = true,
                    MessageCacheSize = 100
                };
                var client = new KookSocketClient(config);
                </code>
            </example>
        </member>
        <member name="F:Kook.WebSocket.KookSocketConfig.GatewayEncoding">
            <summary>
               Returns the encoding gateway should use.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.GatewayHost">
            <summary>
                Gets or sets the WebSocket host to connect to. If <c>null</c>, the client will use the
                /gateway endpoint.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.ConnectionTimeout">
            <summary>
                Gets or sets the time, in milliseconds, to wait for a connection to complete before aborting.
            </summary>
        </member>
        <member name="F:Kook.WebSocket.KookSocketConfig.HeartbeatIntervalMilliseconds">
            <summary>
                Gets the heartbeat interval of WebSocket connection in milliseconds.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.HandlerTimeout">
            <summary>
                Gets or sets the timeout for event handlers, in milliseconds, after which a warning will be logged.
                Setting this property to <c>null</c>disables this check.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.MessageCacheSize">
            <summary>
                Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero
                disables the message cache entirely.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.WebSocketProvider">
            <summary>
                Gets or sets the provider used to generate new WebSocket connections.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.UdpSocketProvider">
            <summary>
                Gets or sets the provider used to generate new UDP sockets.
            </summary>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadUsers">
            <summary>
                Gets or sets whether or not all users should be downloaded as guilds come available.
            </summary>
            <remarks>
                <note>
                    Setting this property to <c>true</c> will cause the client to download all users
                    for all guilds upon startup.
                    Please note that it can be difficult to fill the cache completely on large guilds depending on the
                    traffic. If you are experiencing issues, try setting this to <c>false</c> and manually call
                    <see cref="M:Kook.WebSocket.KookSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> on the guilds you want.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadVoiceStates">
            <summary>
                Gets or sets whether or not all voice states should be downloaded as guilds come available.
            </summary>
            <remarks>
                <note>
                    Setting this property to <c>true</c> will cause the client to download all voice states
                    for all guilds upon startup.
                    Please note that it can be difficult to fill the cache completely on large guilds depending on the
                    traffic. If you are experiencing issues, try setting this to <c>false</c> and manually call
                    <see cref="M:Kook.WebSocket.KookSocketClient.DownloadVoiceStatesAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> on the guilds you want.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.AlwaysDownloadBoostSubscriptions">
            <summary>
                Gets or sets whether or not all boost subscriptions should be downloaded as guilds come available.
            </summary>
            <remarks>
                <note>
                    Setting this property to <c>true</c> will cause the client to download all boost subscriptions
                    for all guilds upon startup and when <see cref="E:Kook.WebSocket.BaseSocketClient.GuildUpdated"/> is triggered with
                    changes occurring to <see cref="P:Kook.WebSocket.SocketGuild.BoostSubscriptionCount"/>.
                    Please note that it can be difficult to fill the cache completely on large guilds depending on the
                    traffic. If you are experiencing issues, try setting this to <c>false</c> and manually call
                    <see cref="M:Kook.WebSocket.KookSocketClient.DownloadBoostSubscriptionsAsync(System.Collections.Generic.IEnumerable{Kook.IGuild},Kook.RequestOptions)"/> on the guilds you want.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.MaxWaitBetweenGuildAvailablesBeforeReady">
            <summary>
                Gets or sets the maximum wait time in milliseconds between GUILD_AVAILABLE events before firing READY.
                If zero, READY will fire as soon as it is received and all guilds will be unavailable.
            </summary>
            <remarks>
                <para>This property is measured in milliseconds; negative values will throw an exception.</para>
                <para>If a guild is not received before READY, it will be unavailable.</para>
            </remarks>
            <returns>
                An int representing the maximum wait time in milliseconds between GUILD_AVAILABLE events
                before firing READY.
            </returns>
            <exception cref="T:System.ArgumentException">Value must be at least 0.</exception>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.MaxJoinedGuildDataFetchingRetryTimes">
            <summary>
                Gets or sets the maximum number of times to retry fetching joined guild data.
            </summary>
            <remarks>
                Due to the KOOK API cannot return the newly joined guilds immediately well, this property is used to
                control the maximum number of times to retry fetching joined guild data. Each retry will be delayed
                by <see cref="P:Kook.WebSocket.KookSocketConfig.JoinedGuildDataFetchingRetryDelay"/> milliseconds. Set to 0 or negative value to disable
                retrying.
            </remarks>
        </member>
        <member name="P:Kook.WebSocket.KookSocketConfig.JoinedGuildDataFetchingRetryDelay">
            <summary>
                Gets or sets the delay in milliseconds between each retry of fetching joined guild data.
            </summary>
            <exception cref="T:System.ArgumentException">Value must be at least 0.</exception>
        </member>
        <member name="M:Kook.WebSocket.KookSocketConfig.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.WebSocket.KookSocketConfig"/> class.
            </summary>
        </member>
        <member name="T:Kook.WebSocket.KookSocketRestClient">
            <summary>
                Represents an REST-only client that is used in a WebSocket-based client.
            </summary>
        </member>
        <member name="M:Kook.WebSocket.KookSocketRestClient.LoginAsync(Kook.TokenType,System.String,System.Boolean)">
            <summary>
                Throws a <see cref="T:System.NotSupportedException"/> when trying to log in.
            </summary>
            <exception cref="T:System.NotSupportedException"> The Socket REST wrapper cannot be used to log in or out. </exception>
        </member>
        <member name="M:Kook.WebSocket.KookSocketRestClient.LogoutAsync">
            <summary>
                Throws a <see cref="T:System.NotSupportedException"/> when trying to log out.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The Socket REST wrapper cannot be used to log in or out. </exception>
        </member>
        <member name="T:Kook.Commands.SocketCommandContext">
            <summary>
                Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Client">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.KookSocketClient" /> that the command is executed with.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Guild">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.SocketGuild" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Channel">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.ISocketMessageChannel" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.User">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.SocketUser" /> who executed the command.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Message">
            <summary>
                Gets the <see cref="T:Kook.WebSocket.SocketUserMessage" /> that the command is interpreted from.
            </summary>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.IsPrivate">
            <summary>
                Indicates whether the channel that the command is executed in is a private channel.
            </summary>
        </member>
        <member name="M:Kook.Commands.SocketCommandContext.#ctor(Kook.WebSocket.KookSocketClient,Kook.WebSocket.SocketUserMessage)">
            <summary>
                Initializes a new <see cref="T:Kook.Commands.SocketCommandContext" /> class with the provided client and message.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="msg">The underlying message.</param>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Kook#Commands#ICommandContext#Client">
            <inheritdoc/>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Kook#Commands#ICommandContext#Guild">
            <inheritdoc/>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Kook#Commands#ICommandContext#Channel">
            <inheritdoc/>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Kook#Commands#ICommandContext#User">
            <inheritdoc/>
        </member>
        <member name="P:Kook.Commands.SocketCommandContext.Kook#Commands#ICommandContext#Message">
            <inheritdoc/>
        </member>
        <member name="T:Kook.Net.Udp.DefaultUdpSocketProvider">
            <summary>
                Represents a delegate that provides a <see cref="T:Kook.Net.Udp.IUdpSocket"/> instance.
            </summary>
        </member>
        <member name="F:Kook.Net.Udp.DefaultUdpSocketProvider.Instance">
            <summary>
                A delegate that creates a default <see cref="T:Kook.Net.Udp.UdpSocketProvider"/> instance.
            </summary>
        </member>
        <member name="T:Kook.Net.WebSockets.DefaultWebSocketProvider">
            <summary>
                Represents a default <see cref="T:Kook.Net.WebSockets.WebSocketProvider"/> that creates <see cref="T:Kook.Net.WebSockets.DefaultWebSocketClient"/> instances.
            </summary>
        </member>
        <member name="F:Kook.Net.WebSockets.DefaultWebSocketProvider.Instance">
            <summary>
                A delegate that creates a default <see cref="T:Kook.Net.WebSockets.WebSocketProvider"/> instance.
            </summary>
        </member>
        <member name="M:Kook.Net.WebSockets.DefaultWebSocketProvider.Create(System.Net.IWebProxy)">
            <summary>
                Creates a delegate that creates a new <see cref="T:Kook.Net.WebSockets.DefaultWebSocketClient"/> instance.
            </summary>
            <param name="proxy"> The proxy to use. </param>
            <returns> A delegate that creates a new <see cref="T:Kook.Net.WebSockets.DefaultWebSocketClient"/> instance. </returns>
            <exception cref="T:System.PlatformNotSupportedException">The default WebSocketProvider is not supported on this platform.</exception>
        </member>
    </members>
</doc>
