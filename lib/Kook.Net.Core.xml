<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kook.Net.Core</name>
    </assembly>
    <members>
        <member name="T:Kook.Commands.ICommandContext">
            <summary>
                Represents a context of a command. This may include the client, guild, channel, user, and message.
            </summary>
        </member>
        <member name="P:Kook.Commands.ICommandContext.Client">
            <summary>
                Gets the <see cref="T:Kook.IKookClient" /> that the command is executed with.
            </summary>
        </member>
        <member name="P:Kook.Commands.ICommandContext.Guild">
            <summary>
                Gets the <see cref="T:Kook.IGuild" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Kook.Commands.ICommandContext.Channel">
            <summary>
                Gets the <see cref="T:Kook.IMessageChannel" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Kook.Commands.ICommandContext.User">
            <summary>
                Gets the <see cref="T:Kook.IUser" /> who executed the command.
            </summary>
        </member>
        <member name="P:Kook.Commands.ICommandContext.Message">
            <summary>
                Gets the <see cref="T:Kook.IUserMessage" /> that the command is interpreted from.
            </summary>
        </member>
        <member name="T:Kook.ConnectionState">
            <summary> Specifies the connection state of a client. </summary>
        </member>
        <member name="F:Kook.ConnectionState.Disconnected">
            <summary> The client has disconnected from Kook. </summary>
        </member>
        <member name="F:Kook.ConnectionState.Connecting">
            <summary> The client is connecting to Kook. </summary>
        </member>
        <member name="F:Kook.ConnectionState.Connected">
            <summary> The client has established a connection to Kook. </summary>
        </member>
        <member name="F:Kook.ConnectionState.Disconnecting">
            <summary> The client is disconnecting from Kook. </summary>
        </member>
        <member name="T:Kook.ActivityType">
            <summary>
                Specifies the type of activities.
            </summary>
        </member>
        <member name="F:Kook.ActivityType.Game">
            <summary>
                Specifies that the activity is a game.
            </summary>
        </member>
        <member name="F:Kook.ActivityType.Music">
            <summary>
                Specifies that the activity is music.
            </summary>
        </member>
        <member name="T:Kook.GameCreationSource">
            <summary>
                Represents the creation source of a game.
            </summary>
        </member>
        <member name="F:Kook.GameCreationSource.SelfUser">
            <summary>
                Represents that the game was created by the current user.
            </summary>
        </member>
        <member name="F:Kook.GameCreationSource.System">
            <summary>
                Represents that the game was created by the system by default.
            </summary>
        </member>
        <member name="T:Kook.GameProperties">
            <summary>
                Properties that are used to modify an <see cref="T:Kook.IGame" /> with the specified changes.
            </summary>
            <seealso cref="M:Kook.IGame.ModifyAsync(System.Action{Kook.GameProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.GameProperties.Name">
            <summary>
                Gets or sets the name of the game.
            </summary>
        </member>
        <member name="P:Kook.GameProperties.IconUrl">
            <summary>
                Gets or sets the icon URL of the game.
            </summary>
        </member>
        <member name="T:Kook.GameType">
            <summary>
                Specifies the type of games.
            </summary>
        </member>
        <member name="F:Kook.GameType.Game">
            <summary>
                Specifies that the game is just a game.
            </summary>
        </member>
        <member name="F:Kook.GameType.VirtualUploader">
            <summary>
                Specifies that the game is a virtual uploader.
            </summary>
        </member>
        <member name="F:Kook.GameType.Process">
            <summary>
                Specifies that the game is a process.
            </summary>
        </member>
        <member name="T:Kook.IActivity">
            <summary>
                A user's activity status.
            </summary>
        </member>
        <member name="T:Kook.IGame">
            <summary>
                Represents a generic game object.
            </summary>
        </member>
        <member name="P:Kook.IGame.Name">
            <summary>
                Gets the name of the game.
            </summary>
            <returns>
                A string containing the name of the game.
            </returns>
        </member>
        <member name="P:Kook.IGame.GameType">
            <summary>
                Gets the type of the game.
            </summary>
            <returns>
                The type of the game.
            </returns>
        </member>
        <member name="P:Kook.IGame.Options">
            <summary>
                Gets the additional information about the game.
            </summary>
            <returns>
                A string containing the additional information about the game.
            </returns>
        </member>
        <member name="P:Kook.IGame.RequireAdminPrivilege">
            <summary>
                Gets whether the Kook client needs administrator privileges to detect the game.
            </summary>
            <returns>
                <c>true</c> if the Kook client needs administrator privileges to detect the game; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IGame.ProcessNames">
            <summary>
                Gets the process names of the game.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the process names of the game.
            </returns>
        </member>
        <member name="P:Kook.IGame.ProductNames">
            <summary>
                Gets the product names of the game.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the product names of the game.
            </returns>
        </member>
        <member name="P:Kook.IGame.Icon">
            <summary>
                Gets the URL of the game's icon.
            </summary>
            <returns>
                A string representing the URL of the game's icon.
            </returns>
        </member>
        <member name="M:Kook.IGame.ModifyAsync(System.Action{Kook.GameProperties},Kook.RequestOptions)">
            <summary>
                Modifies this game.
            </summary>
            <remarks>
                This method modifies this game with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Kook.GameProperties"/>.
            </remarks>
            <param name="func">A delegate containing the properties to modify the game with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="T:Kook.Music">
            <summary>
                Represents a music activity.
            </summary>
        </member>
        <member name="P:Kook.Music.Provider">
            <summary>
                Gets or sets the music provider.
            </summary>
        </member>
        <member name="P:Kook.Music.Name">
            <summary>
                Gets or sets the music ID.
            </summary>
        </member>
        <member name="P:Kook.Music.Singer">
            <summary>
                Gets or sets the singer.
            </summary>
        </member>
        <member name="T:Kook.MusicProvider">
            <summary>
                Specifies the provider of music.
            </summary>
        </member>
        <member name="F:Kook.MusicProvider.Unspecified">
            <summary>
                Specifies that the music provider is unspecified.
            </summary>
        </member>
        <member name="F:Kook.MusicProvider.NetEaseCloudMusic">
            <summary>
                Specifies that the music provider is NetEase.
            </summary>
        </member>
        <member name="F:Kook.MusicProvider.TencentMusic">
            <summary>
                Specifies that the music provider is Tencent QQ.
            </summary>
        </member>
        <member name="F:Kook.MusicProvider.KuGouMusic">
            <summary>
                Specifies that the music provider is KuGou.
            </summary>
        </member>
        <member name="T:Kook.BadgeStyle">
            <summary>
                Specifies the style of badges.
            </summary>
        </member>
        <member name="F:Kook.BadgeStyle.GuildName">
            <summary>
                The badge contains only the guild name.
            </summary>
        </member>
        <member name="F:Kook.BadgeStyle.OnlineMemberCount">
            <summary>
                The badge contains the number of online members in the guild.
            </summary>
        </member>
        <member name="F:Kook.BadgeStyle.OnlineAndTotalMemberCount">
            <summary>
                The badge contains the number of both online and all members in the guild.
            </summary>
        </member>
        <member name="T:Kook.CacheMode">
            <summary>
                Specifies the cache mode that should be used.
            </summary>
        </member>
        <member name="F:Kook.CacheMode.AllowDownload">
            <summary>
                Allows the object to be downloaded if it does not exist in the current cache.
            </summary>
        </member>
        <member name="F:Kook.CacheMode.CacheOnly">
            <summary>
                Only allows the object to be pulled from the existing cache.
            </summary>
        </member>
        <member name="T:Kook.ChannelType">
            <summary>
                Specifies the type of a guild channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelType.Unspecified">
            <summary>
                Specifies that the type of the channel is unknown.
            </summary>
        </member>
        <member name="F:Kook.ChannelType.Category">
            <summary>
                Specifies that the channel is a guild category channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelType.Text">
            <summary>
                Specifies that the channel is a guild text channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelType.Voice">
            <summary>
                Specifies that the channel is a guild voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelType.DM">
            <summary>
                Specifies that the channel is a direct message channel.
            </summary>
        </member>
        <member name="T:Kook.CreateCategoryChannelProperties">
            <summary>
                Provides properties that are used to create an <see cref="T:Kook.ICategoryChannel"/> with the specified properties.
            </summary>
            <seealso cref="M:Kook.IGuild.CreateCategoryChannelAsync(System.String,System.Action{Kook.CreateCategoryChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="T:Kook.CreateGuildChannelProperties">
            <summary>
                Properties that are used to create an <see cref="T:Kook.IGuildChannel" /> with the specified properties.
            </summary>
        </member>
        <member name="T:Kook.CreateTextChannelProperties">
            <summary>
                Provides properties that are used to create an <see cref="T:Kook.ITextChannel"/> with the specified properties.
            </summary>
            <seealso cref="M:Kook.IGuild.CreateTextChannelAsync(System.String,System.Action{Kook.CreateTextChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.CreateTextChannelProperties.Topic">
            <summary>
                Gets or sets the topic of the channel.
            </summary>
            <remarks>
                Setting this value to any string other than <c>null</c> or <see cref="F:System.String.Empty"/> will set the
                channel topic or description to the desired value.
            </remarks>
        </member>
        <member name="P:Kook.CreateTextChannelProperties.CategoryId">
            <summary>
                Gets or sets the category ID for this channel.
            </summary>
            <remarks>
                Setting this value to a category's identifier will set this channel's parent to the
                specified channel; setting this value to <c>null</c> will leave this channel alone
                from any parents.
            </remarks>
        </member>
        <member name="T:Kook.CreateVoiceChannelProperties">
            <summary>
                Provides properties that are used to create an <see cref="T:Kook.IVoiceChannel"/> with the specified properties.
            </summary>
            <seealso cref="M:Kook.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Kook.CreateVoiceChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.CreateVoiceChannelProperties.VoiceQuality">
            <summary>
                Gets or sets the voice quality that the clients in this voice channel are requested to use.
            </summary>
        </member>
        <member name="P:Kook.CreateVoiceChannelProperties.UserLimit">
            <summary>
                Gets or sets the maximum number of users that can be present in a channel, or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Kook.CreateVoiceChannelProperties.CategoryId">
            <summary>
                Gets or sets the category ID for this channel.
            </summary>
            <remarks>
                Setting this value to a category's identifier will set this channel's parent to the
                specified channel; setting this value to <c>null</c> will leave this channel alone
                from any parents.
            </remarks>
        </member>
        <member name="T:Kook.Direction">
            <summary>
                Specifies the direction of where message(s) should be retrieved from.
            </summary>
            <remarks>
                This enum is used to specify the direction for retrieving messages.
                <note type="important">
                    At the time of writing, <see cref="F:Kook.Direction.Around"/> is not yet implemented into
                    <see cref="M:Kook.IMessageChannel.GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>.
                    Attempting to use the method with <see cref="F:Kook.Direction.Around"/> will throw
                    a <see cref="T:System.NotImplementedException"/>.
                </note>
            </remarks>
        </member>
        <member name="F:Kook.Direction.Unspecified">
            <summary>
                How the message(s) should be retrieved is unspecified.
            </summary>
        </member>
        <member name="F:Kook.Direction.Before">
            <summary>
                The message(s) should be retrieved before a message.
            </summary>
        </member>
        <member name="F:Kook.Direction.Around">
            <summary>
                The message(s) should be retrieved around a message.
            </summary>
        </member>
        <member name="F:Kook.Direction.After">
            <summary>
                The message(s) should be retrieved after a message.
            </summary>
        </member>
        <member name="T:Kook.IAudioChannel">
            <summary>
                Represents a generic audio channel.
            </summary>
        </member>
        <member name="P:Kook.IAudioChannel.IsVoiceRegionOverwritten">
            <summary>
                Gets whether the voice region of this audio channel is overwritten.
            </summary>
        </member>
        <member name="P:Kook.IAudioChannel.VoiceRegion">
            <summary>
                Gets the voice region for this audio channel.
            </summary>
            <remarks>
                <note type="warning">
                    This property may be empty if the voice channel is created before this feature was released.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.IAudioChannel.ServerUrl">
            <summary>
                Gets the server url that clients should connect to to join this voice channel.
            </summary>
            <returns>
                A string representing the url that clients should connect to to join this voice channel.
            </returns>
        </member>
        <member name="T:Kook.ICategoryChannel">
            <summary>
                Represents a generic category channel.
            </summary>
        </member>
        <member name="T:Kook.IChannel">
            <summary>
                Represents a generic channel.
            </summary>
        </member>
        <member name="P:Kook.IChannel.Name">
            <summary>
                Gets the name of this channel.
            </summary>
            <returns>
                A string containing the name of this channel.
            </returns>
        </member>
        <member name="M:Kook.IChannel.GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of users that are able to view the channel or are currently in this channel.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call
                    <see cref="M:Kook.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual messages as a
                    collection.
                </note>
                This method will attempt to fetch all users that is able to view this channel or is currently in this channel.
                The library will attempt to split up the requests according to and <see cref="F:Kook.KookConfig.MaxUsersPerBatch"/>.
                In other words, if there are 3000 users, and the <see cref="F:Kook.KookConfig.MaxUsersPerBatch"/> constant
                is <c>50</c>, the request will be split into 60 individual requests; thus returning 60 individual asynchronous
                responses, hence the need of flattening.
            </remarks>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of users.
            </returns>
        </member>
        <member name="M:Kook.IChannel.GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a user in this channel.
            </summary>
            <param name="id">The identifier of the user (e.g. <c>168693960628371456</c>).</param>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a user object that
                represents the found user; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="T:Kook.IDMChannel">
            <summary>
                Represents a generic direct-message channel.
            </summary>
        </member>
        <member name="P:Kook.IDMChannel.Id">
            <summary>
                Gets the unique identifier of this direct-message channel.
            </summary>
            <returns>
                A <see cref="T:System.Guid"/> that represents this direct-message channel's unique identifier.
            </returns>
        </member>
        <member name="P:Kook.IDMChannel.ChatCode">
            <summary>
                Gets the chat code of the direct-message channel.
            </summary>
            <returns>
                A <see cref="T:System.Guid"/> that represents the chat code of the direct-message channel.
            </returns>
        </member>
        <member name="P:Kook.IDMChannel.Recipient">
            <summary>
                Gets the recipient of all messages in this channel.
            </summary>
            <returns>
                A user object that represents the other user in this channel.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.CloseAsync(Kook.RequestOptions)">
            <summary>
                Closes this private channel, removing it from your channel list.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous close operation.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendTextAsync(System.String,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a text message to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendCardAsync(Kook.ICard,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IDMChannel.SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="T:Kook.IGuildChannel">
            <summary>
                Represents a generic guild channel.
            </summary>
        </member>
        <member name="P:Kook.IGuildChannel.Guild">
            <summary>
                Gets the guild associated with this channel.
            </summary>
            <returns>
                A guild object that this channel belongs to.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.GuildId">
            <summary>
                Gets the guild ID associated with this channel.
            </summary>
            <returns>
                An <c>ulong</c> representing the guild identifier for the guild that this channel
                belongs to.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.Position">
            <summary>
                Gets the position of this channel.
            </summary>
            <returns>
                An <c>int</c> representing the position of this channel in the guild's channel list relative to
                others of the same type.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.Type">
            <summary>
                Gets the type of this channel.
            </summary>
            <returns>
                A <see cref="T:Kook.ChannelType"/> representing the type of this channel.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.CreatorId">
            <summary>
                Gets the identifier of the user who created this channel.
            </summary>
            <returns>
                A <c>ulong</c> representing the identifier of the user who created this channel.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.RolePermissionOverwrites">
            <summary>
                Gets a collection of permission overwrites for roles for this channel.
            </summary>
            <returns>
                A collection of overwrites for roles associated with this channel.
            </returns>
        </member>
        <member name="P:Kook.IGuildChannel.UserPermissionOverwrites">
            <summary>
                Gets a collection of permission overwrites for users for this channel.
            </summary>
            <returns>
                A collection of overwrites for users associated with this channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.ModifyAsync(System.Action{Kook.ModifyGuildChannelProperties},Kook.RequestOptions)">
            <summary>
                Modifies this guild channel.
            </summary>
            <remarks>
                This method modifies the current guild channel with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Kook.ModifyGuildChannelProperties"/>.
            </remarks>
            <param name="func">The delegate containing the properties to modify the channel with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.GetCreatorAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the creator of this channel.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the creator of this channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.GetPermissionOverwrite(Kook.IRole)">
            <summary>
                Gets the permission overwrite for a specific role.
            </summary>
            <param name="role">The role to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted role; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.GetPermissionOverwrite(Kook.IUser)">
            <summary>
                Gets the permission overwrite for a specific user.
            </summary>
            <param name="user">The user to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted user; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.RemovePermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.RemovePermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.AddPermissionOverwriteAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Adds the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the
                channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.AddPermissionOverwriteAsync(Kook.IGuildUser,Kook.RequestOptions)">
            <summary>
                Adds the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.ModifyPermissionOverwriteAsync(Kook.IRole,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <summary>
                Updates the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="func">A delegate containing the values to modify the permission overwrite with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the
                channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.ModifyPermissionOverwriteAsync(Kook.IGuildUser,System.Func{Kook.OverwritePermissions,Kook.OverwritePermissions},Kook.RequestOptions)">
            <summary>
                Updates the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="func">A delegate containing the values to modify the permission overwrite with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of users that are able to view the channel or are currently in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Kook.IChannel.GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of users.
            </returns>
        </member>
        <member name="M:Kook.IGuildChannel.GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a user in this channel.
            </summary>
            <param name="id">The identifier of the user.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous get operation. The task result contains a guild user object that
                represents the user; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="T:Kook.IMessageChannel">
            <summary>
                Represents a channel that can send and receive messages.
            </summary>
        </member>
        <member name="M:Kook.IMessageChannel.SendFileAsync(System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="path">The file path of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="stream">The stream of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.SendFileAsync(Kook.FileAttachment,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a file to this message channel.
            </summary>
            <remarks>
                This method sends a file as if you are uploading a file directly from your Kook client.
            </remarks>
            <param name="attachment">The attachment containing the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.SendTextAsync(System.String,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a text message to this message channel.
            </summary>
            <param name="text">The message to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.SendCardAsync(Kook.ICard,Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <param name="card">The card to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.SendCardsAsync(System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Sends a card message to this message channel.
            </summary>
            <param name="cards">The cards to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="ephemeralUser">The user only who can see the message. Leave null to let everyone see the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the identifier and timestamp of the sent message.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.GetMessageAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <param name="id">The identifier of the message.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <c>null</c> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.GetMessagesAsync(System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call
                    <see cref="M:Kook.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual messages as a
                    collection.
                </note>
                <note type="warning">
                    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual
                    rate limit, causing your bot to freeze!
                </note>
                This method will attempt to fetch the number of messages specified under <paramref name="limit"/>. The
                library will attempt to split up the requests according to your <paramref name="limit"/> and
                <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/>. In other words, should the user request 500 messages,
                and the <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/> constant is <c>100</c>, the request will
                be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need
                of flattening.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from
            cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.GetMessagesAsync(System.Guid,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call
                    <see cref="M:Kook.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual messages as a
                    collection.
                </note>
                <note type="warning">
                    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual
                    rate limit, causing your bot to freeze!
                </note>
                This method will attempt to fetch the number of messages specified under <paramref name="limit"/> around
                the message <paramref name="referenceMessageId"/> depending on the <paramref name="dir"/>. The library will
                attempt to split up the requests according to your <paramref name="limit"/> and
                <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/>. In other words, should the user request 500 messages,
                and the <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/> constant is <c>100</c>, the request will
                be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need
                of flattening.
            </remarks>
            <param name="referenceMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from
            cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.GetMessagesAsync(Kook.IMessage,Kook.Direction,System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call
                    <see cref="M:Kook.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual messages as a
                    collection.
                </note>
                <note type="warning">
                    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual
                    rate limit, causing your bot to freeze!
                </note>
                This method will attempt to fetch the number of messages specified under <paramref name="limit"/> around
                the message <paramref name="referenceMessage"/> depending on the <paramref name="dir"/>. The library will
                attempt to split up the requests according to your <paramref name="limit"/> and
                <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/>. In other words, should the user request 500 messages,
                and the <see cref="F:Kook.KookConfig.MaxMessagesPerBatch"/> constant is <c>100</c>, the request will
                be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need
                of flattening.
            </remarks>
            <param name="referenceMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from
            cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.DeleteMessageAsync(System.Guid,Kook.RequestOptions)">
            <summary>
                Deletes a message.
            </summary>
            <param name="messageId">The identifier of the message that would be removed.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.DeleteMessageAsync(Kook.IMessage,Kook.RequestOptions)">
            <summary> Deletes a message based on the provided message in this channel. </summary>
            <param name="message">The message that would be removed.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation.
            </returns>
        </member>
        <member name="M:Kook.IMessageChannel.ModifyMessageAsync(System.Guid,System.Action{Kook.MessageProperties},Kook.RequestOptions)">
            <summary>
                Modifies a message.
            </summary>
            <remarks>
                This method modifies this message with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Kook.MessageProperties"/>.
            </remarks>
            <param name="messageId">The identifier of the message that would be changed.</param>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="T:Kook.INestedChannel">
            <summary>
                Represents a type of guild channel that can be nested within a category.
            </summary>
        </member>
        <member name="P:Kook.INestedChannel.CategoryId">
            <summary>
                Gets the parent (category) ID of this channel in the guild's channel list.
            </summary>
            <returns>
                A <c>ulong</c> representing the identifier of the parent of this channel;
                <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.INestedChannel.IsPermissionSynced">
            <summary>
                Specifies whether the permissions of this channel is synchronized with its parent channel.
            </summary>
            <returns>
                A <c>bool</c> indicating whether the permissions of this channel is synchronized with its parent channel.
            </returns>
        </member>
        <member name="M:Kook.INestedChannel.SyncPermissionsAsync(Kook.RequestOptions)">
            <summary>
                Syncs the permissions of this nested channel with its parent's.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for syncing channel permissions with its parent's.
            </returns>
        </member>
        <member name="M:Kook.INestedChannel.GetCategoryAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the parent (category) channel of this channel.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the category channel
                representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Kook.INestedChannel.GetInvitesAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of all invites from this guild channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                invite, each representing information for an invite found within this guild.
            </returns>
        </member>
        <member name="M:Kook.INestedChannel.CreateInviteAsync(Kook.InviteMaxAge,Kook.InviteMaxUses,Kook.RequestOptions)">
            <summary>
                Creates a new invite to this channel.
            </summary>
            <param name="maxAge">The time until the invite expires. Set to <c>InviteMaxAge.NeverExpires</c> to never expire.</param>
            <param name="maxUses">The max amount of times this invite may be used. Set to <c>InviteMaxUses.Unlimited</c> to have unlimited uses.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous invite creation operation. The task result contains an invite
                metadata object containing information for the created invite.
            </returns>
        </member>
        <member name="M:Kook.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},Kook.RequestOptions)">
            <summary>
                Creates a new invite to this channel.
            </summary>
            <param name="maxAge">The time (in seconds) until the invite expires. Set to <c>null</c> to never expire.</param>
            <param name="maxUses">The max amount of times this invite may be used. Set to <c>null</c> to have unlimited uses.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous invite creation operation. The task result contains an invite
                metadata object containing information for the created invite.
            </returns>
        </member>
        <member name="T:Kook.IPrivateChannel">
            <summary>
                Represents a generic channel that is private to selected recipients.
            </summary>
        </member>
        <member name="P:Kook.IPrivateChannel.Recipients">
            <summary>
                Gets the users that can access this channel.
            </summary>
            <returns>
                A read-only collection of users that can access this channel.
            </returns>
        </member>
        <member name="T:Kook.ITextChannel">
            <summary>
                Represents a generic channel in a guild that can send and receive messages.
            </summary>
        </member>
        <member name="P:Kook.ITextChannel.Topic">
            <summary>
                Gets the current topic for this text channel.
            </summary>
            <returns>
                A string representing the topic set in the channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.ITextChannel.SlowModeInterval">
            <summary>
                Gets the current slow-mode delay for this channel.
            </summary>
            <returns>
                An int representing the time in seconds required before the user can send another message; 0 if disabled.
            </returns>
        </member>
        <member name="M:Kook.ITextChannel.ModifyAsync(System.Action{Kook.ModifyTextChannelProperties},Kook.RequestOptions)">
            <summary>
                Modifies this text channel.
            </summary>
            <param name="func">The delegate containing the properties to modify the channel with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
            <seealso cref="T:Kook.ModifyTextChannelProperties"/>
        </member>
        <member name="M:Kook.ITextChannel.GetPinnedMessagesAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of pinned messages in this channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation for retrieving pinned messages in this channel.
                The task result contains a collection of messages found in the pinned messages.
            </returns>
        </member>
        <member name="T:Kook.IVoiceChannel">
            <summary>
                Represents a generic voice channel in a guild.
            </summary>
        </member>
        <member name="P:Kook.IVoiceChannel.VoiceQuality">
            <summary>
                Gets the voice quality that the clients in this voice channel are requested to use.
            </summary>
            <returns>
                A <see cref="P:Kook.IVoiceChannel.VoiceQuality"/> representing the voice quality that this voice channel defines and requests the
                client(s) to use.
            </returns>
        </member>
        <member name="P:Kook.IVoiceChannel.UserLimit">
            <summary>
                Gets the max number of users allowed to be connected to this channel at once.
            </summary>
            <returns>
                An int representing the maximum number of users that are allowed to be connected to this
                channel at once; <c>null</c> if a limit is not set.
            </returns>
        </member>
        <member name="P:Kook.IVoiceChannel.HasPassword">
            <summary>
                Gets whether this voice channel is locked by a password.
            </summary>
            <returns>
                A bool representing whether this voice channel is locked by a password.
            </returns>
        </member>
        <member name="M:Kook.IVoiceChannel.ModifyAsync(System.Action{Kook.ModifyVoiceChannelProperties},Kook.RequestOptions)">
            <summary>
                Modifies this voice channel.
            </summary>
            <param name="func">The properties to modify the channel with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
            <seealso cref="T:Kook.ModifyVoiceChannelProperties"/>
        </member>
        <member name="M:Kook.IVoiceChannel.GetConnectedUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the users connected to this voice channel.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of
                <see cref="T:Kook.IGuildUser"/>s that are connected to this voice channel.
            </returns>
        </member>
        <member name="T:Kook.MessageSource">
            <summary>
                Specifies the source of the Kook message.
            </summary>
        </member>
        <member name="F:Kook.MessageSource.System">
            <summary>
                The message is sent by the system.
            </summary>
        </member>
        <member name="F:Kook.MessageSource.User">
            <summary>
                The message is sent by a user.
            </summary>
        </member>
        <member name="F:Kook.MessageSource.Bot">
            <summary>
                The message is sent by a bot.
            </summary>
        </member>
        <member name="T:Kook.ModifyGuildChannelProperties">
            <summary>
                Properties that are used to modify an <see cref="T:Kook.IGuildChannel" /> with the specified properties.
            </summary>
            <seealso cref="M:Kook.IGuildChannel.ModifyAsync(System.Action{Kook.ModifyGuildChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.ModifyGuildChannelProperties.Name">
            <summary>
                Gets or sets the channel to this name to be modified.
            </summary>
            <remarks>
                This property defines the new name for this channel;
                if this is <c>null</c>, the name will not be modified.
            </remarks>
        </member>
        <member name="P:Kook.ModifyGuildChannelProperties.Position">
            <summary>
                Moves the channel to the following position. This property is one-based.
            </summary>
            <remarks>
                If this is <c>null</c>, the position will not be modified.
            </remarks>
        </member>
        <member name="P:Kook.ModifyGuildChannelProperties.CategoryId">
            <summary>
                Gets or sets the category ID for this channel.
            </summary>
            <remarks>
                Setting this value to a category's identifier will change this channel's parent to the
                specified channel; setting this value to <c>0</c> will detach this channel from its parent if one
                is set; if this is <c>null</c>, the parent of this channel will not be modified.
            </remarks>
        </member>
        <member name="T:Kook.ModifyTextChannelProperties">
            <summary>
                Provides properties that are used to modify an <see cref="T:Kook.ITextChannel"/> with the specified properties.
            </summary>
            <seealso cref="M:Kook.ITextChannel.ModifyAsync(System.Action{Kook.ModifyTextChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.ModifyTextChannelProperties.Topic">
            <summary>
                Gets or sets the topic of the channel.
            </summary>
            <remarks>
                Setting this value to any string other than <c>null</c> or <see cref="F:System.String.Empty"/> will set the
                channel topic or description to the desired value.
            </remarks>
        </member>
        <member name="P:Kook.ModifyTextChannelProperties.SlowModeInterval">
            <summary>
                Gets or sets the slow-mode ratelimit in seconds for this channel.
            </summary>
            <remarks>
                Setting this value will require each user to wait before sending another message; setting this value to
                <see cref="F:Kook.SlowModeInterval.None"/> will disable slow-mode for this channel;
                if this value is set to <c>null</c>, the slow-mode interval will not be modified.
                <note>
                    Users with <see cref="F:Kook.ChannelPermission.ManageMessages"/> or 
                    <see cref="F:Kook.ChannelPermission.ManageChannels"/> will be exempt from slow-mode.
                </note>
            </remarks>
        </member>
        <member name="T:Kook.ModifyVoiceChannelProperties">
            <summary>
                Provides properties that are used to modify an <see cref="T:Kook.IVoiceChannel"/> with the specified properties.
            </summary>
            <seealso cref="M:Kook.IVoiceChannel.ModifyAsync(System.Action{Kook.ModifyVoiceChannelProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.ModifyVoiceChannelProperties.VoiceQuality">
            <summary>
                Gets or sets the voice quality that the clients in this voice channel are requested to use;
                <c>null</c> if not set.
            </summary>
            <remarks>
                <note type="warning">
                    This property cannot be set to the quality equivalent or higher than
                    <see cref="F:Kook.VoiceQuality._128kbps"/> via Kook REST API
                    because of the server-side limitation despite of the fact that
                    the voice channel exists in a boosted guild.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.ModifyVoiceChannelProperties.UserLimit">
            <summary>
                Gets or sets the maximum number of users that can be present in a channel, or <c>0</c> if none;
                <c>null</c> if not set.
            </summary>
        </member>
        <member name="P:Kook.ModifyVoiceChannelProperties.Password">
            <summary>
                Gets or sets the password of the channel, or empty string to clear the password; <c>null</c> if not set.
            </summary>
        </member>
        <member name="P:Kook.ModifyVoiceChannelProperties.OverwriteVoiceRegion">
            <summary>
                Gets or sets a value that indicates whether the voice region of the channel is overwritten;
                <c>null</c> if not set.
            </summary>
        </member>
        <member name="P:Kook.ModifyVoiceChannelProperties.VoiceRegion">
            <summary>
                Gets or sets the voice region of the channel; <c>null</c> if not set.
            </summary>
        </member>
        <member name="T:Kook.SlowModeInterval">
            <summary>
                Specifies the slow-mode ratelimit in seconds for an <see cref="T:Kook.ITextChannel"/>.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval.None">
            <summary>
                Slow-mode is disabled.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._5">
            <summary>
                Each user needs to wait for 5 seconds before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._10">
            <summary>
                Each user needs to wait for 10 seconds before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._15">
            <summary>
                Each user needs to wait for 15 seconds before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._30">
            <summary>
                Each user needs to wait for 30 seconds before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._60">
            <summary>
                Each user needs to wait for 1 minute (60 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._120">
            <summary>
                Each user needs to wait for 2 minutes (120 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._300">
            <summary>
                Each user needs to wait for 5 minutes (300 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._600">
            <summary>
                Each user needs to wait for 10 minutes (600 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._900">
            <summary>
                Each user needs to wait for 15 minutes (900 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._1800">
            <summary>
                Each user needs to wait for 30 minutes (1800 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._3600">
            <summary>
                Each user needs to wait for 1 hour (3600 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._7200">
            <summary>
                Each user needs to wait for 2 hours (7200 seconds) before sending another message.
            </summary>
        </member>
        <member name="F:Kook.SlowModeInterval._21600">
            <summary>
                Each user needs to wait for 6 hours (21600 seconds) before sending another message.
            </summary>
        </member>
        <member name="T:Kook.VoiceQuality">
            <summary>
                Specifies the voice quality of an <see cref="T:Kook.IVoiceChannel"/>.
            </summary>
        </member>
        <member name="F:Kook.VoiceQuality._18kbps">
            <summary>
                Equivalent to approximately 18 kbps.
            </summary>
        </member>
        <member name="F:Kook.VoiceQuality._48kbps">
            <summary>
                Equivalent to approximately is 48 kbps.
            </summary>
        </member>
        <member name="F:Kook.VoiceQuality._96kbps">
            <summary>
                Equivalent to approximately is 96 kbps.
            </summary>
        </member>
        <member name="F:Kook.VoiceQuality._128kbps">
            <summary>
                Equivalent to approximately 128 kbps.
            </summary>
            <remarks>
                This quality needs the boost level to reach LV1. 
            </remarks>
        </member>
        <member name="F:Kook.VoiceQuality._192kbps">
            <summary>
                Equivalent to approximately 192 kbps.
            </summary>
            <remarks>
                This quality needs the boost level to reach LV2. 
            </remarks>
        </member>
        <member name="F:Kook.VoiceQuality._256kbps">
            <summary>
                Equivalent to approximately 256 kbps.
            </summary>
            <remarks>
                This quality needs the boost level to reach LV3. 
            </remarks>
        </member>
        <member name="F:Kook.VoiceQuality._320kbps">
            <summary>
                Equivalent to approximately 320 kbps.
            </summary>
            <remarks>
                This quality needs the boost level to reach LV5. 
            </remarks>
        </member>
        <member name="T:Kook.Emoji">
            <summary>
                A Unicode emoji.
            </summary>
        </member>
        <member name="P:Kook.Emoji.Name">
            <inheritdoc />
        </member>
        <member name="P:Kook.Emoji.Id">
            <inheritdoc />
        </member>
        <member name="M:Kook.Emoji.ToString">
            <summary>
                Gets the Unicode representation of this emoji.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Kook.Emoji.Name"/>.
            </returns>
        </member>
        <member name="M:Kook.Emoji.#ctor(System.String)">
            <summary>
                Initializes a new <see cref="T:Kook.Emoji"/> class with the provided Unicode.
            </summary>
            <param name="unicode">The pure UTF-8 encoding of an emoji.</param>
        </member>
        <member name="M:Kook.Emoji.Equals(System.Object)">
            <summary>
                Determines whether the specified emoji is equal to the current one.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
        </member>
        <member name="M:Kook.Emoji.TryParse(System.String,Kook.Emoji@)">
            <summary> Tries to parse an <see cref="T:Kook.Emoji"/> from its raw format. </summary>
            <param name="text">The raw encoding of an emoji. For example: <code>:heart: or ❤</code></param>
            <param name="result">An emoji.</param>
        </member>
        <member name="M:Kook.Emoji.Parse(System.String)">
            <summary> Parse an <see cref="T:Kook.Emoji"/> from its raw format.</summary>
            <param name="emojiStr">The raw encoding of an emoji. For example: <c>:heart: or ❤</c></param>
            <exception cref="T:System.FormatException">String is not emoji or unicode!</exception>
        </member>
        <member name="M:Kook.Emoji.TryParseAsUnicodePoint(System.String,System.String@)">
            <summary>
                Try parsing an <see cref="T:Kook.Emoji"/> from its unicode point format.
                For example: <c>[#128187;]</c> -> <c>💻</c>
            </summary>
        </member>
        <member name="M:Kook.Emoji.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kook.Emoji.op_Implicit(System.String)~Kook.Emoji">
            <summary>
                Parses the given string into an <see cref="T:Kook.Emoji" />.
            </summary>
            <param name="s"> The string to parse. </param>
            <returns> The parsed <see cref="T:Kook.Emoji" />. </returns>
            <exception cref="T:System.FormatException"> The provided string is not emoji name or unicode. </exception>
            <seealso cref="M:Kook.Emoji.Parse(System.String)"/>
        </member>
        <member name="T:Kook.EmojiType">
            <summary>
                Specifies the type of an emoji.
            </summary>
        </member>
        <member name="F:Kook.EmojiType.Static">
            <summary>
                The emoji is static.
            </summary>
        </member>
        <member name="F:Kook.EmojiType.Animated">
            <summary>
                The emoji is animated.
            </summary>
        </member>
        <member name="T:Kook.Emote">
            <summary>
                Represents a guild emote.
            </summary>
        </member>
        <member name="P:Kook.Emote.Id">
            <summary>
                Gets the identifier of this emote.
            </summary>
        </member>
        <member name="P:Kook.Emote.Name">
            <summary>
                Gets the name of this emote.
            </summary>
        </member>
        <member name="P:Kook.Emote.Animated">
            <summary>
                Gets whether this emote is animated.
            </summary>
        </member>
        <member name="M:Kook.Emote.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.Emote.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kook.Emote.Parse(System.String,Kook.TagMode)">
            <summary> Parses an <see cref="T:Kook.Emote"/> from its raw format. </summary>
            <param name="text">
                The raw encoding of an emote; for example,
                [:emotename:1991895624896587/hbCFVWhu923k03k] when <paramref name="tagMode"/> is <c>TagMode.PlainText</c>,
                or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when <paramref name="tagMode"/> is <c>TagMode.KMarkdown</c>.
            </param>
            <param name="tagMode"></param>
            <returns>An emote.</returns>
            <exception cref="T:System.ArgumentException">Invalid emote format.</exception>
        </member>
        <member name="M:Kook.Emote.TryParse(System.String,Kook.Emote@,Kook.TagMode)">
            <summary> Tries to parse an <see cref="T:Kook.Emote"/> from its raw format. </summary>
            <param name="text">
                The raw encoding of an emote; for example,
                [:emotename:1991895624896587/hbCFVWhu923k03k] when <paramref name="tagMode"/> is <c>TagMode.PlainText</c>,
                or (emj)emotename(emj)[1991895624896587/hbCFVWhu923k03k] when <paramref name="tagMode"/> is <c>TagMode.KMarkdown</c>.
            </param>
            <param name="result">An emote.</param>
            <param name="tagMode"></param>
        </member>
        <member name="M:Kook.Emote.ToKMarkdownString">
            <summary>
                Gets a string representation of the emote in KMarkdown format.
            </summary>
        </member>
        <member name="M:Kook.Emote.ToPlainTextString">
            <summary>
                Gets a string representation of the emote in plain text format.
            </summary>
        </member>
        <member name="M:Kook.Emote.ToString">
            <summary>
                Returns the raw representation of the emote.
            </summary>
            <returns>
                A string representing the raw presentation of the emote (e.g. <c>[:thonkang:282745590985523200]</c>).
            </returns>
        </member>
        <member name="T:Kook.GuildEmote">
            <summary>
                An image-based emote that is attached to a guild.
            </summary>
        </member>
        <member name="P:Kook.GuildEmote.GuildId">
            <summary>
                The ID of the guild this emote is attached to.
            </summary>
            <returns>
                A ulong that identifies the guild this emote is attached to.
            </returns>
        </member>
        <member name="P:Kook.GuildEmote.CreatorId">
            <summary>
                Gets the user who created this emote.
            </summary>
            <returns>
                An <see cref="T:System.UInt64"/> representing the user who created this emote;
                <c>null</c> if unknown.
            </returns>
        </member>
        <member name="M:Kook.GuildEmote.ToString">
            <summary>
                Gets the raw representation of the emote.
            </summary>
            <returns>
                A string representing the raw presentation of the emote.
            </returns>
        </member>
        <member name="T:Kook.IEmote">
            <summary>
                Represents a general container for any type of emote in a message.
            </summary>
        </member>
        <member name="P:Kook.IEmote.Name">
            <summary>
                Gets the display name or Unicode representation of this emote.
            </summary>
            <returns>
                A string representing the display name or the Unicode representation (e.g. <c>🤔</c>) of this emote.
            </returns>
        </member>
        <member name="T:Kook.BoostLevel">
            <summary>
                Specifies the boost level of a guild.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.None">
            <summary>
                No boost.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level1">
            <summary>
                Boost level 1.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level2">
            <summary>
                Boost level 2.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level3">
            <summary>
                Boost level 3.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level4">
            <summary>
                Boost level 4.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level5">
            <summary>
                Boost level 5.
            </summary>
        </member>
        <member name="F:Kook.BoostLevel.Level6">
            <summary>
                Boost level 6.
            </summary>
        </member>
        <member name="T:Kook.GuildFeature">
            <summary>
                Represents a feature of a guild.
            </summary>
        </member>
        <member name="F:Kook.GuildFeature.None">
            <summary>
                The guild has no features.
            </summary>
        </member>
        <member name="F:Kook.GuildFeature.Official">
            <summary>
                The guild is an official KOOK guild.
            </summary>
        </member>
        <member name="F:Kook.GuildFeature.Partner">
            <summary>
                The guild is a partner guild.
            </summary>
        </member>
        <member name="F:Kook.GuildFeature.KeyAccount">
            <summary>
                The guild is a key account guild.
            </summary>
        </member>
        <member name="T:Kook.GuildFeatures">
            <summary>
                Represents a collection of features of a guild.
            </summary>
        </member>
        <member name="P:Kook.GuildFeatures.Value">
            <summary>
                Gets the flags of recognized features for this guild.
            </summary>
        </member>
        <member name="P:Kook.GuildFeatures.RawValues">
            <summary>
                Gets a collection of <c>string</c>s representing the raw values of the features.
            </summary>
            <remarks>
                Features that are not contained in <see cref="T:Kook.GuildFeature"/> can be found here.
            </remarks>
        </member>
        <member name="P:Kook.GuildFeatures.IsOfficial">
            <summary>
                Gets whether or not the guild is an official KOOK guild.
            </summary>
        </member>
        <member name="P:Kook.GuildFeatures.IsPartner">
            <summary>
                Gets whether or not the guild is a partner guild.
            </summary>
        </member>
        <member name="P:Kook.GuildFeatures.IsKeyAccount">
            <summary>
                Gets whether or not the guild is a key account guild.
            </summary>
        </member>
        <member name="M:Kook.GuildFeatures.HasFeature(Kook.GuildFeature)">
            <summary>
                Returns whether or not this guild has a feature.
            </summary>
            <param name="feature">The feature(s) to check for.</param>
            <returns><c>true</c> if this guild has the provided feature(s), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kook.GuildFeatures.HasFeature(System.String)">
            <summary>
                Returns whether or not this guild has a feature.
            </summary>
            <param name="feature">The feature to check for.</param>
            <returns><c>true</c> if this guild has the provided feature, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kook.IBan">
            <summary>
                Represents a generic ban object.
            </summary>
        </member>
        <member name="P:Kook.IBan.User">
            <summary>
                Gets the banned user.
            </summary>
            <returns>
                A user that was banned.
            </returns>
        </member>
        <member name="P:Kook.IBan.CreatedAt">
            <summary>
                Gets the time when the ban was issued.
            </summary>
            <returns>
                A DateTime object that represents the time when the ban was issued.
            </returns>
        </member>
        <member name="P:Kook.IBan.Reason">
            <summary>
                Gets the reason why the user is banned if specified.
            </summary>
            <returns>
                A string containing the reason behind the ban; <c>null</c> if none is specified.
            </returns>
        </member>
        <member name="T:Kook.IGuild">
            <summary>
                Represents a generic guild/server.
            </summary>
        </member>
        <member name="P:Kook.IGuild.Name">
            <summary>
                Gets the name of this guild.
            </summary>
            <returns>
                A string containing the name of this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Topic">
            <summary>
                Gets the topic for the guild.
            </summary>
            <returns>
                The description for the guild; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IGuild.OwnerId">
            <summary>
                Gets the ID of the user that owns this guild.
            </summary>
            <returns>
                A <c>ulong</c> representing the identifier of the user that owns this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Icon">
            <summary>
                Gets the URL of this guild's icon.
            </summary>
            <returns>
                A URL pointing to the guild's icon; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Banner">
            <summary>
                Gets the URL of this guild's banner image.
            </summary>
            <returns>
                A URL pointing to the guild's banner image; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IGuild.NotifyType">
            <summary>
                Gets the default notification type for this guild.
            </summary>
            <returns>
                A <see cref="P:Kook.IGuild.NotifyType"/> representing the default notification type for this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Region">
            <summary>
                Gets the default voice region for this guild.
            </summary>
            <returns>
                A string representing the default voice region for this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.IsOpenEnabled">
            <summary>
                Gets whether this guild is public.
            </summary>
            <returns>
                <c>true</c> if this guild is public; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Kook.IGuild.OpenId">
            <summary>
                Gets the open ID for this guild.
            </summary>
            <returns>
                A <c>uint</c> representing the open ID for this guild;
                this property should be <c>null</c> if <see cref="P:Kook.IGuild.IsOpenEnabled"/> is <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IGuild.DefaultChannelId">
            <summary>
                Gets the default channel ID for this guild.
            </summary>
            <returns>
                A <c>ulong</c> representing the default channel ID for this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.WelcomeChannelId">
            <summary>
                Gets the welcome channel ID for this guild.
            </summary>
            <returns>
                A <c>ulong</c> representing the welcome channel ID for this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Available">
            <summary>
                Determines if this guild is currently connected and ready to be used.
            </summary>
            <remarks>
                <note>
                    This property only applies to a WebSocket-based client.
                </note>
                This boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed.
            </remarks>
            <returns>
                <c>true</c> if this guild is currently connected and ready to be used; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IGuild.EveryoneRole">
            <summary>
                Gets the built-in role containing all users in this guild.
            </summary>
            <returns>
                A role object that represents an <c>@everyone</c> role in this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Features">
            <summary>
                Gets the features of this guild.
            </summary>
            <returns>
                An array of string representing the features of this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.BoostSubscriptionCount">
            <summary>
                Gets the number of boost subscribers of this guild.
            </summary>
            <returns>
                The number of boost subscribers of this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.BufferBoostSubscriptionCount">
            <summary>
                Gets the number of boost subscribers who activates buffer of this guild.
            </summary>
            <returns>
                The number of boost subscribers who activates buffer of this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.MaxBitrate">
            <summary>
                Gets the max bitrate for voice channels in this guild.
            </summary>
            <returns>
                A <see cref="T:System.Int32"/> representing the maximum bitrate value allowed by Kook in this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.MaxUploadLimit">
            <summary>
                Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status.
            </summary>
        </member>
        <member name="P:Kook.IGuild.BoostLevel">
            <summary>
                Gets the level of guild boosting in this guild.
            </summary>
            <returns>
                The level of guild boosting in this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.Emotes">
            <summary>
                Gets a collection of all custom emotes for this guild.
            </summary>
            <returns>
                A read-only collection of all custom emotes for this guild.
            </returns>
            <seealso cref="M:Kook.IGuild.GetEmotesAsync(Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.IGuild.Roles">
            <summary>
                Gets a collection of all roles in this guild.
            </summary>
            <returns>
                A read-only collection of roles found within this guild.
            </returns>
        </member>
        <member name="P:Kook.IGuild.RecommendInfo">
            <summary>
                Gets the recommendation information for this guild.
            </summary>
            <returns>
                A recommendation object that represents the recommendation information for this guild;
                <c>null</c> if the guild does not have a recommendation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.LeaveAsync(Kook.RequestOptions)">
            <summary>
                Leaves this guild.
            </summary>
            <remarks>
                This method will make the currently logged-in user leave the guild.
                <note>
                    If the user is the owner of this guild, use <see cref="M:Kook.IDeletable.DeleteAsync(Kook.RequestOptions)"/> instead.
                </note>
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous leave operation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetBoostSubscriptionsAsync(Kook.RequestOptions)">
            <summary>
                Gets all subscriptions for this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous retrieval operation. The task result contains
                a collection of <see cref="T:Kook.BoostSubscriptionMetadata"/>, each representing the subscriptions information.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetActiveBoostSubscriptionsAsync(Kook.RequestOptions)">
            <summary>
                Gets subscriptions which are not expired for this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous retrieval operation. The task result contains
                a collection of <see cref="T:Kook.BoostSubscriptionMetadata"/> which are not expired,
                each representing the subscriptions information.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetBansAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of all users banned in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                ban objects that this guild currently possesses, with each object containing the user banned and reason
                behind the ban.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetBanAsync(Kook.IUser,Kook.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="user">The banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetBanAsync(System.UInt64,Kook.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="userId">The identifier for the banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.AddBanAsync(Kook.IUser,System.Int32,System.String,Kook.RequestOptions)">
            <summary>
                Bans the user from this guild and optionally prunes their recent messages.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="pruneDays">The number of days to remove messages from this user for, and this number must be between [0, 7].</param>
            <param name="reason">The reason of the ban to be written in the audit log.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pruneDays"/> is not between 0 to 7.</exception>
            <returns>
                A task that represents the asynchronous add operation for the ban.
            </returns>
        </member>
        <member name="M:Kook.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Kook.RequestOptions)">
            <summary>
                Bans the user from this guild and optionally prunes their recent messages.
            </summary>
            <param name="userId">The identifier of the user to ban.</param>
            <param name="pruneDays">The number of days to remove messages from this user for, and this number must be between [0, 7].</param>
            <param name="reason">The reason of the ban to be written in the audit log.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pruneDays"/> is not between 0 to 7.</exception>
            <returns>
                A task that represents the asynchronous add operation for the ban.
            </returns>
        </member>
        <member name="M:Kook.IGuild.RemoveBanAsync(Kook.IUser,Kook.RequestOptions)">
            <summary>
                Unbans the user if they are currently banned.
            </summary>
            <param name="user">The user to be unbanned.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation for the ban.
            </returns>
        </member>
        <member name="M:Kook.IGuild.RemoveBanAsync(System.UInt64,Kook.RequestOptions)">
            <summary>
                Unbans the user if they are currently banned.
            </summary>
            <param name="userId">The identifier of the user to be unbanned.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation for the ban.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of all channels in this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                generic channels found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a channel in this guild.
            </summary>
            <param name="id">The identifier for the channel.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the generic channel
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetTextChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of all text channels in this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                message channels found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetTextChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a text channel in this guild.
            </summary>
            <param name="id">The identifier for the text channel.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetVoiceChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of all voice channels in this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice channels found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetVoiceChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a voice channel in this guild.
            </summary>
            <param name="id">The identifier for the voice channel.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the voice channel associated
                with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetCategoryChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of all category channels in this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                category channels found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetDefaultChannelAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the default text channel for this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the default text channel for this guild;
                <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetWelcomeChannelAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the welcome text channel for this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the welcome text channel for this guild;
                <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateTextChannelAsync(System.String,System.Action{Kook.CreateTextChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new text channel in this guild.
            </summary>
            <param name="name">The new name for the text channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                text channel.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Kook.CreateVoiceChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new voice channel in this guild.
            </summary>
            <param name="name">The new name for the voice channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                voice channel.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateCategoryChannelAsync(System.String,System.Action{Kook.CreateCategoryChannelProperties},Kook.RequestOptions)">
            <summary>
                Creates a new channel category in this guild.
            </summary>
            <param name="name">The new name for the category.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                category channel.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetInvitesAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of all invites in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                invite, each representing information for an invite found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateInviteAsync(Kook.InviteMaxAge,Kook.InviteMaxUses,Kook.RequestOptions)">
            <summary>
                Creates a new invite to this channel.
            </summary>
            <param name="maxAge">The time until the invite expires. Set to <c>InviteMaxAge.NeverExpires</c> to never expire.</param>
            <param name="maxUses">The max amount of times this invite may be used. Set to <c>InviteMaxUses.Unlimited</c> to have unlimited uses.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous invite creation operation. The task result contains an invite
                metadata object containing information for the created invite.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},Kook.RequestOptions)">
            <summary>
                Creates a new invite to this channel.
            </summary>
            <param name="maxAge">The time (in seconds) until the invite expires. Set to <c>null</c> to never expire.</param>
            <param name="maxUses">The max amount of times this invite may be used. Set to <c>null</c> to have unlimited uses.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous invite creation operation. The task result contains an invite
                metadata object containing information for the created invite.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetRole(System.UInt32)">
            <summary>
                Gets a role in this guild.
            </summary>
            <param name="id">The identifier for the role.</param>
            <returns>
                A role that is associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateRoleAsync(System.String,Kook.RequestOptions)">
            <summary>
                Creates a new role with the provided name.
            </summary>
            <param name="name">The new name for the role.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created role.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of all users in this guild.
            </summary>
            <remarks>
                This method retrieves all users found within this guild.
            </remarks>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users found within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a user from this guild.
            </summary>
            <remarks>
                This method retrieves a user found within this guild.
                <note>
                    This may return <c>null</c> in the WebSocket implementation due to incomplete user collection in
                    large guilds.
                </note>
            </remarks>
            <param name="id">The identifier of the user.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the guild user
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetCurrentUserAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the current user for this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the currently logged-in
                user within this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetOwnerAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets the owner of this guild.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the owner of this guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.DownloadUsersAsync(Kook.RequestOptions)">
            <summary>
                Downloads all users for this guild if the current list is incomplete.
            </summary>
            <remarks>
                This method downloads all users found within this guild through the Gateway and caches them.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous download operation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.DownloadVoiceStatesAsync(Kook.RequestOptions)">
            <summary>
                Downloads all voice states for this guild.
            </summary>
            <remarks>
                This method downloads all voice states for this guild through the Gateway and caches them.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous download operation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.DownloadBoostSubscriptionsAsync(Kook.RequestOptions)">
            <summary>
                Downloads all boost subscriptions for this guild.
            </summary>
            <remarks>
                This method downloads all boost subscriptions for this guild through the Gateway and caches them.
                To download all boost subscriptions, the current user must has the
                <see cref="F:Kook.GuildPermission.ManageGuild"/> permission.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous download operation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.SearchUsersAsync(System.Action{Kook.SearchGuildMemberProperties},System.Int32,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of users in this guild that the name or nickname contains the
                provided string at <paramref name="func"/>.
            </summary>
            <remarks>
                The <paramref name="limit"/> can not be higher than <see cref="F:Kook.KookConfig.MaxUsersPerBatch"/>.
            </remarks>
            <param name="func">A delegate containing the properties to search users with.</param>
            <param name="limit">The maximum number of users to be gotten.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode" /> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users that matches the properties with the provided <see cref="T:System.Action`1"/> at <paramref name="func"/>.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetEmotesAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of emotes from this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of emotes found within the guild.
            </returns>
        </member>
        <member name="M:Kook.IGuild.GetEmoteAsync(System.String,Kook.RequestOptions)">
            <summary>
                Gets a specific emote from this guild.
            </summary>
            <param name="id">The identifier for the guild emote.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the emote found with the
                specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Kook.IGuild.CreateEmoteAsync(System.String,Kook.Image,Kook.RequestOptions)">
            <summary>
                Creates a new <see cref="T:Kook.GuildEmote"/> in this guild.
            </summary>
            <param name="name">The name of the guild emote.</param>
            <param name="image">The image of the new emote.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the created emote.
            </returns>
        </member>
        <member name="M:Kook.IGuild.ModifyEmoteNameAsync(Kook.GuildEmote,System.String,Kook.RequestOptions)">
            <summary>
                Modifies an existing <see cref="T:Kook.GuildEmote"/> in this guild.
            </summary>
            <param name="emote">The emote to be modified.</param>
            <param name="name"> The new name of the emote.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation. The task result contains the modified
                emote.
            </returns>
        </member>
        <member name="M:Kook.IGuild.DeleteEmoteAsync(Kook.GuildEmote,Kook.RequestOptions)">
            <summary>
                Deletes an existing <see cref="T:Kook.GuildEmote"/> from this guild.
            </summary>
            <param name="emote">The emote to delete.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation.
            </returns>
        </member>
        <member name="M:Kook.IGuild.MoveUsersAsync(System.Collections.Generic.IEnumerable{Kook.IGuildUser},Kook.IVoiceChannel,Kook.RequestOptions)">
            <summary>
            Moves the user to the voice channel.
            </summary>
            <param name="users">The users to move.</param>
            <param name="targetChannel">the channel where the user gets moved to.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>A task that represents the asynchronous operation for moving a user.</returns>
        </member>
        <member name="M:Kook.IGuild.GetBadgeAsync(Kook.BadgeStyle,Kook.RequestOptions)">
            <summary>
                Gets a badge which is associated with this guild.
            </summary>
            <param name="style">The <see cref="T:Kook.BadgeStyle"/> that specifies the style of the badge.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the stream of the badge
                associated with this guild.
            </returns>
        </member>
        <member name="T:Kook.IRecommendInfo">
            <summary>
                Represents a generic recommendation information.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.GuildId">
            <summary>
                Gets the ID of the recommended guild.
            </summary>
            <returns>
                A <c>ulong</c> representing the ID of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.OpenId">
            <summary>
                Gets the open ID for the recommended guild.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.DefaultChannelId">
            <summary>
                Gets the default channel ID of the recommended guild.
            </summary>
            <returns>
                A <c>ulong</c> representing the default channel ID of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Name">
            <summary>
                Gets the name of the recommended guild.
            </summary>
            <returns>
                A <c>string</c> representing the name of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Icon">
            <summary>
                Gets the icon URL of the recommended guild.
            </summary>
            <returns>
                A <c>string</c> representing the icon URL of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Banner">
            <summary>
                Gets the banner URL of the recommended guild.
            </summary>
            <returns>
                A <c>string</c> representing the banner URL of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Description">
            <summary>
                Gets the description of the recommended guild.
            </summary>
            <returns>
                A <c>string</c> representing the description of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Status">
            <summary>
                Gets the status of the recommended guild.
            </summary>
            <returns>
                A <c>int</c> representing the status of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Tag">
            <summary>
                Gets the tag of the recommended guild.
            </summary>
            <returns>
                A <c>string</c> representing the tag of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Features">
            <summary>
                Gets the features of the recommended guild.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.BoostLevel">
            <summary>
                Gets the boost level of the recommended guild.
            </summary>
            <returns>
                A <see cref="P:Kook.IRecommendInfo.BoostLevel"/> representing the boost level of the recommended guild.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.CustomId">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.IsOfficialPartner">
            <summary>
                Gets whether the recommended guild is an official partner.
            </summary>
            <returns>
                A <c>bool</c> representing whether the recommended guild is an official partner.
            </returns>
        </member>
        <member name="P:Kook.IRecommendInfo.Sort">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.AuditStatus">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.IRecommendInfo.DaysBeforeModify">
            <summary>
                Gets the number of days need to be waited before the recommendation information can be modified again.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of days need to be waited before the recommendation information can be modified again.
            </returns>
        </member>
        <member name="T:Kook.NotifyType">
            <summary>
                Specifies that how the guild should notify the user.
            </summary>
        </member>
        <member name="F:Kook.NotifyType.Default">
            <summary>
                Notifies the user as the default behavior of the guild.
            </summary>
        </member>
        <member name="F:Kook.NotifyType.AcceptAll">
            <summary>
                Notifies the user of all messages.
            </summary>
        </member>
        <member name="F:Kook.NotifyType.OnlyMentioned">
            <summary>
                Notifies the user of the messages which mention the user.
            </summary>
        </member>
        <member name="F:Kook.NotifyType.Muted">
            <summary>
                 ]Never notifies the user.
            </summary>
        </member>
        <member name="T:Kook.RoleType">
            <summary>
                Represents the type of a role.
            </summary>
        </member>
        <member name="F:Kook.RoleType.UserCreated">
            <summary>
                Represents the role was created by a user.
            </summary>
        </member>
        <member name="F:Kook.RoleType.BotSpecified">
            <summary>
                Represents the role was created by system when a bot joined the guild.
            </summary>
        </member>
        <member name="F:Kook.RoleType.Booster">
            <summary>
                Represents the role representing a booster.
            </summary>
        </member>
        <member name="F:Kook.RoleType.Everyone">
            <summary>
                Represents tht role is the default everyone role.
            </summary>
        </member>
        <member name="T:Kook.IDeletable">
            <summary>
                Determines whether the object is deletable or not.
            </summary>
        </member>
        <member name="M:Kook.IDeletable.DeleteAsync(Kook.RequestOptions)">
            <summary>
                Deletes this object and all its children.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="T:Kook.IEntity`1">
            <summary>
                Represents a generic entity that has a unique identifier.
            </summary>
            <typeparam name="TId"> The type of the unique identifier. </typeparam>
        </member>
        <member name="P:Kook.IEntity`1.Id">
            <summary>
                Gets the unique identifier for this object.
            </summary>
        </member>
        <member name="T:Kook.Image">
            <summary>
                An image that will be uploaded to Kook.
            </summary>
        </member>
        <member name="P:Kook.Image.Stream">
            <summary>
                Gets the stream to be uploaded to Kook.
            </summary>
        </member>
        <member name="P:Kook.Image.FileExtension">
            <summary>
                Gets the file extension of the image if possible.
            </summary>
        </member>
        <member name="M:Kook.Image.#ctor(System.IO.Stream)">
            <summary>
                Create the image with a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream" /> to create the image with. Note that this must be some type of stream
                with the contents of a file in it.
            </param>
        </member>
        <member name="M:Kook.Image.#ctor(System.String)">
            <summary>
                Create the image from a file path.
            </summary>
            <remarks>
                This file path is NOT validated and is passed directly into a
                <see cref="M:System.IO.File.OpenRead(System.String)"/>.
            </remarks>
            <param name="path">The path to the file.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid
            characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="path"/> is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
        </member>
        <member name="M:Kook.Image.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Kook.IMentionable">
            <summary>
                Determines whether the object is mentionable or not.
            </summary>
        </member>
        <member name="P:Kook.IMentionable.PlainTextMention">
            <summary>
                Returns a special string used to mention this object in plain text formatted text.
            </summary>
            <returns>
                A string that is recognized by Kook as a mention in plain text formatted text.
            </returns>
        </member>
        <member name="P:Kook.IMentionable.KMarkdownMention">
            <summary>
                Returns a special string used to mention this object in KMarkdown formatted text.
            </summary>
            <returns>
                A string that is recognized by Kook as a mention in KMarkdown formatted text.
            </returns>
        </member>
        <member name="T:Kook.IIntimacy">
            <summary>
                Represents a generic intimacy.
            </summary>
        </member>
        <member name="P:Kook.IIntimacy.User">
            <summary>
                Gets the user associated with this intimacy.
            </summary>
            <returns>
                An <see cref="T:Kook.IUser" /> representing the user associated with this intimacy.
            </returns>
        </member>
        <member name="P:Kook.IIntimacy.SocialInfo">
            <summary>
                Gets the social information associated with this intimacy.
            </summary>
            <returns>
                A <c>string</c> representing the social information associated with this intimacy.
            </returns>
        </member>
        <member name="P:Kook.IIntimacy.LastReadAt">
            <summary>
                Gets the time at which the user read the message.
            </summary>
            <returns>
                A time at which the user read the message.
            </returns>
        </member>
        <member name="P:Kook.IIntimacy.LastModifyAt">
            <summary>
                Gets the time at which this intimacy was modified last time.
            </summary>
            <returns>
                A time at which this intimacy was modified last time.
            </returns>
        </member>
        <member name="P:Kook.IIntimacy.Score">
            <summary>
                Gets the score associated with this intimacy.
            </summary>
            <returns>
                A <c>int</c> representing the score associated with this intimacy.
            </returns>
        </member>
        <member name="P:Kook.IIntimacy.Images">
            <summary>
                Gets the images associated with this intimacy.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the images associated with this intimacy.
            </returns>
        </member>
        <member name="M:Kook.IIntimacy.UpdateAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)">
            <summary>
                Updates the intimacy information with this user.
            </summary>
            <param name="func">A delegate containing the properties to modify the <see cref="T:Kook.IIntimacy"/> with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>A task that represents the asynchronous operation for updating the intimacy information.</returns>
        </member>
        <member name="T:Kook.IntimacyImage">
            <summary>
                Represents a single image of an intimacy.
            </summary>
        </member>
        <member name="M:Kook.IntimacyImage.#ctor(System.UInt32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.IntimacyImage" /> class.
            </summary>
            <param name="id">The ID of the image of an intimacy. </param>
            <param name="url">The URL of the image of an intimacy. </param>
        </member>
        <member name="P:Kook.IntimacyImage.Id">
            <summary>
                Gets the ID of the image of an intimacy.
            </summary>
            <returns>
                An <c>int</c> representing the ID of the image of an intimacy.
            </returns>
        </member>
        <member name="P:Kook.IntimacyImage.Url">
            <summary>
                Gets the URL of the image of an intimacy.
            </summary>
            <returns>
                A <c>string</c> representing the URL of the image of an intimacy.
            </returns>
        </member>
        <member name="T:Kook.IntimacyProperties">
            <summary>
                Properties that are used to modify an <see cref="T:Kook.IIntimacy" /> with the specified changes.
            </summary>
            <seealso cref="M:Kook.IIntimacy.UpdateAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.IntimacyProperties.SocialInfo">
            <summary>
                The social information to be set on the <see cref="T:Kook.IIntimacy" />.
            </summary>
        </member>
        <member name="P:Kook.IntimacyProperties.ImageId">
            <summary>
                The ID of the image to be updated on the <see cref="T:Kook.IIntimacy" />.
            </summary>
        </member>
        <member name="P:Kook.IntimacyProperties.Score">
            <summary>
                The score to be set on the <see cref="T:Kook.IIntimacy" />.
            </summary>
        </member>
        <member name="T:Kook.IInvite">
            <summary>
                Represents a generic invite.
            </summary>
        </member>
        <member name="P:Kook.IInvite.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>wEAF5t</c>).
            </returns>
        </member>
        <member name="P:Kook.IInvite.Url">
            <summary>
                Gets the URL used to accept this invite using <see cref="P:Kook.IInvite.Code"/>.
            </summary>
            <returns>
                A string containing the full invite URL (e.g. <c>https://kaihei.co/wEAF5t</c>).
            </returns>
        </member>
        <member name="P:Kook.IInvite.Inviter">
            <summary>
                Gets the user that created this invite.
            </summary>
            <returns>
                A user that created this invite.
            </returns>
        </member>
        <member name="P:Kook.IInvite.Channel">
            <summary>
                Gets the channel this invite is linked to.
            </summary>
            <returns>
                A generic channel that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.ChannelType">
            <summary>
                Gets the type of the channel this invite is linked to.
            </summary>
        </member>
        <member name="P:Kook.IInvite.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A ulong representing the channel identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.ChannelName">
            <summary>
                Gets the name of the channel this invite is linked to.
            </summary>
            <returns>
                A string containing the name of the channel that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.Guild">
            <summary>
                Gets the guild this invite is linked to.
            </summary>
            <returns>
                A guild object representing the guild that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.GuildId">
            <summary>
                Gets the ID of the guild this invite is linked to.
            </summary>
            <returns>
                A ulong representing the guild identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.GuildName">
            <summary>
                Gets the name of the guild this invite is linked to.
            </summary>
            <returns>
                A string containing the name of the guild that the invite points to.
            </returns>
        </member>
        <member name="P:Kook.IInvite.ExpiresAt">
            <summary>
                Gets the time at which this invite will expire.
            </summary>
            <returns>
                A <see cref="T:System.DateTimeOffset"/> representing the time until this invite expires; <c>null</c> if this
                invite never expires.
            </returns>
        </member>
        <member name="P:Kook.IInvite.MaxAge">
            <summary>
                Gets the time span until the invite expires.
            </summary>
            <returns>
                A <see cref="T:System.TimeSpan"/> representing the time span until this invite expires; <c>null</c> if this
                invite never expires.
            </returns>
        </member>
        <member name="P:Kook.IInvite.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An int representing the number of uses this invite may be accepted until it is removed
                from the guild; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IInvite.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
            <returns>
                An int representing the number of times this invite has been used; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IInvite.RemainingUses">
            <summary>
                Gets the number of times this invite still remains.
            </summary>
            <returns>
                An int representing the number of times this invite still remains; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="T:Kook.InviteMaxAge">
            <summary>
                Specifies the time in second after which an <see cref="T:Kook.IInvite"/> will be expired.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge.NeverExpires">
            <summary>
                The invite will never expire.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._1800">
            <summary>
                The invite will expire after half an hour (1800 seconds).
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._3600">
            <summary>
                The invite will expire after one hour (3600 seconds).
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._21600">
            <summary>
                The invite will expire after 6 hours (21600 seconds).
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._43200">
            <summary>
                The invite will expire after half a day (43200 seconds).
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._86400">
            <summary>
                The invite will expire after one day (86400 seconds).
            </summary>
        </member>
        <member name="F:Kook.InviteMaxAge._604800">
            <summary>
                The invite will expire after one week (604800 seconds).
            </summary>
        </member>
        <member name="T:Kook.InviteMaxUses">
            <summary>
                Specifies the number of uses after which an <see cref="T:Kook.IInvite"/> will be expired.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses.Unlimited">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for unlimited times.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._1">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used only once.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._5">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for 5 times.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._10">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for 10 times.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._25">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for 25 times.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._50">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for 50 times.
            </summary>
        </member>
        <member name="F:Kook.InviteMaxUses._100">
            <summary>
                This <see cref="T:Kook.IInvite"/> can be used for 100 times.
            </summary>
        </member>
        <member name="T:Kook.IUpdateable">
            <summary>
                Defines whether the object is updateable or not.
            </summary>
        </member>
        <member name="M:Kook.IUpdateable.UpdateAsync(Kook.RequestOptions)">
            <summary>
                Updates this object's properties with its current state.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous reloading operation.
            </returns>
            <remarks>
                <note type="warning">
                    This method will fetch the latest data from REST API,
                    and replace the current object's properties with the new data.
                </note>
            </remarks>
        </member>
        <member name="T:Kook.AttachmentType">
            <summary>
                Specifies the type of the attachment.
            </summary>
        </member>
        <member name="F:Kook.AttachmentType.File">
            <summary>
                The attachment is a file.
            </summary>
        </member>
        <member name="F:Kook.AttachmentType.Image">
            <summary>
                The attachment is an image.
            </summary>
        </member>
        <member name="F:Kook.AttachmentType.Video">
            <summary>
                The attachment is a video.
            </summary>
        </member>
        <member name="F:Kook.AttachmentType.Audio">
            <summary>
                The attachment is an audio.
            </summary>
        </member>
        <member name="T:Kook.Card">
            <summary>
                Represents a card object seen in an <see cref="T:Kook.IUserMessage"/>.
            </summary>
        </member>
        <member name="P:Kook.Card.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.Card.ModuleCount">
            <inheritdoc />
        </member>
        <member name="P:Kook.Card.Theme">
            <summary>
                Gets the theme of this card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardTheme"/> value that represents the theme of this card.
            </returns>
        </member>
        <member name="P:Kook.Card.Color">
            <summary>
                Gets the color of this embed.
            </summary>
            <returns>
                A <see cref="P:Kook.Card.Color"/> represents a color present on the side of the card, or <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.Card.Size">
            <summary>
                Gets the size of this card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardSize"/> value that represents the size of this card.
            </returns>
        </member>
        <member name="P:Kook.Card.Modules">
            <summary>
                Gets the modules in this card.
            </summary>
            <returns>
                An array of the modules of the card.
            </returns>
        </member>
        <member name="M:Kook.Card.op_Equality(Kook.Card,Kook.Card)">
            <summary>
                Determines whether the specified <see cref="T:Kook.Card"/> is equal to the current <see cref="T:Kook.Card"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.Card"/> is equal to the current <see cref="T:Kook.Card"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.Card.op_Inequality(Kook.Card,Kook.Card)">
            <summary>
                Determines whether the specified <see cref="T:Kook.Card"/> is not equal to the current <see cref="T:Kook.Card"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.Card"/> is not equal to the current <see cref="T:Kook.Card"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.Card.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current <see cref="T:Kook.Card"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.Card"/>, <see cref="M:Kook.Card.Equals(Kook.Card)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.Card"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.Card"/> is equal to the current <see cref="T:Kook.Card"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.Card.Equals(Kook.Card)">
            <summary>Determines whether the specified <see cref="T:Kook.Card"/> is equal to the current <see cref="T:Kook.Card"/>.</summary>
            <param name="card">The <see cref="T:Kook.Card"/> to compare with the current <see cref="T:Kook.Card"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.Card"/> is equal to the current <see cref="T:Kook.Card"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.Card.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.CardBuilder">
            <summary>
                Represents a builder class for creating a <see cref="T:Kook.Card"/>.
            </summary>
        </member>
        <member name="M:Kook.CardBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.CardBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.CardBuilder.#ctor(Kook.CardTheme,System.Nullable{Kook.Color},Kook.CardSize,System.Collections.Generic.List{Kook.IModuleBuilder})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.CardBuilder"/> class with the specified parameters.
            </summary>
            <param name="theme"> The theme of the card.</param>
            <param name="color"> The color displayed along the left side of the card.</param>
            <param name="size"> The size of the card.</param>
            <param name="modules"> The modules in the card.</param>
        </member>
        <member name="P:Kook.CardBuilder.Type">
            <summary>
                Gets the type of the card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardType"/> value that represents the type of the card.
            </returns>
        </member>
        <member name="P:Kook.CardBuilder.Theme">
            <summary>
                Gets or sets the theme of the card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardTheme"/> value that represents the theme of the card.
            </returns>
        </member>
        <member name="P:Kook.CardBuilder.Color">
            <summary>
                Gets or sets the color displayed along the left side of the card.
            </summary>
            <returns>
                A <see cref="P:Kook.CardBuilder.Color"/> value that represents the color displayed along the left side of the card.
            </returns>
        </member>
        <member name="P:Kook.CardBuilder.Size">
            <summary>
                Gets or sets the size of the card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardSize"/> value that represents the size of the card.
            </returns>
        </member>
        <member name="P:Kook.CardBuilder.Modules">
            <summary>
                Gets or sets the modules in the card.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> containing the modules in the card.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.WithTheme(Kook.CardTheme)">
            <summary>
                Sets the theme of the card.
            </summary>
            <param name="theme">
                A <see cref="T:Kook.CardTheme"/> value that represents the theme of the card to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.WithColor(Kook.Color)">
            <summary>
                Sets the color displayed along the left side of the card.
            </summary>
            <param name="color">
                A <see cref="P:Kook.CardBuilder.Color"/> value that represents the color displayed along the left side of the card to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.WithSize(Kook.CardSize)">
            <summary>
                Sets the size of the card.
            </summary>
            <param name="size">
                A <see cref="T:Kook.CardSize"/> value that represents the size of the card to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.AddModule(Kook.IModuleBuilder)">
            <summary>
                Adds a module to the card.
            </summary>
            <param name="module">
                An <see cref="T:Kook.IModuleBuilder"/> that represents the module to be added to the card.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.AddModule``1(System.Action{``0})">
            <summary>
                Adds a module to the card.
            </summary>
            <param name="action">
                The action to adds a module to the card.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.CardBuilder"/> into a <see cref="T:Kook.Card"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.KMarkdownElement"/> represents the built element object.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.Kook#ICardBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.CardBuilder.op_Equality(Kook.CardBuilder,Kook.CardBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CardBuilder"/> is equal to the current <see cref="T:Kook.CardBuilder"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.CardBuilder"/> is equal to the current <see cref="T:Kook.CardBuilder"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.op_Inequality(Kook.CardBuilder,Kook.CardBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CardBuilder"/> is not equal to the current <see cref="T:Kook.CardBuilder"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.CardBuilder"/> is not equal to the current <see cref="T:Kook.CardBuilder"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.CardBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.CardBuilder"/>.
            </summary>
            <param name="obj"> The object to compare with the current <see cref="T:Kook.CardBuilder"/>.</param>
            <returns> <c>true</c> if the specified object is equal to the current <see cref="T:Kook.CardBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CardBuilder.Equals(Kook.CardBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.CardBuilder"/> is equal to the current <see cref="T:Kook.CardBuilder"/>.</summary>
            <param name="cardBuilder">The <see cref="T:Kook.CardBuilder"/> to compare with the current <see cref="T:Kook.CardBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.CardBuilder"/> is equal to the current <see cref="T:Kook.CardBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CardBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.CardSize">
            <summary>
                Specifies the size of a card.
            </summary>
        </member>
        <member name="F:Kook.CardSize.Small">
            <summary>
                The card is a small card.
            </summary>
        </member>
        <member name="F:Kook.CardSize.Large">
            <summary>
                The card is a large card.
            </summary>
        </member>
        <member name="T:Kook.CardTheme">
            <summary>
                Specifies the theme of the card.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Primary">
            <summary>
                The card shows like a regular message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Success">
            <summary>
                The card shows like a success message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Warning">
            <summary>
                The card shows like a warning message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Danger">
            <summary>
                The card shows like an error message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Info">
            <summary>
                The card shows like an info message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.Secondary">
            <summary>
                The card shows like a light message.
            </summary>
        </member>
        <member name="F:Kook.CardTheme.None">
            <summary>
                The card shows like a dark message.
            </summary>
        </member>
        <member name="T:Kook.CardType">
            <summary>
                Specifies the type of the card.
            </summary>
        </member>
        <member name="F:Kook.CardType.Card">
            <summary>
                The card is a normal card.
            </summary>
        </member>
        <member name="T:Kook.ButtonElementBuilder">
            <summary>
                An element builder to build a <see cref="T:Kook.ButtonElement"/>.
            </summary>
        </member>
        <member name="F:Kook.ButtonElementBuilder.MaxButtonTextLength">
            <summary>
                Gets the maximum button text length allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ButtonElementBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ButtonElementBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ButtonElementBuilder.#ctor(System.String,Kook.ButtonTheme,System.String,Kook.ButtonClickEventType)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ButtonElementBuilder"/> class.
            </summary>
            <param name="text"> The text of the button.</param>
            <param name="theme"> The theme of the button.</param>
            <param name="value"> The value of the button.</param>
            <param name="click"> The type of the click event.</param>
        </member>
        <member name="P:Kook.ButtonElementBuilder.Type">
            <summary>
                Gets the type of the element that this builder builds.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that represents the type of element that this builder builds.
            </returns>
        </member>
        <member name="P:Kook.ButtonElementBuilder.Theme">
            <summary>
                Gets or sets the theme of the button.
            </summary>
            <returns>
                A <see cref="T:Kook.ButtonTheme"/> that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.ButtonElementBuilder.Value">
            <summary>
                Gets or sets the value of the button.
            </summary>
            <returns>
                A string that represents the value of the button.
            </returns>
            <remarks>
                If the <see cref="P:Kook.ButtonElementBuilder.Click"/> is set to <see cref="F:Kook.ButtonClickEventType.ReturnValue"/>,
                the value of the property will be returned when the button is clicked.
            </remarks>
        </member>
        <member name="P:Kook.ButtonElementBuilder.Click">
            <summary>
                Gets or sets the type of the click event.
            </summary>
            <returns>
                A <see cref="T:Kook.ButtonClickEventType"/> that represents the type of the click event.
            </returns>
        </member>
        <member name="P:Kook.ButtonElementBuilder.Text">
            <summary>
                Gets or sets the text element of the button.
            </summary>
            <returns>
                An <see cref="T:Kook.IElementBuilder"/> that represents the text of the button.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> is neither a <see cref="T:Kook.PlainTextElementBuilder"/> nor a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </exception>
            <remarks>
                This property only takes a <see cref="T:Kook.PlainTextElementBuilder"/> or a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </remarks>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="value"/> is greater than <see cref="F:Kook.ButtonElementBuilder.MaxButtonTextLength"/>.
            </exception>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithTheme(Kook.ButtonTheme)">
            <summary>
                Sets the theme of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="theme">The theme to be set.</param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithValue(System.String)">
            <summary>
                Sets the value of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="value">The value to be set.</param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithClick(Kook.ButtonClickEventType)">
            <summary>
                Sets the type of the event to be fired when the button is clicked in a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="click">
                The type of the event to be fired when the button is clicked.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithText(Kook.PlainTextElementBuilder)">
            <summary>
                Sets the text of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="text">
                The builder of a <see cref="T:Kook.PlainTextElement"/>, which will be set as the text of the button.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithText(Kook.KMarkdownElementBuilder)">
            <summary>
                Sets the text of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="text">
                The builder of a <see cref="T:Kook.KMarkdownElement"/>, which will be set as the text of the button.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithText``1(System.Action{``0})">
            <summary>
                Sets the text of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="action">
                The action to create a builder of an <see cref="T:Kook.IElementBuilder"/>,
                which will be set as the text of the button.
                The action must return a <see cref="T:Kook.PlainTextElementBuilder"/> or a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.WithText(System.String,System.Boolean)">
            <summary>
                Sets the text of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <param name="text">
                A string to be set as the text of the button.
            </param>
            <param name="isKMarkdown">
                A bool indicating whether the text is in KMarkdown format;
                if <c>true</c>, the text will be set as a <see cref="T:Kook.KMarkdownElement"/>;
                if <c>false</c>, the text will be set as a <see cref="T:Kook.PlainTextElement"/>.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.ButtonElementBuilder"/> into a <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.ButtonElement"/> represents the built element object.
            </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.Kook#IElementBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ButtonElementBuilder.op_Equality(Kook.ButtonElementBuilder,Kook.ButtonElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ButtonElementBuilder"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ButtonElementBuilder"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.op_Inequality(Kook.ButtonElementBuilder,Kook.ButtonElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ButtonElementBuilder"/> is not equal to the current <see cref="T:Kook.ButtonElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ButtonElementBuilder"/> is not equal to the current <see cref="T:Kook.ButtonElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with the current <see cref="T:Kook.ButtonElementBuilder"/>. </param>
            <returns> <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.Equals(Kook.ButtonElementBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ButtonElementBuilder"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>.</summary>
            <param name="buttonElementBuilder">The <see cref="T:Kook.ButtonElementBuilder"/> to compare with the current <see cref="T:Kook.ButtonElementBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ButtonElementBuilder"/> is equal to the current <see cref="T:Kook.ButtonElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ButtonElementBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.IElementBuilder">
            <summary>
                A generic builder for creating an <see cref="T:Kook.IElement"/>.
            </summary>
        </member>
        <member name="P:Kook.IElementBuilder.Type">
            <summary>
                Specifies the type of the element to be created.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that specifies the type of the element to be created.
            </returns>
        </member>
        <member name="M:Kook.IElementBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.IElementBuilder"/> into an <see cref="T:Kook.IElement"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.IElement"/> represents the built element object.
            </returns>
        </member>
        <member name="T:Kook.ImageElementBuilder">
            <summary>
                An element builder to build an <see cref="T:Kook.ImageElement"/>.
            </summary>
        </member>
        <member name="F:Kook.ImageElementBuilder.MaxAlternativeLength">
            <summary>
                Gets the maximum image alternative text length allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ImageElementBuilder.#ctor">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.ImageElementBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ImageElementBuilder.#ctor(System.String,System.String,System.Nullable{Kook.ImageSize},System.Nullable{System.Boolean})">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.ImageElementBuilder"/> class.
            </summary>
            <param name="source"> The source of the image. </param>
            <param name="alternative"> The alternative text of the image. </param>
            <param name="size"> The size of the image. </param>
            <param name="circle"> Whether the image should be rendered as a circle. </param>
        </member>
        <member name="P:Kook.ImageElementBuilder.Type">
            <summary>
                Gets the type of the element that this builder builds.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that represents the type of element that this builder builds.
            </returns>
        </member>
        <member name="P:Kook.ImageElementBuilder.Source">
            <summary>
                Gets or sets the source of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <returns>
                A string that represents the source of the <see cref="T:Kook.ImageElementBuilder"/>.
            </returns>
        </member>
        <member name="P:Kook.ImageElementBuilder.Alternative">
            <summary>
                Gets or sets the alternative text of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="value"/> is greater than <see cref="F:Kook.ImageElementBuilder.MaxAlternativeLength"/>.
            </exception>
            <returns>
                A string that represents the alternative text of the <see cref="T:Kook.ImageElementBuilder"/>.
            </returns>
        </member>
        <member name="P:Kook.ImageElementBuilder.Size">
            <summary>
                Gets or sets the size of the image of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.ImageSize"/> that represents the size of the image of the <see cref="T:Kook.ImageElementBuilder"/>;
                <c>null</c> if the size is not specified.
            </returns>
        </member>
        <member name="P:Kook.ImageElementBuilder.Circle">
            <summary>
                Gets or sets whether the image should be rendered as a circle.
            </summary>
            <returns>
                <c>true</c> if the image should be rendered as a circle; otherwise, <c>false</c>;
                or <c>null</c> if whether the image should be rendered as a circle is not specified.
            </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.WithSource(System.String)">
            <summary>
                Sets the source of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <param name="source">
                The source to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.WithAlternative(System.String)">
            <summary>
                Sets the alternative text of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <param name="alternative">
                The alternative text to be set.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="alternative"/> is greater than <see cref="F:Kook.ImageElementBuilder.MaxAlternativeLength"/>.
            </exception>
        </member>
        <member name="M:Kook.ImageElementBuilder.WithSize(Kook.ImageSize)">
            <summary>
                Sets the size of the image of an <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <param name="size">
                The size to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.WithCircle(System.Boolean)">
            <summary>
                Sets whether the image should be rendered as a circle.
            </summary>
            <param name="circle">
                <c>true</c> if the image should be rendered as a circle; otherwise, <c>false</c>.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.ImageElementBuilder"/> into an <see cref="T:Kook.ImageElement"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.ImageElement"/> represents the built element object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The source url does not include a protocol (either HTTP or HTTPS).
            </exception>
        </member>
        <member name="M:Kook.ImageElementBuilder.op_Implicit(System.String)~Kook.ImageElementBuilder">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.ImageElementBuilder"/> class
                with the specified content.
            </summary>
            <param name="source">
                The content of the <see cref="T:Kook.ImageElement"/>.
            </param>
            <returns>
                An <see cref="T:Kook.ImageElementBuilder"/> object that is initialized with the specified image source.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="source"/> is greater than <see cref="F:Kook.ImageElementBuilder.MaxAlternativeLength"/>.
            </exception>
        </member>
        <member name="M:Kook.ImageElementBuilder.Kook#IElementBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ImageElementBuilder.op_Equality(Kook.ImageElementBuilder,Kook.ImageElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageElementBuilder"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageElementBuilder"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.op_Inequality(Kook.ImageElementBuilder,Kook.ImageElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageElementBuilder"/> is not equal to the current <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageElementBuilder"/> is not equal to the current <see cref="T:Kook.ImageElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with the current <see cref="T:Kook.ImageElementBuilder"/>. </param>
            <returns> <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.Equals(Kook.ImageElementBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageElementBuilder"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>.</summary>
            <param name="imageElementBuilder">The <see cref="T:Kook.ImageElementBuilder"/> to compare with the current <see cref="T:Kook.ImageElementBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageElementBuilder"/> is equal to the current <see cref="T:Kook.ImageElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageElementBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.KMarkdownElementBuilder">
            <summary>
                An element builder to build a <see cref="T:Kook.KMarkdownElement"/>.
            </summary>
        </member>
        <member name="F:Kook.KMarkdownElementBuilder.MaxKMarkdownLength">
            <summary>
                Gets the maximum KMarkdown length allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.KMarkdownElementBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.KMarkdownElementBuilder"/> class.
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Kook.KMarkdownElementBuilder.Type">
            <summary>
                Gets the type of the element that this builder builds.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that represents the type of element that this builder builds.
            </returns>
        </member>
        <member name="P:Kook.KMarkdownElementBuilder.Content">
            <summary>
                Gets or sets the content of a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="value"/> is greater than <see cref="F:Kook.KMarkdownElementBuilder.MaxKMarkdownLength"/>.
            </exception>
            <returns>
                The content of the <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.WithContent(System.String)">
            <summary>
                Sets the content of a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </summary>
            <param name="content">The text to be set as the content.</param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="content"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="content"/> is greater than <see cref="F:Kook.KMarkdownElementBuilder.MaxKMarkdownLength"/>.
            </exception>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.KMarkdownElementBuilder"/> into a <see cref="T:Kook.KMarkdownElement"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.KMarkdownElement"/> represents the built element object.
            </returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.op_Implicit(System.String)~Kook.KMarkdownElementBuilder">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.KMarkdownElementBuilder"/> class
                with the specified content.
            </summary>
            <param name="content">
                The content of the <see cref="T:Kook.KMarkdownElement"/>.
            </param>
            <returns>
                A <see cref="T:Kook.KMarkdownElementBuilder"/> object that is initialized with the specified content.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="content"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="content"/> is greater than <see cref="F:Kook.KMarkdownElementBuilder.MaxKMarkdownLength"/>.
            </exception>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.Kook#IElementBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.op_Equality(Kook.KMarkdownElementBuilder,Kook.KMarkdownElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.op_Inequality(Kook.KMarkdownElementBuilder,Kook.KMarkdownElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is not equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is not equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with the current <see cref="T:Kook.KMarkdownElementBuilder"/>.</param>
            <returns> <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.Equals(Kook.KMarkdownElementBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>.</summary>
            <param name="kMarkdownElementBuilder">The <see cref="T:Kook.KMarkdownElementBuilder"/> to compare with the current <see cref="T:Kook.KMarkdownElementBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.KMarkdownElementBuilder"/> is equal to the current <see cref="T:Kook.KMarkdownElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElementBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ParagraphStructBuilder">
            <summary>
                An element builder to build a <see cref="T:Kook.ParagraphStruct"/>.
            </summary>
        </member>
        <member name="F:Kook.ParagraphStructBuilder.MaxFieldCount">
            <summary>
                Returns the maximum number of fields allowed by Kook.
            </summary>
        </member>
        <member name="F:Kook.ParagraphStructBuilder.MinColumnCount">
            <summary>
                Returns the minimum number of columns allowed by Kook.
            </summary>
        </member>
        <member name="F:Kook.ParagraphStructBuilder.MaxColumnCount">
            <summary>
                Returns the maximum number of columns allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.#ctor">
            <summary>
                Initializes a new <see cref="T:Kook.ParagraphStructBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.#ctor(System.Int32,System.Collections.Generic.List{Kook.IElementBuilder})">
            <summary>
                Initializes a new <see cref="T:Kook.ParagraphStructBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.ParagraphStructBuilder.Type">
            <summary>
                Gets the type of the element that this builder builds.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that represents the type of element that this builder builds.
            </returns>
        </member>
        <member name="P:Kook.ParagraphStructBuilder.ColumnCount">
            <summary>
                Gets or sets the number of columns of the paragraph.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> is less than <see cref="F:Kook.ParagraphStructBuilder.MinColumnCount"/> or greater than <see cref="F:Kook.ParagraphStructBuilder.MaxColumnCount"/>.
            </exception>
            <returns>
                An int that represents the number of columns of the paragraph.
            </returns>
        </member>
        <member name="P:Kook.ParagraphStructBuilder.Fields">
            <summary>
                Gets or sets the fields of the paragraph.
            </summary>
            <exception cref="T:System.ArgumentNullException" accessor="set">
                The <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> contains more than <see cref="F:Kook.ParagraphStructBuilder.MaxFieldCount"/> elements.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> contains an element that is neither a <see cref="T:Kook.PlainTextElementBuilder"/> nor a <see cref="T:Kook.KMarkdownElementBuilder"/>.
            </exception>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> that represents the fields of the paragraph.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.WithColumnCount(System.Int32)">
            <summary>
                Sets the number of columns of the paragraph.
            </summary>
            <param name="count">
                An int that represents the number of columns of the paragraph.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.AddField(Kook.PlainTextElementBuilder)">
            <summary>
                Adds a field to the paragraph.
            </summary>
            <param name="field">
                A <see cref="T:Kook.PlainTextElementBuilder"/> that represents the field to add.
            </param>
            <exception cref="T:System.ArgumentException">
                The addition operation will result in a field count greater than <see cref="F:Kook.ParagraphStructBuilder.MaxFieldCount"/>.
            </exception>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.AddField(Kook.KMarkdownElementBuilder)">
            <summary>
                Adds a field to the paragraph.
            </summary>
            <param name="field">
                A <see cref="T:Kook.KMarkdownElementBuilder"/> that represents the field to add.
            </param>
            <exception cref="T:System.ArgumentException">
                The addition operation will result in a field count greater than <see cref="F:Kook.ParagraphStructBuilder.MaxFieldCount"/>.
            </exception>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.AddField``1(System.Action{``0})">
            <summary>
                Adds a field to the paragraph.
            </summary>
            <param name="action">
                The action to create a builder of a <see cref="T:Kook.KMarkdownElement"/>, which will be added to the paragraph.
            </param>
            <exception cref="T:System.ArgumentException">
                The addition operation will result in a field count greater than <see cref="F:Kook.ParagraphStructBuilder.MaxFieldCount"/>.
            </exception>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.ParagraphStructBuilder"/> into a <see cref="T:Kook.ParagraphStruct"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.ParagraphStruct"/> represents the built element object.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.Kook#IElementBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ParagraphStructBuilder.op_Equality(Kook.ParagraphStructBuilder,Kook.ParagraphStructBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ParagraphStructBuilder"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ParagraphStructBuilder"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.op_Inequality(Kook.ParagraphStructBuilder,Kook.ParagraphStructBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ParagraphStructBuilder"/> is not equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ParagraphStructBuilder"/> is not equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with the current <see cref="T:Kook.ParagraphStructBuilder"/>. </param>
            <returns> <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.Equals(Kook.ParagraphStructBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ParagraphStructBuilder"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>.</summary>
            <param name="paragraphStructBuilder">The <see cref="T:Kook.ParagraphStructBuilder"/> to compare with the current <see cref="T:Kook.ParagraphStructBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ParagraphStructBuilder"/> is equal to the current <see cref="T:Kook.ParagraphStructBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ParagraphStructBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.PlainTextElementBuilder">
            <summary>
                An element builder to build a <see cref="T:Kook.PlainTextElement"/>.
            </summary>
        </member>
        <member name="F:Kook.PlainTextElementBuilder.MaxPlainTextLength">
            <summary>
                Gets the maximum plain text length allowed by Kook.
            </summary>
            <returns>
                An int that represents the maximum plain text length allowed by Kook.
            </returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.PlainTextElementBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.PlainTextElementBuilder"/> class.
            </summary>
            <param name="content"> The content of the <see cref="T:Kook.PlainTextElement"/>.</param>
            <param name="emoji"> A boolean value that indicates whether the shortcuts should be translated into emojis.</param>
        </member>
        <member name="P:Kook.PlainTextElementBuilder.Type">
            <summary>
                Gets the type of the element that this builder builds.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> that represents the type of element that this builder builds.
            </returns>
        </member>
        <member name="P:Kook.PlainTextElementBuilder.Content">
            <summary>
                Gets or sets the content of a <see cref="T:Kook.PlainTextElement"/>.
            </summary>
            <returns>
                The content of the <see cref="T:Kook.PlainTextElement"/>.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="value"/> is greater than <see cref="F:Kook.PlainTextElementBuilder.MaxPlainTextLength"/>.
            </exception>
        </member>
        <member name="P:Kook.PlainTextElementBuilder.Emoji">
            <summary>
                Gets whether the shortcuts should be translated into emojis.
            </summary>
            <returns>
                A boolean value that indicates whether the shortcuts should be translated into emojis.
                <c>true</c> if the shortcuts should be translated into emojis;
                <c>false</c> if the text should be displayed as is.
            </returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.WithContent(System.String)">
            <summary>
                Sets the content of a <see cref="T:Kook.PlainTextElement"/>.
            </summary>
            <param name="content">The text to be set as the content.</param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="content"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="content"/> is greater than <see cref="F:Kook.PlainTextElementBuilder.MaxPlainTextLength"/>.
            </exception>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.WithEmoji(System.Boolean)">
            <summary>
                Sets whether the shortcuts should be translated into emojis.
            </summary>
            <param name="emoji">
                A boolean value that indicates whether the shortcuts should be translated into emojis.
                <c>true</c> if the shortcuts should be translated into emojis;
                <c>false</c> if the text should be displayed as is.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.PlainTextElementBuilder"/> into a <see cref="T:Kook.PlainTextElement"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.PlainTextElement"/> represents the built element object.
            </returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.op_Implicit(System.String)~Kook.PlainTextElementBuilder">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.PlainTextElementBuilder"/> class
                with the specified content.
            </summary>
            <param name="content">
                The content of the <see cref="T:Kook.PlainTextElement"/>.
            </param>
            <returns>
                A <see cref="T:Kook.PlainTextElementBuilder"/> object that is initialized with the specified content.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="content"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="content"/> is greater than <see cref="F:Kook.PlainTextElementBuilder.MaxPlainTextLength"/>.
            </exception>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.Kook#IElementBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.PlainTextElementBuilder.op_Equality(Kook.PlainTextElementBuilder,Kook.PlainTextElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.PlainTextElementBuilder"/> is equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.PlainTextElementBuilder"/> is equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.op_Inequality(Kook.PlainTextElementBuilder,Kook.PlainTextElementBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.PlainTextElementBuilder"/> is not equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.PlainTextElementBuilder"/> is not equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>.
            </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with the current <see cref="T:Kook.PlainTextElementBuilder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.Equals(Kook.PlainTextElementBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.PlainTextElementBuilder"/> is equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>.</summary>
            <param name="plainTextElementBuilder">The <see cref="T:Kook.PlainTextElementBuilder"/> to compare with the current <see cref="T:Kook.PlainTextElementBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.PlainTextElementBuilder"/> is equal to the current <see cref="T:Kook.PlainTextElementBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.PlainTextElementBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ButtonClickEventType">
            <summary>
                Specifies the event type fired when a <see cref="T:Kook.ButtonElement"/> is clicked.
            </summary>
        </member>
        <member name="F:Kook.ButtonClickEventType.None">
            <summary>
                Nothing will happen when the button is clicked.
            </summary>
        </member>
        <member name="F:Kook.ButtonClickEventType.Link">
            <summary>
                The user will be redirected to the specified URL when the button is clicked.
            </summary>
        </member>
        <member name="F:Kook.ButtonClickEventType.ReturnValue">
            <summary>
                The value of the button's <see cref="P:Kook.ButtonElement.Value"/> property will be submitted.
            </summary>
        </member>
        <member name="T:Kook.ButtonElement">
            <summary>
                A button element that can be used in an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="P:Kook.ButtonElement.Type">
            <summary>
                Gets the theme of the button.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.ButtonElement.Theme">
            <summary>
                Gets the theme of the button.
            </summary>
            <returns>
                A <see cref="T:Kook.ButtonTheme"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.ButtonElement.Value">
            <summary>
                Gets the value of the button.
            </summary>
            <returns>
                A string value that represents the value of the button.
            </returns>
        </member>
        <member name="P:Kook.ButtonElement.Click">
            <summary>
                Gets the event type fired when the button is clicked.
            </summary>
            <returns>
                A <see cref="T:Kook.ButtonClickEventType"/> value that represents the event type fired when the button is clicked.
            </returns>
        </member>
        <member name="P:Kook.ButtonElement.Text">
            <summary>
                Gets the text element of the button.
            </summary>
            <returns>
                An <see cref="T:Kook.IElement"/> value that represents the text element of the button.
            </returns>
        </member>
        <member name="M:Kook.ButtonElement.op_Equality(Kook.ButtonElement,Kook.ButtonElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.ButtonElement.op_Inequality(Kook.ButtonElement,Kook.ButtonElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ButtonElement"/> is not equal to the current <see cref="T:Kook.ButtonElement"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.ButtonElement"/> is not equal to the current <see cref="T:Kook.ButtonElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.ButtonElement.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ButtonElement"/>, <see cref="M:Kook.ButtonElement.Equals(Kook.ButtonElement)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ButtonElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ButtonElement.Equals(Kook.ButtonElement)">
            <summary>Determines whether the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>.</summary>
            <param name="buttonElement">The <see cref="T:Kook.ButtonElement"/> to compare with the current <see cref="T:Kook.ButtonElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ButtonElement"/> is equal to the current <see cref="T:Kook.ButtonElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ButtonElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ButtonTheme">
            <summary>
                Specifies the theme of a <see cref="T:Kook.ButtonElement"/>.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Primary">
            <summary>
                The button is a primary button.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Success">
            <summary>
                The button is a success button.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Warning">
            <summary>
                The button is a warning button.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Danger">
            <summary>
                The button is a danger button.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Info">
            <summary>
                The button is an info button.
            </summary>
        </member>
        <member name="F:Kook.ButtonTheme.Secondary">
            <summary>
                The button is a secondary button.
            </summary>
        </member>
        <member name="T:Kook.ElementType">
            <summary>
                Specifies the type of an <see cref="T:Kook.IElement"/>.
            </summary>
        </member>
        <member name="F:Kook.ElementType.PlainText">
            <summary>
                The element is a plain text element.
            </summary>
        </member>
        <member name="F:Kook.ElementType.KMarkdown">
            <summary>
                The element is a KMarkdown element.
            </summary>
        </member>
        <member name="F:Kook.ElementType.Image">
            <summary>
                The element is an image element.
            </summary>
        </member>
        <member name="F:Kook.ElementType.Button">
            <summary>
                The element is a button element.
            </summary>
        </member>
        <member name="F:Kook.ElementType.Paragraph">
            <summary>
                The element is a paragraph struct.
            </summary>
        </member>
        <member name="T:Kook.IElement">
            <summary>
                A generic element used in modules.
            </summary>
        </member>
        <member name="P:Kook.IElement.Type">
            <summary>
                Gets the type of this element.
            </summary>
        </member>
        <member name="T:Kook.ImageElement">
            <summary>
                An image element that can be used in an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="P:Kook.ImageElement.Type">
            <summary>
                Gets the type of the element.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.ImageElement.Source">
            <summary>
                Gets the source of the image.
            </summary>
            <returns>
                A string that represents the source of the image.
            </returns>
        </member>
        <member name="P:Kook.ImageElement.Alternative">
            <summary>
                Gets the alternative text of the image.
            </summary>
            <returns>
                A string that represents the alternative text of the image.
            </returns>
        </member>
        <member name="P:Kook.ImageElement.Size">
            <summary>
                Gets the size of the image.
            </summary>
            <returns>
                An <see cref="T:Kook.ImageSize"/> that represents the size of the image;
                or <c>null</c> if the size is not specified.
            </returns>
        </member>
        <member name="P:Kook.ImageElement.Circle">
            <summary>
                Gets a value indicating whether the image should be rendered as a circle.
            </summary>
            <returns>
                <c>true</c> if the image should be rendered as a circle; otherwise, <c>false</c>;
                or <c>null</c> if whether the image should be rendered as a circle is not specified.
            </returns>
        </member>
        <member name="M:Kook.ImageElement.op_Equality(Kook.ImageElement,Kook.ImageElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageElement.op_Inequality(Kook.ImageElement,Kook.ImageElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageElement"/> is not equal to the current <see cref="T:Kook.ImageElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageElement"/> is not equal to the current <see cref="T:Kook.ImageElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageElement.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ImageElement"/>, <see cref="M:Kook.ImageElement.Equals(Kook.ImageElement)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ImageElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageElement.Equals(Kook.ImageElement)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>.</summary>
            <param name="imageElement">The <see cref="T:Kook.ImageElement"/> to compare with the current <see cref="T:Kook.ImageElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageElement"/> is equal to the current <see cref="T:Kook.ImageElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ImageSize">
            <summary>
                Specifies the size of the image in <see cref="T:Kook.ImageElement"/>.
            </summary>
        </member>
        <member name="F:Kook.ImageSize.Small">
            <summary>
                The image is displayed at small size.
            </summary>
        </member>
        <member name="F:Kook.ImageSize.Large">
            <summary>
                The image is displayed at large size.
            </summary>
        </member>
        <member name="T:Kook.KMarkdownElement">
            <summary>
                A KMarkdown element that can be used in an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="P:Kook.KMarkdownElement.Type">
            <summary>
                Gets the type of the element.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.KMarkdownElement.Content">
            <summary>
                Gets the KMarkdown content of the element.
            </summary>
            <returns>
                A string that represents the KMarkdown content of the element.
            </returns>
        </member>
        <member name="M:Kook.KMarkdownElement.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kook.KMarkdownElement.op_Equality(Kook.KMarkdownElement,Kook.KMarkdownElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.KMarkdownElement.op_Inequality(Kook.KMarkdownElement,Kook.KMarkdownElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.KMarkdownElement"/> is not equal to the current <see cref="T:Kook.KMarkdownElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.KMarkdownElement"/> is not equal to the current <see cref="T:Kook.KMarkdownElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.KMarkdownElement.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.KMarkdownElement"/>, <see cref="M:Kook.KMarkdownElement.Equals(Kook.KMarkdownElement)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.KMarkdownElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElement.Equals(Kook.KMarkdownElement)">
            <summary>Determines whether the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>.</summary>
            <param name="kMarkdownElement">The <see cref="T:Kook.KMarkdownElement"/> to compare with the current <see cref="T:Kook.KMarkdownElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.KMarkdownElement"/> is equal to the current <see cref="T:Kook.KMarkdownElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.KMarkdownElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ParagraphStruct">
            <summary>
                A paragraph struct that can be used in modules.
            </summary>
        </member>
        <member name="P:Kook.ParagraphStruct.Type">
            <summary>
                Gets the type of the element.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.ParagraphStruct.ColumnCount">
            <summary>
                Gets the number of columns in the paragraph.
            </summary>
            <returns>
                An int value that represents the number of columns in the paragraph.
            </returns>
        </member>
        <member name="P:Kook.ParagraphStruct.Fields">
            <summary>
                Gets the fields in the paragraph.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> array that contains the fields in the paragraph.
            </returns>
        </member>
        <member name="M:Kook.ParagraphStruct.op_Equality(Kook.ParagraphStruct,Kook.ParagraphStruct)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ParagraphStruct.op_Inequality(Kook.ParagraphStruct,Kook.ParagraphStruct)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ParagraphStruct"/> is not equal to the current <see cref="T:Kook.ParagraphStruct"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ParagraphStruct"/> is not equal to the current <see cref="T:Kook.ParagraphStruct"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ParagraphStruct.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ParagraphStruct"/>, <see cref="M:Kook.ParagraphStruct.Equals(Kook.ParagraphStruct)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ParagraphStruct"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ParagraphStruct.Equals(Kook.ParagraphStruct)">
            <summary>Determines whether the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>.</summary>
            <param name="paragraphStruct">The <see cref="T:Kook.ParagraphStruct"/> to compare with the current <see cref="T:Kook.ParagraphStruct"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ParagraphStruct"/> is equal to the current <see cref="T:Kook.ParagraphStruct"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ParagraphStruct.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.PlainTextElement">
            <summary>
                A plain text element that can be used in an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="P:Kook.PlainTextElement.Type">
            <summary>
                Gets the type of the element.
            </summary>
            <returns>
                An <see cref="T:Kook.ElementType"/> value that represents the theme of the button.
            </returns>
        </member>
        <member name="P:Kook.PlainTextElement.Content">
            <summary>
                Gets the KMarkdown content of the element.
            </summary>
            <returns>
                A string that represents the KMarkdown content of the element.
            </returns>
        </member>
        <member name="P:Kook.PlainTextElement.Emoji">
            <summary>
                Gets whether the shortcuts should be translated into emojis.
            </summary>
            <returns>
                A boolean value that indicates whether the shortcuts should be translated into emojis.
                <c>true</c> if the shortcuts should be translated into emojis;
                <c>false</c> if the text should be displayed as is.
            </returns>
        </member>
        <member name="M:Kook.PlainTextElement.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kook.PlainTextElement.op_Equality(Kook.PlainTextElement,Kook.PlainTextElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.PlainTextElement.op_Inequality(Kook.PlainTextElement,Kook.PlainTextElement)">
            <summary>
                Determines whether the specified <see cref="T:Kook.PlainTextElement"/> is not equal to the current <see cref="T:Kook.PlainTextElement"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.PlainTextElement"/> is not equal to the current <see cref="T:Kook.PlainTextElement"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.PlainTextElement.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.PlainTextElement"/>, <see cref="M:Kook.PlainTextElement.Equals(Kook.PlainTextElement)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.PlainTextElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.PlainTextElement.Equals(Kook.PlainTextElement)">
            <summary>Determines whether the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>.</summary>
            <param name="plainTextElement">The <see cref="T:Kook.PlainTextElement"/> to compare with the current <see cref="T:Kook.PlainTextElement"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.PlainTextElement"/> is equal to the current <see cref="T:Kook.PlainTextElement"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.PlainTextElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.TextTheme">
            <summary>
                Represents text themes used in <see cref="M:Kook.Format.Colorize(System.String,Kook.TextTheme,System.Boolean)"/>.
            </summary>
            <remarks>
                <note type="warning">
                    The text themes of KMarkdown are currently only supported in card messages.
                    KMarkdown messages theming is not supported yet.
                </note>
                <note type="warning">
                    The color of the text themes vary on different platforms. It is recommended to
                    test your card messages on different platforms to ensure that the text themes
                    are displayed correctly.
                </note>
            </remarks>
        </member>
        <member name="F:Kook.TextTheme.Primary">
            <summary>
                Represents a primary theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Success">
            <summary>
                Represents a success theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Danger">
            <summary>
                Represents a danger theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Warning">
            <summary>
                Represents a warning theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Info">
            <summary>
                Represents an info theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Secondary">
            <summary>
                Represents a secondary theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Body">
            <summary>
                Represents a body theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Tips">
            <summary>
                Represents a tips theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Pink">
            <summary>
                Represents a pink theme.
            </summary>
        </member>
        <member name="F:Kook.TextTheme.Purple">
            <summary>
                Represents a purple theme.
            </summary>
        </member>
        <member name="T:Kook.ICard">
            <summary>
                Represents a generic card.
            </summary>
        </member>
        <member name="P:Kook.ICard.Type">
            <summary>
                Gets the type of the card.
            </summary>
            <returns>
                A <see cref="T:Kook.CardType"/> value that represents the type of the card.
            </returns>
        </member>
        <member name="P:Kook.ICard.ModuleCount">
            <summary>
                Gets the number of the modules in this card.
            </summary>
            <returns>
                An <c>int</c> value that represents how many modules are in this card.
            </returns>
        </member>
        <member name="T:Kook.ICardBuilder">
            <summary>
                Represents a generic card builder for creating a <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.ICardBuilder.Type">
            <summary>
                Gets the type of the <see cref="T:Kook.ICard"/> this builder creates.
            </summary>
        </member>
        <member name="M:Kook.ICardBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.ICardBuilder"/> into an <see cref="T:Kook.ICard"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.ICard"/> represents the built card object.
            </returns>
        </member>
        <member name="T:Kook.ActionGroupModule">
            <summary>
                Represents an action group module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.ActionGroupModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ActionGroupModule.Elements">
            <summary>
                Gets the elements of this module.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> containing the elements of this module.
            </returns>
        </member>
        <member name="M:Kook.ActionGroupModule.op_Equality(Kook.ActionGroupModule,Kook.ActionGroupModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ActionGroupModule.op_Inequality(Kook.ActionGroupModule,Kook.ActionGroupModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ActionGroupModule"/> is not equal to the current <see cref="T:Kook.ActionGroupModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ActionGroupModule"/> is not equal to the current <see cref="T:Kook.ActionGroupModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ActionGroupModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ActionGroupModule"/>, <see cref="M:Kook.ActionGroupModule.Equals(Kook.ActionGroupModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ActionGroupModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ActionGroupModule.Equals(Kook.ActionGroupModule)">
            <summary>Determines whether the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>.</summary>
            <param name="actionGroupModule">The <see cref="T:Kook.ActionGroupModule"/> to compare with the current <see cref="T:Kook.ActionGroupModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ActionGroupModule"/> is equal to the current <see cref="T:Kook.ActionGroupModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ActionGroupModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.AudioModule">
            <summary>
                Represents an audio module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.AudioModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.AudioModule.Source">
            <inheritdoc />
        </member>
        <member name="P:Kook.AudioModule.Title">
            <inheritdoc />
        </member>
        <member name="P:Kook.AudioModule.Cover">
            <summary>
                Gets the cover of the audio associated with this module.
            </summary>
            <returns>
                A <c>string</c> representing the cover of the audio associated with this module.
            </returns>
        </member>
        <member name="M:Kook.AudioModule.op_Equality(Kook.AudioModule,Kook.AudioModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.AudioModule.op_Inequality(Kook.AudioModule,Kook.AudioModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AudioModule"/> is not equal to the current <see cref="T:Kook.AudioModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AudioModule"/> is not equal to the current <see cref="T:Kook.AudioModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.AudioModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.AudioModule"/>, <see cref="M:Kook.AudioModule.Equals(Kook.AudioModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.AudioModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.AudioModule.Equals(Kook.AudioModule)">
            <summary>Determines whether the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>.</summary>
            <param name="audioModule">The <see cref="T:Kook.AudioModule"/> to compare with the current <see cref="T:Kook.AudioModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.AudioModule"/> is equal to the current <see cref="T:Kook.AudioModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.AudioModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ActionGroupModuleBuilder">
            <summary>
                Represents a action group module builder for creating an <see cref="T:Kook.ActionGroupModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ActionGroupModuleBuilder.MaxElementCount">
            <summary>
                Returns the maximum number of elements allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ActionGroupModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.#ctor(System.Collections.Generic.List{Kook.ButtonElementBuilder})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ActionGroupModuleBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.ActionGroupModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ActionGroupModuleBuilder.Elements">
            <summary>
                Gets or sets the button elements of the action group module.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ActionGroupModuleBuilder.MaxElementCount"/>.
            </exception>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> containing the button elements of the action group module.
            </returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.AddElement(Kook.ButtonElementBuilder)">
            <summary>
                Adds a button element to the action group module.
            </summary>
            <param name="field">
                The button element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ActionGroupModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.AddElement(System.Action{Kook.ButtonElementBuilder})">
            <summary>
                Adds a button element to the action group module.
            </summary>
            <param name="action">
                The action to add a button element to the action group module.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ActionGroupModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.Build">
            <summary>
                Builds this builder into an <see cref="T:Kook.ActionGroupModule"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.ActionGroupModule"/> representing the built action group module object.
            </returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.op_Equality(Kook.ActionGroupModuleBuilder,Kook.ActionGroupModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.op_Inequality(Kook.ActionGroupModuleBuilder,Kook.ActionGroupModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is not equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is not equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ActionGroupModuleBuilder"/>, <see cref="M:Kook.ActionGroupModuleBuilder.Equals(Kook.ActionGroupModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.Equals(Kook.ActionGroupModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.</summary>
            <param name="actionGroupModuleBuilder">The <see cref="T:Kook.ActionGroupModuleBuilder"/> to compare with the current <see cref="T:Kook.ActionGroupModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ActionGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ActionGroupModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ActionGroupModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.AudioModuleBuilder">
            <summary>
                Represents a audio module builder for creating an <see cref="T:Kook.AudioModule"/>.
            </summary>
        </member>
        <member name="P:Kook.AudioModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.AudioModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.AudioModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.AudioModuleBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.AudioModuleBuilder"/> class.
            </summary>
            <param name="source"> The source URL of the video. </param>
            <param name="cover"> The cover URL of the video. </param>
            <param name="title"> The title of the video. </param>
        </member>
        <member name="P:Kook.AudioModuleBuilder.Source">
            <summary>
                Gets or sets the source URL of the video.
            </summary>
            <returns>
                The source URL of the video.
            </returns>
        </member>
        <member name="P:Kook.AudioModuleBuilder.Cover">
            <summary>
                Gets or sets the cover URL of the video.
            </summary>
            <returns>
                The cover URL of the video.
            </returns>
        </member>
        <member name="P:Kook.AudioModuleBuilder.Title">
            <summary>
                Gets or sets the title of the video.
            </summary>
            <returns>
                The title of the video.
            </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.WithSource(System.String)">
            <summary>
                Sets the source URL of the video.
            </summary>
            <param name="source">
                The source URL of the video to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.WithCover(System.String)">
            <summary>
                Sets the cover URL of the video.
            </summary>
            <param name="cover">
                The cover URL of the video to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.WithTitle(System.String)">
            <summary>
                Sets the title of the video.
            </summary>
            <param name="title">
                The title of the video to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.Build">
            <summary>
                Builds this builder into an <see cref="T:Kook.AudioModule"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.AudioModule"/> representing the built audio module object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Kook.AudioModuleBuilder.Source"/> does not include a protocol (neither HTTP nor HTTPS)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Kook.AudioModuleBuilder.Cover"/> does not include a protocol (neither HTTP nor HTTPS)
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Kook.AudioModuleBuilder.Source"/> cannot be null or empty
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Kook.AudioModuleBuilder.Cover"/> cannot be null or empty
            </exception>
        </member>
        <member name="M:Kook.AudioModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.AudioModuleBuilder.op_Equality(Kook.AudioModuleBuilder,Kook.AudioModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.op_Inequality(Kook.AudioModuleBuilder,Kook.AudioModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AudioModuleBuilder"/> is not equal to the current <see cref="T:Kook.AudioModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AudioModuleBuilder"/> is not equal to the current <see cref="T:Kook.AudioModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.AudioModuleBuilder"/>, <see cref="M:Kook.AudioModuleBuilder.Equals(Kook.AudioModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.AudioModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.Equals(Kook.AudioModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>.</summary>
            <param name="audioModuleBuilder">The <see cref="T:Kook.AudioModuleBuilder"/> to compare with the current <see cref="T:Kook.AudioModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.AudioModuleBuilder"/> is equal to the current <see cref="T:Kook.AudioModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.AudioModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ContainerModuleBuilder">
            <summary>
                Represents a container module builder for creating a <see cref="T:Kook.ContainerModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ContainerModuleBuilder.MaxElementCount">
            <summary>
                Returns the maximum number of elements allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ContainerModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.#ctor(System.Collections.Generic.List{Kook.ImageElementBuilder})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ContainerModuleBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.ContainerModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ContainerModuleBuilder.Elements">
            <summary>
                Gets or sets the image elements in the container module.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The number of <paramref name="value"/> is greater than <see cref="F:Kook.ContainerModuleBuilder.MaxElementCount"/>.
            </exception>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> containing the image elements in this image container module.
            </returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.AddElement(Kook.ImageElementBuilder)">
            <summary>
                Adds an image element to the container module.
            </summary>
            <param name="field">
                The image element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContainerModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.AddElement(System.Action{Kook.ImageElementBuilder})">
            <summary>
                Adds an image element to the container module.
            </summary>
            <param name="action">
                The action to add an image element to the container module.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContainerModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.ContainerModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.ContainerModule"/> representing the built container module object.
            </returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ContainerModuleBuilder.op_Equality(Kook.ContainerModuleBuilder,Kook.ContainerModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.op_Inequality(Kook.ContainerModuleBuilder,Kook.ContainerModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContainerModuleBuilder"/> is not equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContainerModuleBuilder"/> is not equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ContainerModuleBuilder"/>, <see cref="M:Kook.ContainerModuleBuilder.Equals(Kook.ContainerModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ContainerModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.Equals(Kook.ContainerModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>.</summary>
            <param name="containerModuleBuilder">The <see cref="T:Kook.ContainerModuleBuilder"/> to compare with the current <see cref="T:Kook.ContainerModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContainerModuleBuilder"/> is equal to the current <see cref="T:Kook.ContainerModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContainerModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ContextModuleBuilder">
            <summary>
                Represents a context module builder for creating a <see cref="T:Kook.ContextModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ContextModuleBuilder.MaxElementCount">
            <summary>
                Returns the maximum number of elements allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ContextModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ContextModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ContextModuleBuilder.#ctor(System.Collections.Generic.List{Kook.IElementBuilder})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ContextModuleBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.ContextModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ContextModuleBuilder.Elements">
            <summary>
                Gets or sets the elements of the context module.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContextModuleBuilder.MaxElementCount"/>.
            </exception>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> contains disallowed type of element builder. Allowed element builders are
                <see cref="T:Kook.PlainTextElementBuilder"/>, <see cref="T:Kook.KMarkdownElementBuilder"/>, and <see cref="T:Kook.ImageElementBuilder"/>.
            </exception>
        </member>
        <member name="M:Kook.ContextModuleBuilder.AddElement(Kook.PlainTextElementBuilder)">
            <summary>
                Adds a PlainText element to the context module.
            </summary>
            <param name="field">
                The PlainText element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContextModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContextModuleBuilder.AddElement(Kook.KMarkdownElementBuilder)">
            <summary>
                Adds a KMarkdown element to the context module.
            </summary>
            <param name="field">
                The KMarkdown element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContextModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContextModuleBuilder.AddElement(Kook.ImageElementBuilder)">
            <summary>
                Adds an image element to the context module.
            </summary>
            <param name="field">
                The image element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContextModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContextModuleBuilder.AddElement``1(System.Action{``0})">
            <summary>
                Adds an element to the context module.
            </summary>
            <param name="action">
                The action to add an element to the context module.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ContextModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ContextModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.ContextModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.ContextModule"/> representing the built context module object.
            </returns>
        </member>
        <member name="M:Kook.ContextModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ContextModuleBuilder.op_Equality(Kook.ContextModuleBuilder,Kook.ContextModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContextModuleBuilder.op_Inequality(Kook.ContextModuleBuilder,Kook.ContextModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContextModuleBuilder"/> is not equal to the current <see cref="T:Kook.ContextModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContextModuleBuilder"/> is not equal to the current <see cref="T:Kook.ContextModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContextModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ContextModuleBuilder"/>, <see cref="M:Kook.ContextModuleBuilder.Equals(Kook.ContextModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ContextModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContextModuleBuilder.Equals(Kook.ContextModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>.</summary>
            <param name="contextModuleBuilder">The <see cref="T:Kook.ContextModuleBuilder"/> to compare with the current <see cref="T:Kook.ContextModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContextModuleBuilder"/> is equal to the current <see cref="T:Kook.ContextModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContextModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.CountdownModuleBuilder">
            <summary>
                Represents a countdown module builder for creating a <see cref="T:Kook.CountdownModule"/>.
            </summary>
        </member>
        <member name="P:Kook.CountdownModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.CountdownModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.CountdownModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.#ctor(Kook.CountdownMode,System.DateTimeOffset,System.Nullable{System.DateTimeOffset})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.CountdownModuleBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.CountdownModuleBuilder.EndTime">
            <summary>
             Gets or sets the ending time of the countdown.
            </summary>
            <returns>
                The time at which the countdown ends.
            </returns>
        </member>
        <member name="P:Kook.CountdownModuleBuilder.StartTime">
            <summary>
                Gets or sets the beginning time of the countdown.
            </summary>
            <returns>
                The time at which the countdown begins.
            </returns>
        </member>
        <member name="P:Kook.CountdownModuleBuilder.Mode">
            <summary>
                Gets or sets how the countdown should be displayed.
            </summary>
            <returns>
                A <see cref="T:Kook.CountdownMode"/> representing how the countdown should be displayed.
            </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.WithMode(Kook.CountdownMode)">
            <summary>
                Sets how the countdown should be displayed.
            </summary>
            <param name="mode">
                A <see cref="T:Kook.CountdownMode"/> representing how the countdown should be displayed.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.WithEndTime(System.DateTimeOffset)">
            <summary>
                Sets the beginning time of the countdown.
            </summary>
            <param name="endTime">
                The time at which the countdown ends.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.WithStartTime(System.DateTimeOffset)">
            <summary>
                Sets the beginning time of the countdown.
            </summary>
            <param name="startTime">
                The time at which the countdown begins.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.CountdownModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.CountdownModule"/> representing the built countdown module object.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:Kook.CountdownModuleBuilder.EndTime"/> is before the current time.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:Kook.CountdownModuleBuilder.StartTime"/> is before the Unix epoch.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:Kook.CountdownModuleBuilder.EndTime"/> is equal or before <see cref="P:Kook.CountdownModuleBuilder.StartTime"/>
            </exception>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.CountdownModuleBuilder.op_Equality(Kook.CountdownModuleBuilder,Kook.CountdownModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.op_Inequality(Kook.CountdownModuleBuilder,Kook.CountdownModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CountdownModuleBuilder"/> is not equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.CountdownModuleBuilder"/> is not equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.CountdownModuleBuilder"/>, <see cref="M:Kook.CountdownModuleBuilder.Equals(Kook.CountdownModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.CountdownModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.Equals(Kook.CountdownModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>.</summary>
            <param name="countdownModuleBuilder">The <see cref="T:Kook.CountdownModuleBuilder"/> to compare with the current <see cref="T:Kook.CountdownModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.CountdownModuleBuilder"/> is equal to the current <see cref="T:Kook.CountdownModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CountdownModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.DividerModuleBuilder">
            <summary>
                Represents a divider module builder for creating a <see cref="T:Kook.DividerModule"/>.
            </summary>
        </member>
        <member name="P:Kook.DividerModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.DividerModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.DividerModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.DividerModule"/> representing the built divider module object.
            </returns>
        </member>
        <member name="M:Kook.DividerModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.DividerModuleBuilder.op_Equality(Kook.DividerModuleBuilder,Kook.DividerModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.DividerModuleBuilder.op_Inequality(Kook.DividerModuleBuilder,Kook.DividerModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.DividerModuleBuilder"/> is not equal to the current <see cref="T:Kook.DividerModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.DividerModuleBuilder"/> is not equal to the current <see cref="T:Kook.DividerModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.DividerModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.DividerModuleBuilder"/>, <see cref="M:Kook.DividerModuleBuilder.Equals(Kook.DividerModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.DividerModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.DividerModuleBuilder.Equals(Kook.DividerModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>.</summary>
            <param name="dividerModuleBuilder">The <see cref="T:Kook.DividerModuleBuilder"/> to compare with the current <see cref="T:Kook.DividerModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.DividerModuleBuilder"/> is equal to the current <see cref="T:Kook.DividerModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.DividerModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.FileModuleBuilder">
            <summary>
                Represents a file module builder for creating a <see cref="T:Kook.FileModule"/>.
            </summary>
        </member>
        <member name="P:Kook.FileModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.FileModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.FileModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.FileModuleBuilder.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.FileModuleBuilder"/> class.
            </summary>
            <param name="source"> The source URL of the file. </param>
            <param name="title"> The title of the file. </param>
        </member>
        <member name="P:Kook.FileModuleBuilder.Source">
            <summary>
                Gets or sets the source URL of the file.
            </summary>
            <returns>
                The source URL of the file.
            </returns>
        </member>
        <member name="P:Kook.FileModuleBuilder.Title">
            <summary>
                Gets or sets the title of the file.
            </summary>
            <returns>
                The title of the file.
            </returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.WithSource(System.String)">
            <summary>
                Sets the source URL of the file.
            </summary>
            <param name="source">
                The source URL of the file to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.WithTitle(System.String)">
            <summary>
                Sets the title of the file.
            </summary>
            <param name="title">
                The title of the file to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.FileModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.FileModule"/> representing the built file module object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Kook.FileModuleBuilder.Source"/> does not include a protocol (neither HTTP nor HTTPS)
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Kook.FileModuleBuilder.Source"/> cannot be null or empty
            </exception>
        </member>
        <member name="M:Kook.FileModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.FileModuleBuilder.op_Equality(Kook.FileModuleBuilder,Kook.FileModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.op_Inequality(Kook.FileModuleBuilder,Kook.FileModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.FileModuleBuilder"/> is not equal to the current <see cref="T:Kook.FileModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.FileModuleBuilder"/> is not equal to the current <see cref="T:Kook.FileModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.FileModuleBuilder"/>, <see cref="M:Kook.FileModuleBuilder.Equals(Kook.FileModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.FileModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.Equals(Kook.FileModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>.</summary>
            <param name="fileModuleBuilder">The <see cref="T:Kook.FileModuleBuilder"/> to compare with the current <see cref="T:Kook.FileModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.FileModuleBuilder"/> is equal to the current <see cref="T:Kook.FileModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.FileModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.HeaderModuleBuilder">
            <summary>
                Represents a header module builder for creating a <see cref="T:Kook.HeaderModule"/>.
            </summary>
        </member>
        <member name="F:Kook.HeaderModuleBuilder.MaxTitleContentLength">
            <summary>
                Gets the maximum content length for header allowed by Kook.
            </summary>
        </member>
        <member name="P:Kook.HeaderModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.HeaderModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.HeaderModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.#ctor(Kook.PlainTextElementBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.HeaderModuleBuilder"/> class.
            </summary>
            <param name="text"> The text to be set for the header. </param>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.HeaderModuleBuilder"/> class.
            </summary>
            <param name="text"> The text to be set for the header. </param>
        </member>
        <member name="P:Kook.HeaderModuleBuilder.Text">
            <summary>
                Gets or sets the text of the header.
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="value"/> is greater than <see cref="F:Kook.HeaderModuleBuilder.MaxTitleContentLength"/>.",
            </exception>
            <returns>
                A <see cref="T:Kook.PlainTextElementBuilder"/> representing the text of the header.
            </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.WithText(Kook.PlainTextElementBuilder)">
            <summary>
                Sets the text of the header.
            </summary>
            <param name="text">
                The text to be set for the header.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="text"/> is greater than <see cref="F:Kook.HeaderModuleBuilder.MaxTitleContentLength"/>.",
            </exception>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.WithText(System.String)">
            <summary>
                Sets the text of the header.
            </summary>
            <param name="text"> The text to be set for the header. </param>
            <returns> The current builder. </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of <paramref name="text"/> is greater than <see cref="F:Kook.HeaderModuleBuilder.MaxTitleContentLength"/>.",
            </exception>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.WithText(System.Action{Kook.PlainTextElementBuilder})">
            <summary>
                Sets the text of the header.
            </summary>
            <param name="action">
                The action to set the text of the header.
            </param>
            <exception cref="T:System.ArgumentException" accessor="set">
                The length of result of <paramref name="action"/> is greater than <see cref="F:Kook.HeaderModuleBuilder.MaxTitleContentLength"/>.",
            </exception>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.HeaderModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.HeaderModule"/> representing the built header module object.
            </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.op_Implicit(System.String)~Kook.HeaderModuleBuilder">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.HeaderModuleBuilder"/> class
                with the specified <paramref name="text"/>.
            </summary>
            <param name="text">
                The text to be set for the header.
            </param>
            <returns>
                An <see cref="T:Kook.HeaderModuleBuilder"/> object that is initialized with the specified <paramref name="text"/>.
            </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.HeaderModuleBuilder.op_Equality(Kook.HeaderModuleBuilder,Kook.HeaderModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.op_Inequality(Kook.HeaderModuleBuilder,Kook.HeaderModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.HeaderModuleBuilder"/> is not equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.HeaderModuleBuilder"/> is not equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.HeaderModuleBuilder"/>, <see cref="M:Kook.HeaderModuleBuilder.Equals(Kook.HeaderModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.HeaderModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.Equals(Kook.HeaderModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>.</summary>
            <param name="headerModuleBuilder">The <see cref="T:Kook.HeaderModuleBuilder"/> to compare with the current <see cref="T:Kook.HeaderModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.HeaderModuleBuilder"/> is equal to the current <see cref="T:Kook.HeaderModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.HeaderModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ImageGroupModuleBuilder">
            <summary>
                Representing an image group module builder for create an <see cref="T:Kook.ImageGroupModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ImageGroupModuleBuilder.MaxElementCount">
            <summary>
                Returns the maximum number of elements allowed by Kook.
            </summary>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ImageGroupModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.#ctor(System.Collections.Generic.List{Kook.ImageElementBuilder})">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.ImageGroupModuleBuilder"/> class.
            </summary>
        </member>
        <member name="P:Kook.ImageGroupModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ImageGroupModuleBuilder.Elements">
            <summary>
                Gets or sets the elements of the image group.
            </summary>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ImageGroupModuleBuilder.MaxElementCount"/>.
            </exception>
            <returns>
                An <see cref="T:Kook.ImageElementBuilder"/> containing the elements of the image group.
            </returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.AddElement(Kook.ImageElementBuilder)">
            <summary>
                Adds an image element to the image group.
            </summary>
            <param name="field">
                The image element to add.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ImageGroupModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.AddElement(System.Action{Kook.ImageElementBuilder})">
            <summary>
                Adds an image element to the image group.
            </summary>
            <param name="action">
                The action to add an image element to the image group.
            </param>
            <returns>
                The current builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                The addition operation would cause the number of elements to exceed <see cref="F:Kook.ImageGroupModuleBuilder.MaxElementCount"/>.
            </exception>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.Build">
            <summary>
                Builds this builder into an <see cref="T:Kook.ImageGroupModule"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.ImageGroupModule"/> representing the built image group module object.
            </returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.op_Equality(Kook.ImageGroupModuleBuilder,Kook.ImageGroupModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.op_Inequality(Kook.ImageGroupModuleBuilder,Kook.ImageGroupModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is not equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is not equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ImageGroupModuleBuilder"/>, <see cref="M:Kook.ImageGroupModuleBuilder.Equals(Kook.ImageGroupModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.Equals(Kook.ImageGroupModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.</summary>
            <param name="imageGroupModuleBuilder">The <see cref="T:Kook.ImageGroupModuleBuilder"/> to compare with the current <see cref="T:Kook.ImageGroupModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageGroupModuleBuilder"/> is equal to the current <see cref="T:Kook.ImageGroupModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageGroupModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.IModuleBuilder">
            <summary>
                A generic module builder for creating an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="P:Kook.IModuleBuilder.Type">
            <summary>
                Specifies the module type of the <see cref="T:Kook.IModule"/> this builder creates.
            </summary>
            <returns>
                A <see cref="T:Kook.ModuleType"/> representing the module type of the <see cref="T:Kook.IModule"/> this builder creates.
            </returns>
        </member>
        <member name="M:Kook.IModuleBuilder.Build">
            <summary>
                Builds the <see cref="T:Kook.IModuleBuilder"/> into an <see cref="T:Kook.IModule"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.IModule"/> representing the built module object.
            </returns>
        </member>
        <member name="T:Kook.InviteModuleBuilder">
            <summary>
                Represents a invite module builder for creating an <see cref="T:Kook.InviteModule"/>.
            </summary>
        </member>
        <member name="P:Kook.InviteModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.InviteModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.InviteModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.InviteModuleBuilder.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.InviteModuleBuilder"/> class.
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:Kook.InviteModuleBuilder.Code">
            <summary>
                Gets or sets the code of the invite.
            </summary>
            <returns>
                A <c>string</c> representing the code of the invite.
            </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.WithCode(System.String)">
            <summary>
                Sets the code of the invite.
            </summary>
            <param name="code">
                The code of the invite to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.Build">
            <summary>
                Builds this builder into an <see cref="T:Kook.InviteModule"/>.
            </summary>
            <returns>
                An <see cref="T:Kook.InviteModule"/> representing the built invite module object.
            </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.op_Implicit(System.String)~Kook.InviteModuleBuilder">
            <summary>
                Initialized a new instance of the <see cref="T:Kook.InviteModuleBuilder"/> class
                with the specified <paramref name="code"/>.
            </summary>
            <param name="code">
                The code representing the invite.
            </param>
            <returns>
                An <see cref="T:Kook.InviteModuleBuilder"/> object that is initialized with the specified <paramref name="code"/>.
            </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.InviteModuleBuilder.op_Equality(Kook.InviteModuleBuilder,Kook.InviteModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.op_Inequality(Kook.InviteModuleBuilder,Kook.InviteModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.InviteModuleBuilder"/> is not equal to the current <see cref="T:Kook.InviteModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.InviteModuleBuilder"/> is not equal to the current <see cref="T:Kook.InviteModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.InviteModuleBuilder"/>, <see cref="M:Kook.InviteModuleBuilder.Equals(Kook.InviteModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.InviteModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.Equals(Kook.InviteModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>.</summary>
            <param name="inviteModuleBuilder">The <see cref="T:Kook.InviteModuleBuilder"/> to compare with the current <see cref="T:Kook.InviteModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.InviteModuleBuilder"/> is equal to the current <see cref="T:Kook.InviteModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.InviteModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.SectionModuleBuilder">
            <summary>
                Represents a section module builder for creating a <see cref="T:Kook.SectionModule"/>.
            </summary>
        </member>
        <member name="P:Kook.SectionModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.SectionModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.SectionModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.SectionModuleBuilder.#ctor(Kook.IElementBuilder,Kook.SectionAccessoryMode,Kook.IElementBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.SectionModuleBuilder"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
                The <paramref name="text"/> is not any form of text element,
                including <see cref="T:Kook.PlainTextElementBuilder"/>, <see cref="T:Kook.KMarkdownElementBuilder"/>,
                and <see cref="T:Kook.ParagraphStructBuilder"/>; or the <paramref name="accessory"/> is neither
                an <see cref="T:Kook.ImageElementBuilder"/> nor <see cref="T:Kook.ButtonElementBuilder"/>.
            </exception>
        </member>
        <member name="M:Kook.SectionModuleBuilder.#ctor(System.String,System.Boolean,Kook.SectionAccessoryMode,Kook.IElementBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.SectionModuleBuilder"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
                The <paramref name="text"/> is not any form of text element,
                including <see cref="T:Kook.PlainTextElementBuilder"/>, <see cref="T:Kook.KMarkdownElementBuilder"/>,
                and <see cref="T:Kook.ParagraphStructBuilder"/>; or the <paramref name="accessory"/> is neither
                an <see cref="T:Kook.ImageElementBuilder"/> nor <see cref="T:Kook.ButtonElementBuilder"/>.
            </exception>
        </member>
        <member name="P:Kook.SectionModuleBuilder.Mode">
            <summary>
                Gets or sets how the <see cref="P:Kook.SectionModuleBuilder.Accessory"/> is positioned relative to the <see cref="P:Kook.SectionModuleBuilder.Text"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.SectionAccessoryMode"/> representing
                how the <see cref="P:Kook.SectionModuleBuilder.Accessory"/> is positioned relative to the <see cref="P:Kook.SectionModuleBuilder.Text"/>.
            </returns>
        </member>
        <member name="P:Kook.SectionModuleBuilder.Text">
            <summary>
                Gets or sets the text of the section.
            </summary>
            <returns>
                An <see cref="T:Kook.IElementBuilder"/> representing the text of the section.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> is not any form of text element,
                including <see cref="T:Kook.PlainTextElementBuilder"/>, <see cref="T:Kook.KMarkdownElementBuilder"/>, and <see cref="T:Kook.ParagraphStructBuilder"/>.
            </exception>
        </member>
        <member name="P:Kook.SectionModuleBuilder.Accessory">
            <summary>
                Gets or sets the accessory of the section.
            </summary>
            <returns>
                An <see cref="T:Kook.IElementBuilder"/> representing the accessory of the section.
            </returns>
            <exception cref="T:System.ArgumentException" accessor="set">
                The <paramref name="value"/> is neither an <see cref="T:Kook.ImageElementBuilder"/>
                nor <see cref="T:Kook.ButtonElementBuilder"/>.
            </exception>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithText(Kook.PlainTextElementBuilder)">
            <summary>
                Sets the text of the section.
            </summary>
            <param name="text">
                The text to be set for the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithText(Kook.KMarkdownElementBuilder)">
            <summary>
                Sets the text of the section.
            </summary>
            <param name="text">
                The text to be set for the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithText(System.String,System.Boolean)">
            <summary>
                Sets the text of the section.
            </summary>
            <param name="text">The text to be set for the section.</param>
            <param name="isKMarkdown">
                A bool indicating whether the text is in KMarkdown format;
                if <c>true</c>, the text will be set as a <see cref="T:Kook.KMarkdownElement"/>;
                if <c>false</c>, the text will be set as a <see cref="T:Kook.PlainTextElement"/>.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithText(Kook.ParagraphStructBuilder)">
            <summary>
                Sets the text of the section.
            </summary>
            <param name="text">
                The text to be set for the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithText``1(System.Action{``0})">
            <summary>
                Sets the text of the section.
            </summary>
            <param name="action">
                The action to set the text of the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithAccessory(Kook.ImageElementBuilder)">
            <summary>
                Sets the accessory of the section.
            </summary>
            <param name="accessory">
                The accessory to be set for the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithAccessory(Kook.ButtonElementBuilder)">
            <summary>
                Sets the accessory of the section.
            </summary>
            <param name="accessory">
                The accessory to be set for the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithAccessory``1(System.Action{``0})">
            <summary>
                Sets the accessory of the section.
            </summary>
            <param name="action">
                The action to set the accessory of the section.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.WithMode(Kook.SectionAccessoryMode)">
            <summary>
                Sets how the <see cref="P:Kook.SectionModuleBuilder.Accessory"/> is positioned relative to the <see cref="P:Kook.SectionModuleBuilder.Text"/>.
            </summary>
            <param name="mode">
                How the <see cref="P:Kook.SectionModuleBuilder.Accessory"/> is positioned relative to the <see cref="P:Kook.SectionModuleBuilder.Text"/>.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.SectionModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.SectionModule"/> representing the built section module object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Kook.ButtonElement"/> was not positioned to the right of the <see cref="P:Kook.SectionModuleBuilder.Text"/>,
                which is not allowed.
            </exception>
        </member>
        <member name="M:Kook.SectionModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.SectionModuleBuilder.op_Equality(Kook.SectionModuleBuilder,Kook.SectionModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.op_Inequality(Kook.SectionModuleBuilder,Kook.SectionModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.SectionModuleBuilder"/> is not equal to the current <see cref="T:Kook.SectionModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.SectionModuleBuilder"/> is not equal to the current <see cref="T:Kook.SectionModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.SectionModuleBuilder"/>, <see cref="M:Kook.SectionModuleBuilder.Equals(Kook.SectionModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.SectionModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.Equals(Kook.SectionModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>.</summary>
            <param name="sectionModuleBuilder">The <see cref="T:Kook.SectionModuleBuilder"/> to compare with the current <see cref="T:Kook.SectionModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.SectionModuleBuilder"/> is equal to the current <see cref="T:Kook.SectionModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.SectionModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.VideoModuleBuilder">
            <summary>
                Represents a video module builder for creating a <see cref="T:Kook.VideoModule"/>.
            </summary>
        </member>
        <member name="P:Kook.VideoModuleBuilder.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.VideoModuleBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.VideoModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kook.VideoModuleBuilder.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.VideoModuleBuilder"/> class.
            </summary>
            <param name="source"> The source URL of the video. </param>
            <param name="title"> The title of the video. </param>
        </member>
        <member name="P:Kook.VideoModuleBuilder.Source">
            <summary>
                Gets or sets the source URL of the video.
            </summary>
            <returns>
                The source URL of the video.
            </returns>
        </member>
        <member name="P:Kook.VideoModuleBuilder.Title">
            <summary>
                Gets or sets the title of the video.
            </summary>
            <returns>
                The title of the video.
            </returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.WithSource(System.String)">
            <summary>
                Sets the source URL of the video.
            </summary>
            <param name="source">
                The source URL of the video to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.WithTitle(System.String)">
            <summary>
                Sets the title of the video.
            </summary>
            <param name="title">
                The title of the video to be set.
            </param>
            <returns>
                The current builder.
            </returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.Build">
            <summary>
                Builds this builder into a <see cref="T:Kook.VideoModule"/>.
            </summary>
            <returns>
                A <see cref="T:Kook.VideoModule"/> representing the built video module object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Kook.VideoModuleBuilder.Source"/> does not include a protocol (neither HTTP nor HTTPS)
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Kook.VideoModuleBuilder.Source"/> cannot be null or empty
            </exception>
        </member>
        <member name="M:Kook.VideoModuleBuilder.Kook#IModuleBuilder#Build">
            <inheritdoc />
        </member>
        <member name="M:Kook.VideoModuleBuilder.op_Equality(Kook.VideoModuleBuilder,Kook.VideoModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.op_Inequality(Kook.VideoModuleBuilder,Kook.VideoModuleBuilder)">
            <summary>
                Determines whether the specified <see cref="T:Kook.VideoModuleBuilder"/> is not equal to the current <see cref="T:Kook.VideoModuleBuilder"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.VideoModuleBuilder"/> is not equal to the current <see cref="T:Kook.VideoModuleBuilder"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.VideoModuleBuilder"/>, <see cref="M:Kook.VideoModuleBuilder.Equals(Kook.VideoModuleBuilder)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.VideoModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.Equals(Kook.VideoModuleBuilder)">
            <summary>Determines whether the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>.</summary>
            <param name="videoModuleBuilder">The <see cref="T:Kook.VideoModuleBuilder"/> to compare with the current <see cref="T:Kook.VideoModuleBuilder"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.VideoModuleBuilder"/> is equal to the current <see cref="T:Kook.VideoModuleBuilder"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.VideoModuleBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ContainerModule">
            <summary>
                Represents a container module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.ContainerModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ContainerModule.Elements">
            <summary>
                Gets the elements in this container module.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> representing the elements in this container module.
            </returns>
        </member>
        <member name="M:Kook.ContainerModule.op_Equality(Kook.ContainerModule,Kook.ContainerModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContainerModule.op_Inequality(Kook.ContainerModule,Kook.ContainerModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContainerModule"/> is not equal to the current <see cref="T:Kook.ContainerModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContainerModule"/> is not equal to the current <see cref="T:Kook.ContainerModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContainerModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ContainerModule"/>, <see cref="M:Kook.ContainerModule.Equals(Kook.ContainerModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ContainerModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContainerModule.Equals(Kook.ContainerModule)">
            <summary>Determines whether the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>.</summary>
            <param name="containerModule">The <see cref="T:Kook.ContainerModule"/> to compare with the current <see cref="T:Kook.ContainerModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContainerModule"/> is equal to the current <see cref="T:Kook.ContainerModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContainerModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ContextModule">
            <summary>
                Represents a context module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.ContextModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ContextModule.Elements">
            <summary>
                Gets the elements in this context module.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> representing the elements in this context module.
            </returns>
        </member>
        <member name="M:Kook.ContextModule.op_Equality(Kook.ContextModule,Kook.ContextModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContextModule.op_Inequality(Kook.ContextModule,Kook.ContextModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ContextModule"/> is not equal to the current <see cref="T:Kook.ContextModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.ContextModule"/> is not equal to the current <see cref="T:Kook.ContextModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.ContextModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ContextModule"/>, <see cref="M:Kook.ContextModule.Equals(Kook.ContextModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ContextModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContextModule.Equals(Kook.ContextModule)">
            <summary>Determines whether the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>.</summary>
            <param name="contextModule">The <see cref="T:Kook.ContextModule"/> to compare with the current <see cref="T:Kook.ContextModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ContextModule"/> is equal to the current <see cref="T:Kook.ContextModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ContextModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.CountdownMode">
            <summary>
                Specifies the display mode for the countdown timer.
            </summary>
        </member>
        <member name="F:Kook.CountdownMode.Day">
            <summary>
                The timer will display the time in days, hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:Kook.CountdownMode.Hour">
            <summary>
                The timer will display the time in hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:Kook.CountdownMode.Second">
            <summary>
                The timer will display the time in seconds.
            </summary>
        </member>
        <member name="T:Kook.CountdownModule">
            <summary>
                Represents a countdown module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.CountdownModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.CountdownModule.EndTime">
            <summary>
                Gets the end time of the countdown.
            </summary>
            <returns>
                The end time of the countdown.
            </returns>
        </member>
        <member name="P:Kook.CountdownModule.StartTime">
            <summary>
                Gets the start time of the countdown.
            </summary>
            <returns>
                The start time of the countdown.
            </returns>
        </member>
        <member name="P:Kook.CountdownModule.Mode">
            <summary>
                Gets the mode of the countdown.
            </summary>
            <returns>
                A <see cref="T:Kook.CountdownMode"/> value that represents the mode of the countdown.
            </returns>
        </member>
        <member name="M:Kook.CountdownModule.op_Equality(Kook.CountdownModule,Kook.CountdownModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.CountdownModule.op_Inequality(Kook.CountdownModule,Kook.CountdownModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.CountdownModule"/> is not equal to the current <see cref="T:Kook.CountdownModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.CountdownModule"/> is not equal to the current <see cref="T:Kook.CountdownModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.CountdownModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.CountdownModule"/>, <see cref="M:Kook.CountdownModule.Equals(Kook.CountdownModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.CountdownModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CountdownModule.Equals(Kook.CountdownModule)">
            <summary>Determines whether the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>.</summary>
            <param name="countdownModule">The <see cref="T:Kook.CountdownModule"/> to compare with the current <see cref="T:Kook.CountdownModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.CountdownModule"/> is equal to the current <see cref="T:Kook.CountdownModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.CountdownModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.DividerModule">
            <summary>
                A divider module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.DividerModule.Type">
            <inheritdoc />
        </member>
        <member name="M:Kook.DividerModule.op_Equality(Kook.DividerModule,Kook.DividerModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.DividerModule.op_Inequality(Kook.DividerModule,Kook.DividerModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.DividerModule"/> is not equal to the current <see cref="T:Kook.DividerModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.DividerModule"/> is not equal to the current <see cref="T:Kook.DividerModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.DividerModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.DividerModule"/>, <see cref="M:Kook.DividerModule.Equals(Kook.DividerModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.DividerModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.DividerModule.Equals(Kook.DividerModule)">
            <summary>Determines whether the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>.</summary>
            <param name="dividerModule">The <see cref="T:Kook.DividerModule"/> to compare with the current <see cref="T:Kook.DividerModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.DividerModule"/> is equal to the current <see cref="T:Kook.DividerModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.DividerModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.FileModule">
            <summary>
                A file module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.FileModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.FileModule.Source">
            <inheritdoc />
        </member>
        <member name="P:Kook.FileModule.Title">
            <inheritdoc />
        </member>
        <member name="M:Kook.FileModule.op_Equality(Kook.FileModule,Kook.FileModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.FileModule.op_Inequality(Kook.FileModule,Kook.FileModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.FileModule"/> is not equal to the current <see cref="T:Kook.FileModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.FileModule"/> is not equal to the current <see cref="T:Kook.FileModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.FileModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.FileModule"/>, <see cref="M:Kook.FileModule.Equals(Kook.FileModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.FileModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.FileModule.Equals(Kook.FileModule)">
            <summary>Determines whether the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>.</summary>
            <param name="fileModule">The <see cref="T:Kook.FileModule"/> to compare with the current <see cref="T:Kook.FileModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.FileModule"/> is equal to the current <see cref="T:Kook.FileModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.FileModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.HeaderModule">
            <summary>
                Represents a header module in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.HeaderModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.HeaderModule.Text">
            <summary>
                Gets the text element of the header.
            </summary>
            <returns>
                A <see cref="T:Kook.PlainTextElement"/> representing the text of the header.
            </returns>
        </member>
        <member name="M:Kook.HeaderModule.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kook.HeaderModule.op_Equality(Kook.HeaderModule,Kook.HeaderModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.HeaderModule.op_Inequality(Kook.HeaderModule,Kook.HeaderModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.HeaderModule"/> is not equal to the current <see cref="T:Kook.HeaderModule"/>.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.HeaderModule"/> is not equal to the current <see cref="T:Kook.HeaderModule"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Kook.HeaderModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.HeaderModule"/>, <see cref="M:Kook.HeaderModule.Equals(Kook.HeaderModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.HeaderModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.HeaderModule.Equals(Kook.HeaderModule)">
            <summary>Determines whether the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>.</summary>
            <param name="headerModule">The <see cref="T:Kook.HeaderModule"/> to compare with the current <see cref="T:Kook.HeaderModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.HeaderModule"/> is equal to the current <see cref="T:Kook.HeaderModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.HeaderModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ImageGroupModule">
            <summary>
            Represents an image group module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.ImageGroupModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ImageGroupModule.Elements">
            <summary>
                Gets the image elements in this image group module.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> representing the images in this image group module.
            </returns>
        </member>
        <member name="M:Kook.ImageGroupModule.op_Equality(Kook.ImageGroupModule,Kook.ImageGroupModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>;
            </returns>
        </member>
        <member name="M:Kook.ImageGroupModule.op_Inequality(Kook.ImageGroupModule,Kook.ImageGroupModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.ImageGroupModule"/> is not equal to the current <see cref="T:Kook.ImageGroupModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.ImageGroupModule"/> is not equal to the current <see cref="T:Kook.ImageGroupModule"/>;
            </returns>
        </member>
        <member name="M:Kook.ImageGroupModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.ImageGroupModule"/>, <see cref="M:Kook.ImageGroupModule.Equals(Kook.ImageGroupModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.ImageGroupModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageGroupModule.Equals(Kook.ImageGroupModule)">
            <summary>Determines whether the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>.</summary>
            <param name="imageGroupModule">The <see cref="T:Kook.ImageGroupModule"/> to compare with the current <see cref="T:Kook.ImageGroupModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.ImageGroupModule"/> is equal to the current <see cref="T:Kook.ImageGroupModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.ImageGroupModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.IMediaModule">
            <summary>
                A generic media module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.IMediaModule.Source">
            <summary>
                Gets the source of the media associated with this module.
            </summary>
            <returns>
                A <c>string</c> representing the source of the audio associated with this module.
            </returns>
        </member>
        <member name="P:Kook.IMediaModule.Title">
            <summary>
                Gets the title of the media associated with this module.
            </summary>
            <returns>
                A <c>string</c> representing the title of the media associated with this module.
            </returns>
        </member>
        <member name="T:Kook.IModule">
            <summary>
                Represents a generic module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.IModule.Type">
            <summary>
                Gets the type of the module.
            </summary>
            <returns>
                A <see cref="T:Kook.ModuleType"/> value that represents the type of the module.
            </returns>
        </member>
        <member name="T:Kook.InviteModule">
            <summary>
                An invite module that can be used in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.InviteModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.InviteModule.Code">
            <summary>
                Gets the invite code.
            </summary>
        </member>
        <member name="M:Kook.InviteModule.op_Equality(Kook.InviteModule,Kook.InviteModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>;
            </returns>
        </member>
        <member name="M:Kook.InviteModule.op_Inequality(Kook.InviteModule,Kook.InviteModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.InviteModule"/> is not equal to the current <see cref="T:Kook.InviteModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.InviteModule"/> is not equal to the current <see cref="T:Kook.InviteModule"/>;
            </returns>
        </member>
        <member name="M:Kook.InviteModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.InviteModule"/>, <see cref="M:Kook.InviteModule.Equals(Kook.InviteModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.InviteModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.InviteModule.Equals(Kook.InviteModule)">
            <summary>Determines whether the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>.</summary>
            <param name="inviteModule">The <see cref="T:Kook.InviteModule"/> to compare with the current <see cref="T:Kook.InviteModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.InviteModule"/> is equal to the current <see cref="T:Kook.InviteModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.InviteModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.ModuleType">
            <summary>
                Specifies the type of an <see cref="T:Kook.IModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Header">
            <summary>
                A <see cref="T:Kook.HeaderModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Section">
            <summary>
                A <see cref="T:Kook.SectionModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.ImageGroup">
            <summary>
                An <see cref="T:Kook.ImageGroupModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Container">
            <summary>
                A <see cref="T:Kook.ContainerModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.ActionGroup">
            <summary>
                An <see cref="T:Kook.ActionGroupModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Context">
            <summary>
                A <see cref="T:Kook.ContextModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Divider">
            <summary>
                A <see cref="T:Kook.DividerModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.File">
            <summary>
                A <see cref="T:Kook.FileModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Audio">
            <summary>
                An <see cref="T:Kook.AudioModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Video">
            <summary>
                A <see cref="T:Kook.VideoModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Countdown">
            <summary>
                A <see cref="T:Kook.CountdownModule"/>.
            </summary>
        </member>
        <member name="F:Kook.ModuleType.Invite">
            <summary>
                An <see cref="T:Kook.InviteModule"/>.
            </summary>
        </member>
        <member name="T:Kook.SectionAccessoryMode">
            <summary>
                Specifies the accessory position relative to the text element. 
            </summary>
        </member>
        <member name="F:Kook.SectionAccessoryMode.Unspecified">
            <summary>
                How the accessory is positioned relative to the text element is not specified.
            </summary>
        </member>
        <member name="F:Kook.SectionAccessoryMode.Left">
            <summary>
                The accessory is positioned to the left of the text element.
            </summary>
        </member>
        <member name="F:Kook.SectionAccessoryMode.Right">
            <summary>
                The accessory is positioned to the right of the text element.
            </summary>
        </member>
        <member name="T:Kook.SectionModule">
            <summary>
                Represents a section module in card.
            </summary>
        </member>
        <member name="P:Kook.SectionModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.SectionModule.Mode">
            <summary>
                Specifies that the <see cref="P:Kook.SectionModule.Accessory"/> is to the left or right of <see cref="P:Kook.SectionModule.Text"/>.
            </summary>
            <returns>
                <see cref="F:Kook.SectionAccessoryMode.Left"/> if the <see cref="P:Kook.SectionModule.Accessory"/> is to the left of <see cref="P:Kook.SectionModule.Text"/>,
                <see cref="F:Kook.SectionAccessoryMode.Right"/> if the <see cref="P:Kook.SectionModule.Accessory"/> is to the right of <see cref="P:Kook.SectionModule.Text"/>,
                <see cref="F:Kook.SectionAccessoryMode.Unspecified"/> if how the <see cref="P:Kook.SectionModule.Accessory"/> is positioned is not specified.
            </returns>
        </member>
        <member name="P:Kook.SectionModule.Text">
            <summary>
                Gets the text of the section.
            </summary>
            <returns>
                An <see cref="T:Kook.IElement"/> representing the text of the section.
            </returns>
        </member>
        <member name="P:Kook.SectionModule.Accessory">
            <summary>
                Gets the accessory of the section.
            </summary>
            <returns>
                An <see cref="T:Kook.IElement"/> representing the accessory of the section.
            </returns>
        </member>
        <member name="M:Kook.SectionModule.op_Equality(Kook.SectionModule,Kook.SectionModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.SectionModule.op_Inequality(Kook.SectionModule,Kook.SectionModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.SectionModule"/> is not equal to the current <see cref="T:Kook.SectionModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.SectionModule"/> is not equal to the current <see cref="T:Kook.SectionModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.SectionModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.SectionModule"/>, <see cref="M:Kook.SectionModule.Equals(Kook.SectionModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.SectionModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.SectionModule.Equals(Kook.SectionModule)">
            <summary>Determines whether the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>.</summary>
            <param name="sectionModule">The <see cref="T:Kook.SectionModule"/> to compare with the current <see cref="T:Kook.SectionModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.SectionModule"/> is equal to the current <see cref="T:Kook.SectionModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.SectionModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.VideoModule">
            <summary>
                Represents a video module in an <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="P:Kook.VideoModule.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.VideoModule.Source">
            <inheritdoc />
        </member>
        <member name="P:Kook.VideoModule.Title">
            <inheritdoc />
        </member>
        <member name="M:Kook.VideoModule.op_Equality(Kook.VideoModule,Kook.VideoModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.VideoModule.op_Inequality(Kook.VideoModule,Kook.VideoModule)">
            <summary>
                Determines whether the specified <see cref="T:Kook.VideoModule"/> is not equal to the current <see cref="T:Kook.VideoModule"/>.
            </summary>
            <returns>
                <c>true</c> if the specified <see cref="T:Kook.VideoModule"/> is not equal to the current <see cref="T:Kook.VideoModule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kook.VideoModule.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>.</summary>
            <remarks>If the object passes is an <see cref="T:Kook.VideoModule"/>, <see cref="M:Kook.VideoModule.Equals(Kook.VideoModule)"/> will be called to compare the 2 instances.</remarks>
            <param name="obj">The object to compare with the current <see cref="T:Kook.VideoModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.VideoModule.Equals(Kook.VideoModule)">
            <summary>Determines whether the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>.</summary>
            <param name="videoModule">The <see cref="T:Kook.VideoModule"/> to compare with the current <see cref="T:Kook.VideoModule"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Kook.VideoModule"/> is equal to the current <see cref="T:Kook.VideoModule"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Kook.VideoModule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.CreateAttachmentMode">
            <summary>
                Indicates that how the <see cref="T:Kook.FileAttachment"/> will be operated to attache files.
            </summary>
        </member>
        <member name="F:Kook.CreateAttachmentMode.FilePath">
            <summary>
                The <see cref="T:Kook.FileAttachment"/> will be created via a local file path.
            </summary>
        </member>
        <member name="F:Kook.CreateAttachmentMode.Stream">
            <summary>
                The <see cref="T:Kook.FileAttachment"/> will be created via a <see cref="F:Kook.CreateAttachmentMode.Stream"/>.
            </summary>
        </member>
        <member name="F:Kook.CreateAttachmentMode.AssetUri">
            <summary>
                The <see cref="T:Kook.FileAttachment"/> will be created via a <see cref="T:System.Uri"/>
                pointing to a file on KOOK asset OSS.
            </summary>
        </member>
        <member name="T:Kook.BilibiliVideoEmbed">
            <summary>
                Represents an embed in a message that links to a Bilibili video.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.Url">
            <inheritdoc />
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.OriginUrl">
            <summary>
                A <c>string</c> that represents the origin URL of the Bilibili video.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.BvNumber">
            <summary>
                A <c>string</c> that represents the Bilibili video number in BV format.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.IframePath">
            <summary>
                A <c>string</c> that represents the path of the iframe.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.Duration">
            <summary>
                A <see cref="T:System.TimeSpan"/> that represents the duration of the Bilibili video.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.Title">
            <summary>
                A <c>string</c> that represents the title of the Bilibili video.
            </summary>
        </member>
        <member name="P:Kook.BilibiliVideoEmbed.Cover">
            <summary>
                A <c>string</c> that represents the cover of the Bilibili video.
            </summary>
        </member>
        <member name="T:Kook.EmbedType">
            <summary>
                Represents the type of an embed.
            </summary>
        </member>
        <member name="F:Kook.EmbedType.NotImplemented">
            <summary>
                Represents an embed that is not implemented.
            </summary>
        </member>
        <member name="F:Kook.EmbedType.Link">
            <summary>
                Represents an embed that is a link.
            </summary>
        </member>
        <member name="F:Kook.EmbedType.Image">
            <summary>
                Represents an embed that is an image.
            </summary>
        </member>
        <member name="F:Kook.EmbedType.BilibiliVideo">
            <summary>
                Represents an embed that is a Bilibili video.
            </summary>
        </member>
        <member name="T:Kook.IEmbed">
            <summary>
                Represents a generic embed.
            </summary>
            <seealso cref="P:Kook.IMessage.Embeds"/>
        </member>
        <member name="P:Kook.IEmbed.Type">
            <summary>
                Gets the type of this embed.
            </summary>
            <returns>
                A <see cref="T:Kook.EmbedType"/> that represents the type of this embed.
            </returns>
        </member>
        <member name="P:Kook.IEmbed.Url">
            <summary>
                Gets the URL of this embed.
            </summary>
            <returns>
                A <c>string</c> that represents the URL of this embed.
            </returns>
        </member>
        <member name="T:Kook.ImageEmbed">
            <summary>
                Represents an image embed.
            </summary>
        </member>
        <member name="P:Kook.ImageEmbed.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ImageEmbed.Url">
            <inheritdoc />
        </member>
        <member name="P:Kook.ImageEmbed.OriginUrl">
            <summary>
                Gets the original URL of the image.
            </summary>
            <returns>
                A <c>string</c> representing the original URL of the image.
            </returns>
        </member>
        <member name="T:Kook.LinkEmbed">
            <summary>
                Represents a link embed.
            </summary>
        </member>
        <member name="P:Kook.LinkEmbed.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.LinkEmbed.Url">
            <inheritdoc />
        </member>
        <member name="P:Kook.LinkEmbed.Title">
            <summary>
                Gets the title of the website the link directs to.
            </summary>
            <returns>
                A <c>string</c> representing the title of the website the link directs to.
            </returns>
        </member>
        <member name="P:Kook.LinkEmbed.Description">
            <summary>
                Gets the description of the website the link directs to.
            </summary>
            <returns>
                A <c>string</c> representing the description of the website the link directs to.
            </returns>
        </member>
        <member name="P:Kook.LinkEmbed.SiteName">
            <summary>
                Gets the name of the website the link directs to.
            </summary>
            <returns>
                A <c>string</c> representing the name of the website the link directs to.
            </returns>
        </member>
        <member name="P:Kook.LinkEmbed.Color">
            <summary>
                Gets the color displayed along the left side of the card.
            </summary>
            <returns>
                A <c>string</c> representing the color displayed along the left side of the card.
            </returns>
        </member>
        <member name="P:Kook.LinkEmbed.Image">
            <summary>
                Gets the URL of the image related to the website the link directs to.
            </summary>
            <returns>
                A <c>string</c> representing the URL of the image related to the website the link directs to.
            </returns>
        </member>
        <member name="T:Kook.NotImplementedEmbed">
            <summary>
                Represents a unimplemented embed.
            </summary>
        </member>
        <member name="P:Kook.NotImplementedEmbed.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.NotImplementedEmbed.RawType">
            <summary>
                Gets the type of the embed.
            </summary>
            <returns>
                A <c>string</c> representing the type of the embed.
            </returns>
            <remarks>
                This value originally came from the <c>type</c> field of the <see cref="P:Kook.NotImplementedEmbed.JsonNode"/>.
            </remarks>
        </member>
        <member name="P:Kook.NotImplementedEmbed.Url">
            <inheritdoc />
        </member>
        <member name="P:Kook.NotImplementedEmbed.JsonNode">
            <summary>
                Gets the raw JSON of the embed.
            </summary>
            <returns>
                A JsonNode representing the raw JSON of the embed.
            </returns>
        </member>
        <member name="M:Kook.NotImplementedEmbed.Resolve``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
                Resolves the embed to a concrete type via JSON deserialization.
            </summary>
            <param name="options">
                The options to use when deserializing the embed.
            </param>
            <typeparam name="T">
                The concrete type to deserialize the embed to.
            </typeparam>
            <returns>
                A <typeparamref name="T"/> representing the resolved embed.
            </returns>
        </member>
        <member name="M:Kook.NotImplementedEmbed.Resolve``1(System.Func{Kook.NotImplementedEmbed,``0})">
            <summary>
                Resolves the embed to a concrete type via delegate.
            </summary>
            <param name="resolvingFunc">
                The resolving function to use when resolves the embed.
            </param>
            <typeparam name="T">
                The concrete type to deserialize the embed to.
            </typeparam>
            <returns>
                A <typeparamref name="T"/> representing the resolved embed.
            </returns>
        </member>
        <member name="T:Kook.FileAttachment">
            <summary>
                Represents a file attachment.
            </summary>
        </member>
        <member name="P:Kook.FileAttachment.Mode">
            <summary>
                Gets how this attachment will be operated.
            </summary>
        </member>
        <member name="P:Kook.FileAttachment.Type">
            <summary>
                Gets the type of this attachment.
            </summary>
        </member>
        <member name="P:Kook.FileAttachment.FileName">
            <summary>
                Gets  the filename.
            </summary>
        </member>
        <member name="P:Kook.FileAttachment.Stream">
            <summary>
                Gets the stream containing the file content.
            </summary>
        </member>
        <member name="P:Kook.FileAttachment.Uri">
            <summary>
                Gets the URI of the file.
            </summary>
        </member>
        <member name="M:Kook.FileAttachment.#ctor(System.IO.Stream,System.String,Kook.AttachmentType)">
            <summary>
                Creates a file attachment from a stream.
            </summary>
            <param name="stream">The stream to create the attachment from.</param>
            <param name="fileName">The name of the attachment.</param>
            <param name="type">The type of the attachment.</param>
        </member>
        <member name="M:Kook.FileAttachment.#ctor(System.String,System.String,Kook.AttachmentType)">
            <summary>
                Create the file attachment from a file path.
            </summary>
            <remarks>
                This file path is NOT validated and is passed directly into a
                <see cref="M:System.IO.File.OpenRead(System.String)"/>.
            </remarks>
            <param name="path">The path to the file.</param>
            <param name="fileName">The name of the attachment.</param>
            <param name="type">The type of the attachment.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="path" /> is a zero-length string, contains only white space, or contains one or
                more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="path" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                The specified path, file name, or both exceed the system-defined maximum length. For example, on
                Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
                characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                <paramref name="path" /> is in an invalid format.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified <paramref name="path"/> is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="path" /> specified a directory. -or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="path" /> was not found.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred while opening the file.
            </exception>
        </member>
        <member name="M:Kook.FileAttachment.#ctor(System.Uri,System.String,Kook.AttachmentType)">
            <summary>
                Create the file attachment from a URI.
            </summary>
            <remarks>
                This URI path will be validated before being passed into REST API.
                If the resource the URI points to is not stored on KOOK OSS, this constructor will throw an exception.
                Under this circumstance, please create asset in advance.
            </remarks>
            <param name="uri">The URI of the file.</param>
            <param name="fileName">The name of the attachment.</param>
            <param name="type">The type of the attachment.</param>
            <exception cref="T:System.InvalidOperationException">The URI provided is not an asset on the KOOK OSS.</exception>
            <exception cref="T:System.ArgumentException">The URI provided is blank.</exception>
            <seealso cref="M:Kook.Utils.UrlValidation.ValidateKookAssetUrl(System.String)"/>
        </member>
        <member name="M:Kook.FileAttachment.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Kook.IAttachment">
            <summary>
                Represents a message attachment found in a <see cref="T:Kook.IUserMessage"/>.
            </summary>
        </member>
        <member name="P:Kook.IAttachment.Type">
            <summary>
                Gets the type of the attachment.
            </summary>
            <returns>
                An <see cref="T:Kook.AttachmentType"/> representing the type of the attachment.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.Url">
            <summary>
                Gets the URL of the attachment.
            </summary>
            <returns>
                A <c>string</c> representing the URL of the attachment.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.Filename">
            <summary>
                Gets the filename of this attachment.
            </summary>
            <returns>
                A <c>string</c> containing the full filename of this attachment.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.Size">
            <summary>
                Gets the file size of the attachment.
            </summary>
            <returns>
                An <c>int</c> representing the file size of the attachment;
                <c>null</c> if the file size is unknown or not applicable.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.FileType">
            <summary>
                Gets the file type of the attachment.
            </summary>
            <returns>
                A <c>string</c> representing the file type of the attachment;
                <c>null</c> if the file type is unknown or not applicable.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.Duration">
            <summary>
                Gets the duration of the attachment.
            </summary>
            <remarks>
                A timespan representing the duration of the attachment;
                <c>null</c> if the duration is unknown or not applicable.
            </remarks>
        </member>
        <member name="P:Kook.IAttachment.Width">
            <summary>
                Gets the width of the attachment.
            </summary>
            <returns>
                An <c>int</c> representing the width of the attachment;
                <c>null</c> if the width is unknown or not applicable.
            </returns>
        </member>
        <member name="P:Kook.IAttachment.Height">
            <summary>
                Gets the height of the attachment.
            </summary>
            <returns>
                An <c>int</c> representing the height of the attachment;
                <c>null</c> if the height is unknown or not applicable.
            </returns>
        </member>
        <member name="T:Kook.IMessage">
            <summary>
                Represents a message object.
            </summary>
        </member>
        <member name="P:Kook.IMessage.Type">
            <summary>
                Gets the type of this message.
            </summary>
        </member>
        <member name="P:Kook.IMessage.Source">
            <summary>
                Gets the source type of this message.
            </summary>
        </member>
        <member name="P:Kook.IMessage.IsPinned">
            <summary>
                Gets the value that indicates whether this message is pinned.
            </summary>
            <returns>
                <c>true</c> if this message was added to its channel's pinned messages; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Channel">
            <summary>
                Gets the source channel of the message.
            </summary>
        </member>
        <member name="P:Kook.IMessage.Author">
            <summary>
                Gets the author of this message.
            </summary>
        </member>
        <member name="P:Kook.IMessage.Content">
            <summary>
                Gets the content for this message.
            </summary>
            <returns>
                A string that contains the body of the message;
                note that this field may be empty or the original code if the message is not a text based message.
            </returns>
        </member>
        <member name="P:Kook.IMessage.CleanContent">
            <summary>
                Gets the clean content for this message.
            </summary>
            <returns>
                A string that contains the body of the message stripped of mentions, markdown, emojis and pings;
                note that this field may be empty or the original code if the message is not a text based message.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Timestamp">
            <summary>
                Gets the time this message was sent.
            </summary>
            <returns>
                Time of when the message was sent.
            </returns>
        </member>
        <member name="P:Kook.IMessage.EditedTimestamp">
            <summary>
                Gets the time of this message's last edit.
            </summary>
            <returns>
                Time of when the message was last edited;
                <c>null</c> if the message is never edited.
            </returns>
        </member>
        <member name="P:Kook.IMessage.MentionedUserIds">
            <summary>
                Gets the IDs of users mentioned in this message.
            </summary>
            <returns>
                A read-only collection of user IDs.
            </returns>
        </member>
        <member name="P:Kook.IMessage.MentionedRoleIds">
            <summary>
                Gets the IDs of roles mentioned in this message.
            </summary>
            <returns>
                A read-only collection of role IDs.
            </returns>
        </member>
        <member name="P:Kook.IMessage.MentionedEveryone">
            <summary>
                Gets the value that indicates whether this message mentioned everyone.
            </summary>
            <returns>
                <c>true</c> if this message mentioned everyone; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IMessage.MentionedHere">
            <summary>
                Gets the value that indicates whether this message mentioned online users.
            </summary>
            <returns>
                <c>true</c> if this message mentioned online users; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Tags">
            <summary>
                Gets all tags included in this message's content.
            </summary>
        </member>
        <member name="P:Kook.IMessage.Attachments">
            <summary>
                Gets the attachment included in this message.
            </summary>
            <returns>
                The attachment included in this message;
            </returns>
        </member>
        <member name="P:Kook.IMessage.Cards">
            <summary>
                Gets all cards included in this message.
            </summary>
            <returns>
                A read-only collection of card objects.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Embeds">
            <summary>
                Gets all embeds included in this message.
            </summary>
            <returns>
                A read-only collection of embed objects.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Pokes">
            <summary>
                Gets all poke actions included in this message.
            </summary>
            <returns>
                A read-only collection of poke actions objects.
            </returns>
        </member>
        <member name="P:Kook.IMessage.Reactions">
            <summary>
                Gets all reactions included in this message.
            </summary>
        </member>
        <member name="M:Kook.IMessage.AddReactionAsync(Kook.IEmote,Kook.RequestOptions)">
            <summary>
                Adds a reaction to this message.
            </summary>
            <param name="emote">The emoji used to react to this message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for adding a reaction to this message.
            </returns>
            <seealso cref="T:Kook.IEmote"/>
        </member>
        <member name="M:Kook.IMessage.RemoveReactionAsync(Kook.IEmote,Kook.IUser,Kook.RequestOptions)">
            <summary>
                Removes a reaction from message.
            </summary>
            <param name="emote">The emoji used to react to this message.</param>
            <param name="user">The user that added the emoji.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for removing a reaction to this message.
            </returns>
            <seealso cref="T:Kook.IEmote"/>
        </member>
        <member name="M:Kook.IMessage.RemoveReactionAsync(Kook.IEmote,System.UInt64,Kook.RequestOptions)">
            <summary>
                Removes a reaction from message.
            </summary>
            <param name="emote">The emoji used to react to this message.</param>
            <param name="userId">The ID of the user that added the emoji.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for removing a reaction to this message.
            </returns>
            <seealso cref="T:Kook.IEmote"/>
        </member>
        <member name="M:Kook.IMessage.GetReactionUsersAsync(Kook.IEmote,Kook.RequestOptions)">
            <summary>
                Gets all users that reacted to a message with a given emote.
            </summary>
            <param name="emote">The emoji that represents the reaction that you wish to get.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                 Collection of users.
            </returns>
        </member>
        <member name="T:Kook.IQuote">
            <summary>
                Represents a generic message quote.
            </summary>
        </member>
        <member name="P:Kook.IQuote.QuotedMessageId">
            <summary>
                Gets the identifier of the message this quote refers to.
            </summary>
        </member>
        <member name="P:Kook.IQuote.Type">
            <summary>
                Gets the type of the message this quote refers to.
            </summary>
        </member>
        <member name="P:Kook.IQuote.Content">
            <summary>
                Gets the content of the message this quote refers to.
            </summary>
            <returns>
                A string that contains the body of the message;
                note that this field may be empty or the original code if the message is not a text based message.
            </returns>
        </member>
        <member name="P:Kook.IQuote.CreateAt">
            <summary>
                Gets the time this message was sent.
            </summary>
            <returns>
                Time of when the message was sent.
            </returns>
        </member>
        <member name="P:Kook.IQuote.Author">
            <summary>
                Gets the author of this message.
            </summary>
        </member>
        <member name="T:Kook.IReaction">
            <summary>
                Represents a generic reaction object.
            </summary>
        </member>
        <member name="P:Kook.IReaction.Emote">
            <summary>
                The <see cref="T:Kook.IEmote" /> used in the reaction.
            </summary>
        </member>
        <member name="T:Kook.ISystemMessage">
            <summary>
                Represents a generic message sent by the system.
            </summary>
        </member>
        <member name="P:Kook.ISystemMessage.SystemMessageType">
            <summary>
                Gets the type of the system message.
            </summary>
            <remarks>
                <note type="warning">
                    Because the data from Kook does not describe the type
                    of the message in detail, this property is not implemented yet.
                    Accessing this property will always result in an exception at present.
                </note>
            </remarks>
        </member>
        <member name="T:Kook.ITag">
            <summary>
                Gets a generic tag found in messages.
            </summary>
            <seealso cref="P:Kook.IMessage.Tags"/>
        </member>
        <member name="P:Kook.ITag.Index">
            <summary>
                Gets position of the tag in the message.
            </summary>
        </member>
        <member name="P:Kook.ITag.Length">
            <summary>
                Gets the length of the tag.
            </summary>
        </member>
        <member name="P:Kook.ITag.Type">
            <summary>
                Gets the type of the tag.
            </summary>
        </member>
        <member name="P:Kook.ITag.Key">
            <summary>
                Gets the key of the tag.
            </summary>
        </member>
        <member name="P:Kook.ITag.Value">
            <summary>
                Gets the value of the tag.
            </summary>
        </member>
        <member name="T:Kook.IUserMessage">
            <summary>
                Represents a generic message sent by a user.
            </summary>
        </member>
        <member name="P:Kook.IUserMessage.Quote">
            <summary>
                Gets the message quote.
            </summary>
            <returns>
                The message quote.
            </returns>
        </member>
        <member name="M:Kook.IUserMessage.ModifyAsync(System.Action{Kook.MessageProperties},Kook.RequestOptions)">
            <summary>
                Modifies this message.
            </summary>
            <remarks>
                This method modifies this message with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Kook.MessageProperties"/>.
            </remarks>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="M:Kook.IUserMessage.Resolve(Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling)">
            <summary>
                Transforms this message's text into a human-readable form by resolving its tags.
            </summary>
            <param name="userHandling">Determines how the user tag should be handled.</param>
            <param name="channelHandling">Determines how the channel tag should be handled.</param>
            <param name="roleHandling">Determines how the role tag should be handled.</param>
            <param name="everyoneHandling">Determines how the @everyone tag should be handled.</param>
            <param name="emojiHandling">Determines how the emoji tag should be handled.</param>
        </member>
        <member name="T:Kook.MessageProperties">
            <summary>
                Properties that are used to modify an <see cref="T:Kook.IUserMessage" /> with the specified changes.
            </summary>
            <seealso cref="M:Kook.IUserMessage.ModifyAsync(System.Action{Kook.MessageProperties},Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.MessageProperties.Content">
            <summary>
                Gets or sets the content of the message.
            </summary>
            <remarks>
                This must be less than the constant defined by <see cref="F:Kook.KookConfig.MaxMessageSize"/>.
            </remarks>
        </member>
        <member name="P:Kook.MessageProperties.Cards">
            <summary>
                Gets or sets the cards of the message.
            </summary>
        </member>
        <member name="P:Kook.MessageProperties.Quote">
            <summary>
                Gets or sets the quote of the message.
            </summary>
        </member>
        <member name="P:Kook.MessageProperties.EphemeralUser">
            <summary>
                Gets or sets the only user that can see this message.
            </summary>
        </member>
        <member name="T:Kook.MessageType">
            <summary>
                Represents the type of a message.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Text">
            <summary>
                Represents that the type of the message contains plain text.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Image">
            <summary>
                Represents that the type of the message contains an image.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Video">
            <summary>
                Represents that the type of the message contains a video.
            </summary>
        </member>
        <member name="F:Kook.MessageType.File">
            <summary>
                Represents that the type of the message contains a file.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Audio">
            <summary>
                Represents that the type of the message contains a voice message.
            </summary>
        </member>
        <member name="F:Kook.MessageType.KMarkdown">
            <summary>
                Represents that the type of the message contains a KMarkdown message.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Card">
            <summary>
                Represents that the type of the message contains cards.
            </summary>
        </member>
        <member name="F:Kook.MessageType.Poke">
            <summary>
                Represents that the type of the message contains a poke action.
            </summary>
        </member>
        <member name="F:Kook.MessageType.System">
            <summary>
                Represents that the type of the message originates from KOOK system.
            </summary>
        </member>
        <member name="T:Kook.IPoke">
            <summary>
                Represents a generic poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Name">
            <summary>
                Gets the name of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Description">
            <summary>
                Gets the description of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Cooldown">
            <summary>
                Gets how long a user needs to wait before they can use the poke again.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Categories">
            <summary>
                Gets the categories of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Label">
            <summary>
                Gets the label of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Icon">
            <summary>
                 Gets the icon resources of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Quality">
            <summary>
                Gets the quality of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.Resource">
            <summary>
                Gets the resource of the poke.
            </summary>
        </member>
        <member name="P:Kook.IPoke.MessageScenarios">
            <summary>
                Gets how the poke can be used and displayed in message contexts.
            </summary>
        </member>
        <member name="T:Kook.IPokeAction">
            <summary>
                Represents a single generic poke action.
            </summary>
        </member>
        <member name="P:Kook.IPokeAction.Operator">
            <summary>
                Gets the user who performed the action.
            </summary>
        </member>
        <member name="P:Kook.IPokeAction.Targets">
            <summary>
                Gets the users who were poked by the action.
            </summary>
        </member>
        <member name="P:Kook.IPokeAction.Poke">
            <summary>
                Gets the poke this action is associated with.
            </summary>
        </member>
        <member name="T:Kook.PokeIcon">
            <summary>
                Represents an icon of an <see cref="T:Kook.IPoke"/>.
            </summary>
        </member>
        <member name="P:Kook.PokeIcon.Resource">
            <summary>
                Gets the resource uri of the icon.
            </summary>
        </member>
        <member name="P:Kook.PokeIcon.ResourceExpired">
            <summary>
                Gets the resource uri of the icon when the <see cref="T:Kook.IPoke"/> is expired.
            </summary>
        </member>
        <member name="T:Kook.PokeLabel">
            <summary>
                Represents the label of a <see cref="T:Kook.IPoke"/>.
            </summary>
        </member>
        <member name="P:Kook.PokeLabel.Id">
            <summary>
                Gets the ID of the  poke action label.
            </summary>
        </member>
        <member name="P:Kook.PokeLabel.Name">
            <summary>
                Gets the name of the poke action label.
            </summary>
        </member>
        <member name="T:Kook.PokeQuality">
            <summary>
                Represents the quality of a <see cref="T:Kook.IPoke"/>.
            </summary>
        </member>
        <member name="P:Kook.PokeQuality.Id">
            <summary>
                Gets the identifier of the <see cref="T:Kook.PokeQuality"/>.
            </summary>
        </member>
        <member name="P:Kook.PokeQuality.Color">
            <summary>
                Gets the color of the <see cref="T:Kook.PokeQuality"/>.
            </summary>
        </member>
        <member name="P:Kook.PokeQuality.Resources">
            <summary>
                Gets the resources of the <see cref="T:Kook.PokeQuality"/>.
            </summary>
        </member>
        <member name="T:Kook.ImageAnimationPokeResource">
            <summary>
                Represents an image animation poke resource.
            </summary>
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Resources">
            <summary>
                Gets the resources of the image animation.
            </summary>
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Duration">
            <summary>
                Gets how long this animation animation should last filling the full screen.
            </summary>
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Width">
            <summary>
                Gets the width of the image animation.
            </summary>
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Height">
            <summary>
                Gets the height of the image animation.
            </summary>
        </member>
        <member name="P:Kook.ImageAnimationPokeResource.Percent">
            <summary>
                // TODO: To be documented.
            </summary>
        </member>
        <member name="T:Kook.IPokeResource">
            <summary>
                Represents a generic poke resource.
            </summary>
        </member>
        <member name="P:Kook.IPokeResource.Type">
            <summary>
                Gets the type of the poke resource.
            </summary>
        </member>
        <member name="T:Kook.NotImplementedPokeResource">
            <summary>
                Represents a poke resource that is not implemented to be resolved yet.
            </summary>
        </member>
        <member name="P:Kook.NotImplementedPokeResource.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.NotImplementedPokeResource.RawType">
            <summary>
                Gets the type of the poke resource.
            </summary>
            <returns>
                A <c>string</c> representing the type of the poke resource.
            </returns>
            <remarks>
                This value originally came from the <c>type</c> field of the <see cref="P:Kook.NotImplementedPokeResource.JsonNode"/>.
            </remarks>
        </member>
        <member name="P:Kook.NotImplementedPokeResource.JsonNode">
            <summary>
                Gets the raw JSON of the embed.
            </summary>
            <returns>
                A JsonNode representing the raw JSON of the embed.
            </returns>
        </member>
        <member name="M:Kook.NotImplementedPokeResource.Resolve``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
                Resolves the embed to a concrete type via JSON deserialization.
            </summary>
            <param name="options">
                The options to use when deserializing the embed.
            </param>
            <typeparam name="T">
                The concrete type to deserialize the embed to.
            </typeparam>
            <returns>
                A <typeparamref name="T"/> representing the resolved embed.
            </returns>
        </member>
        <member name="M:Kook.NotImplementedPokeResource.Resolve``1(System.Func{Kook.NotImplementedPokeResource,``0})">
            <summary>
                Resolves the embed to a concrete type via delegate.
            </summary>
            <param name="resolvingFunc">
                The resolving function to use when resolves the embed.
            </param>
            <typeparam name="T">
                The concrete type to deserialize the embed to.
            </typeparam>
            <returns>
                A <typeparamref name="T"/> representing the resolved embed.
            </returns>
        </member>
        <member name="T:Kook.PokeResourceType">
            <summary>
                Represents the type of a <see cref="T:Kook.IPokeResource"/>.
            </summary>
        </member>
        <member name="F:Kook.PokeResourceType.NotImplemented">
            <summary>
                Represents a resource that is not implemented.
            </summary>
        </member>
        <member name="F:Kook.PokeResourceType.ImageAnimation">
            <summary>
                Represents a resource that is an image.
            </summary>
        </member>
        <member name="T:Kook.Quote">
            <inheritdoc cref="T:Kook.IQuote"/>
        </member>
        <member name="P:Kook.Quote.Id">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.QuotedMessageId">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.Content">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.CreateAt">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.Author">
            <inheritdoc />
        </member>
        <member name="P:Kook.Quote.Empty">
            <summary>
                Gets an empty quote whose quoted message is null.
            </summary>
            <remarks>
                Used to delete a quote when modifying a message.
            </remarks>
        </member>
        <member name="M:Kook.Quote.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.Quote"/> class.
            </summary>
            <param name="quotedMessageId">
                The quoted message identifier.
            </param>
        </member>
        <member name="T:Kook.ReactionMetadata">
            <summary>
                A metadata containing reaction information.
            </summary>
        </member>
        <member name="P:Kook.ReactionMetadata.ReactionCount">
            <summary>
                Gets the number of reactions.
            </summary>
            <returns>
                An int representing the number of this reactions that has been added to this message.
            </returns>
        </member>
        <member name="P:Kook.ReactionMetadata.IsMe">
            <summary>
                Gets a value that indicates whether the current user has reacted to this.
            </summary>
            <returns>
                <c>true</c> if the user has reacted to the message; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kook.SystemMessageType">
            <summary>
                Gets the type of a <see cref="T:Kook.ISystemMessage"/>
            </summary>
        </member>
        <member name="T:Kook.Tag`1">
            <summary>
                Represents a tag found in <see cref="T:Kook.IMessage"/>.
            </summary>
        </member>
        <member name="P:Kook.Tag`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Kook.Tag`1.Index">
            <inheritdoc />
        </member>
        <member name="P:Kook.Tag`1.Length">
            <inheritdoc />
        </member>
        <member name="P:Kook.Tag`1.Key">
            <inheritdoc />
        </member>
        <member name="P:Kook.Tag`1.Value">
            <summary>
                Gets the value of the tag.
            </summary>
            <remarks>
                When <see cref="P:Kook.Tag`1.Type"/> is <see cref="F:Kook.TagType.HereMention"/>,
                this property returns the same entity as <see cref="P:Kook.IGuild.EveryoneRole"/> for convenience.
                because there is no actual entities representing a group of online users.
            </remarks>
        </member>
        <member name="M:Kook.Tag`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kook.Tag`1.Kook#ITag#Value">
            <inheritdoc />
        </member>
        <member name="T:Kook.TagHandling">
            <summary>
                Specifies the handling type the tag should use.
            </summary>
            <seealso cref="T:Kook.MentionUtils"/>
            <seealso cref="M:Kook.IUserMessage.Resolve(Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling,Kook.TagHandling)"/>
        </member>
        <member name="F:Kook.TagHandling.Ignore">
            <summary> 
                Tag handling is ignored (e.g. &lt;@53905483156684800&gt; -&gt; &lt;@53905483156684800&gt;).
            </summary>
        </member>
        <member name="F:Kook.TagHandling.Remove">
            <summary> 
                Removes the tag entirely. 
            </summary>
        </member>
        <member name="F:Kook.TagHandling.Name">
            <summary> 
                Resolves to username (e.g. &lt;@53905483156684800&gt; -&gt; @Voltana). 
            </summary>
        </member>
        <member name="F:Kook.TagHandling.NameNoPrefix">
            <summary> 
                Resolves to username without mention prefix (e.g. &lt;@53905483156684800&gt; -&gt; Voltana). 
            </summary>
        </member>
        <member name="F:Kook.TagHandling.FullName">
            <summary> 
                Resolves to username with identify number value. (e.g. &lt;@53905483156684800&gt; -&gt; @Voltana#8252). 
            </summary>
        </member>
        <member name="F:Kook.TagHandling.FullNameNoPrefix">
            <summary> 
                Resolves to username with identify number value without mention prefix. (e.g. &lt;@53905483156684800&gt; -&gt; Voltana#8252). 
            </summary>
        </member>
        <member name="F:Kook.TagHandling.Sanitize">
            <summary> 
                Sanitizes the tag (e.g. &lt;@53905483156684800&gt; -&gt; &lt;@53905483156684800&gt; (w/ nbsp)).
            </summary>
        </member>
        <member name="T:Kook.TagMode">
            <summary>
                Represents the mode to parse tags.
            </summary>
        </member>
        <member name="F:Kook.TagMode.PlainText">
            <summary>
                Parse tags as plain text.
            </summary>
        </member>
        <member name="F:Kook.TagMode.KMarkdown">
            <summary>
                Parse tags as KMarkdown.
            </summary>
        </member>
        <member name="T:Kook.TagType">
            <summary> Specifies the type of Kook tag. </summary>
        </member>
        <member name="F:Kook.TagType.UserMention">
            <summary> The object is an user mention. </summary>
        </member>
        <member name="F:Kook.TagType.ChannelMention">
            <summary> The object is a channel mention. </summary>
        </member>
        <member name="F:Kook.TagType.RoleMention">
            <summary> The object is a role mention. </summary>
        </member>
        <member name="F:Kook.TagType.EveryoneMention">
            <summary> The object is an everyone mention. </summary>
        </member>
        <member name="F:Kook.TagType.HereMention">
            <summary> The object is a here mention. </summary>
        </member>
        <member name="F:Kook.TagType.Emoji">
            <summary> The object is an emoji. </summary>
        </member>
        <member name="T:Kook.ChannelPermission">
            <summary>
                Represents a permission can be granted to a channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.CreateInvites">
            <summary>
                Allows creation of invites.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ManageChannels">
            <summary>
                Allows management and editing of channels.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ManageRoles">
            <summary>
                Allows management and editing of roles.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ViewChannel">
            <summary>
                Allows guild members to view a channel, which includes reading messages in text channels.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.SendMessages">
            <summary>
                Allows for sending messages in a channel
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ManageMessages">
            <summary>
                Allows for deletion of other users messages.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.AttachFiles">
            <summary>
                Allows for uploading images and files.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.Connect">
            <summary>
                Allows for joining of a voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ManageVoice">
            <summary>
                Allows for disconnection of members, and moving of members between voice channels.
            </summary>
            <remarks>
                Such movements are allowed to channels that both the user to be moved and the operator have permissions to.
            </remarks>
        </member>
        <member name="F:Kook.ChannelPermission.MentionEveryone">
            <summary>
                Allows for using the everyone mention tag to notify all users in a channel,
                and the online mention tag to notify all online users in a channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.AddReactions">
            <summary>
                Allows for the addition of reactions to messages.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.PassiveConnect">
            <summary>
                Limits the user to connecting to a voice channel only when the user is invited or moved by others.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.UseVoiceActivity">
            <summary>
                Allows for speaking in voice a channel without having to press the speaking key.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.Speak">
            <summary>
                Allows for speaking in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.DeafenMembers">
            <summary>
                Allows for deafening of members in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.MuteMembers">
            <summary>
                Allows for muting members in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.PlaySoundtrack">
            <summary>
                Allows for playing soundtracks in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermission.ShareScreen">
            <summary>
                Allows for screen share.
            </summary>
        </member>
        <member name="T:Kook.ChannelPermissions">
            <summary>
                Represents a set of permissions for a channel.
            </summary>
        </member>
        <member name="F:Kook.ChannelPermissions.None">
            <summary> Gets a blank <see cref="T:Kook.ChannelPermissions"/> that grants no permissions.</summary>
        </member>
        <member name="F:Kook.ChannelPermissions.Text">
            <summary> Gets a <see cref="T:Kook.ChannelPermissions"/> that grants all permissions for text channels.</summary>
        </member>
        <member name="F:Kook.ChannelPermissions.Voice">
            <summary> Gets a <see cref="T:Kook.ChannelPermissions"/> that grants all permissions for voice channels.</summary>
        </member>
        <member name="F:Kook.ChannelPermissions.Category">
            <summary> Gets a <see cref="T:Kook.ChannelPermissions"/> that grants all permissions for category channels.</summary>
        </member>
        <member name="F:Kook.ChannelPermissions.DM">
            <summary> Gets a <see cref="T:Kook.ChannelPermissions"/> that grants all permissions for direct message channels.</summary>
        </member>
        <member name="M:Kook.ChannelPermissions.All(Kook.IChannel)">
            <summary> Gets a <see cref="T:Kook.ChannelPermissions"/> that grants all permissions for a given channel type.</summary>
            <exception cref="T:System.ArgumentException">Unknown channel type.</exception>
        </member>
        <member name="P:Kook.ChannelPermissions.RawValue">
            <summary> Gets a packed value representing all the permissions in this <see cref="T:Kook.ChannelPermissions"/>.</summary>
        </member>
        <member name="P:Kook.ChannelPermissions.CreateInvites">
            <summary> If <c>true</c>, a user may create invites. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ManageChannels">
            <summary> If <c>true</c>, a user may view and revoke invites. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ManageRoles">
            <summary> If <c>true</c>, a user may adjust roles. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ViewChannel">
            <summary> If <c>true</c>, a user may view channels. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.SendMessages">
            <summary> If <c>true</c>, a user may send messages. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ManageMessages">
            <summary> If <c>true</c>, a user may delete messages. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.AttachFiles">
            <summary> If <c>true</c>, a user may send files. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.Connect">
            <summary> If <c>true</c>, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ManageVoice">
            <summary> If <c>true</c>, a user may kick other users from voice channels, and move other users between voice channels. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.MentionEveryone">
            <summary> If <c>true</c>, a user may mention all users. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.AddReactions">
            <summary> If <c>true</c>, a user may add reactions. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.PassiveConnect">
            <summary> If <c>true</c>, a user may connect to a voice channel only when the user is invited or moved by other users. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.UseVoiceActivity">
            <summary> If <c>true</c>, a user may use voice activation. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.Speak">
            <summary> If <c>true</c>, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.DeafenMembers">
            <summary> If <c>true</c>, a user may deafen users. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.MuteMembers">
            <summary> If <c>true</c>, a user may mute users. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.PlaySoundtrack">
            <summary> If <c>true</c>, a user may play soundtracks in a voice channel. </summary>
        </member>
        <member name="P:Kook.ChannelPermissions.ShareScreen">
            <summary> If <c>true</c>, a user may share screen in a voice channel. </summary>
        </member>
        <member name="M:Kook.ChannelPermissions.#ctor(System.UInt64)">
            <summary> Creates a new <see cref="T:Kook.ChannelPermissions"/> with the provided packed value.</summary>
        </member>
        <member name="M:Kook.ChannelPermissions.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary> Creates a new <see cref="T:Kook.ChannelPermissions"/> with the provided permissions.</summary>
        </member>
        <member name="M:Kook.ChannelPermissions.Modify(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary> Creates a new <see cref="T:Kook.ChannelPermissions"/> from this one, changing the provided non-null permissions.</summary>
        </member>
        <member name="M:Kook.ChannelPermissions.Has(Kook.ChannelPermission)">
            <summary>
                Returns a value that indicates if a specific <see cref="T:Kook.ChannelPermission"/> is enabled
                in these permissions.
            </summary>
            <param name="permission">The permission value to check for.</param>
            <returns><c>true</c> if the permission is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Kook.ChannelPermissions.ToList">
            <summary>
                Returns a <see cref="T:System.Collections.Generic.List`1"/> containing all of the <see cref="T:Kook.ChannelPermission"/>
                flags that are enabled.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing <see cref="T:Kook.ChannelPermission"/> flags. Empty if none are enabled.</returns>
        </member>
        <member name="M:Kook.ChannelPermissions.ToString">
            <summary>
                Gets the raw value of the permissions.
            </summary>
        </member>
        <member name="T:Kook.GuildPermission">
            <summary>
                Represents a permission can be granted to a guild.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.Administrator">
            <summary>
                Allows all permissions and bypasses channel permission overwrites.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageGuild">
            <summary>
                Allows management and editing of guild.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ViewAuditLog">
            <summary>
            	Allows for viewing of audit logs.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.CreateInvites">
            <summary>
                Allows creation of invites.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageInvites">
            <summary>
                Allows for management of invites.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageChannels">
            <summary>
                Allows management and editing of channels.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.KickMembers">
            <summary>
                Allows kicking members.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.BanMembers">
            <summary>
                Allows banning members.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageEmojis">
            <summary>
                Allows management and editing of emojis and stickers.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ChangeNickname">
            <summary>
                Allows for modification of own nickname.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageRoles">
            <summary>
                Allows management and editing of roles.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ViewChannel">
            <summary>
                Allows guild members to view a channel, which includes reading messages in text channels.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.SendMessages">
            <summary>
                Allows for sending messages in a channel
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageMessages">
            <summary>
                Allows for deletion of other users messages.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.AttachFiles">
            <summary>
                Allows for uploading images and files.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.Connect">
            <summary>
                Allows for joining of a voice channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageVoice">
            <summary>
                Allows for disconnection of members, and moving of members between voice channels.
            </summary>
            <remarks>
                Such movements are allowed to channels that both the user to be moved and the operator have permissions to.
            </remarks>
        </member>
        <member name="F:Kook.GuildPermission.MentionEveryone">
            <summary>
                Allows for using the everyone mention tag to notify all users in a channel,
                and the online mention tag to notify all online users in a channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.AddReactions">
            <summary>
                Allows for the addition of reactions to messages.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.FollowReactions">
            <summary>
                Allows for following of added reactions to messages.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.PassiveConnect">
            <summary>
                Limits the user to connecting to a voice channel only when the user is invited or moved by others.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.OnlyPushToTalk">
            <summary>
                Limits the user to speaking in a voice channel only when pressing the speaking key.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.UseVoiceActivity">
            <summary>
                Allows for speaking in voice a channel without having to press the speaking key.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.Speak">
            <summary>
                Allows for speaking in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.DeafenMembers">
            <summary>
                Allows for deafening of members in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.MuteMembers">
            <summary>
                Allows for muting members in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ManageNicknames">
            <summary>
                Allows for modification of other users nicknames.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.PlaySoundtrack">
            <summary>
                Allows for playing soundtracks in a voice channel.
            </summary>
        </member>
        <member name="F:Kook.GuildPermission.ShareScreen">
            <summary>
                Allows for screen share.
            </summary>
        </member>
        <member name="T:Kook.GuildPermissions">
            <summary>
                Represents a set of permissions for a guild.
            </summary>
        </member>
        <member name="F:Kook.GuildPermissions.None">
            <summary> Gets a blank <see cref="T:Kook.GuildPermissions"/> that grants no permissions. </summary>
        </member>
        <member name="F:Kook.GuildPermissions.All">
            <summary> Gets a <see cref="T:Kook.GuildPermissions"/> that grants all guild permissions. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.RawValue">
            <summary> Gets a packed value representing all the permissions in this <see cref="T:Kook.GuildPermissions"/>. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.Administrator">
            <summary> If <c>true</c>, a user is granted all permissions, and cannot have them revoked via channel permissions. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageGuild">
            <summary> If <c>true</c>, a user may adjust guild properties. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ViewAuditLog">
            <summary> If <c>true</c>, a user may view the audit log. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.CreateInvites">
            <summary> If <c>true</c>, a user may create invites. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageInvites">
            <summary> If <c>true</c>, a user may view and revoke invites. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageChannels">
            <summary> If <c>true</c>, a user may create, delete and modify channels. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.KickMembers">
            <summary> If <c>true</c>, a user may kick users from the guild. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.BanMembers">
            <summary> If <c>true</c>, a user may ban users from the guild. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageEmojis">
            <summary> If <c>true</c>, a user may edit the emojis for this guild. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ChangeNickname">
            <summary> If <c>true</c>, a user may change their own nickname. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageRoles">
            <summary> If <c>true</c>, a user may adjust roles. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ViewChannel">
            <summary> If <c>true</c>, a user may view channels. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.SendMessages">
            <summary> If <c>true</c>, a user may send messages. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageMessages">
            <summary> If <c>true</c>, a user may delete messages. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.AttachFiles">
            <summary> If <c>true</c>, a user may send files. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.Connect">
            <summary> If <c>true</c>, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageVoice">
            <summary> If <c>true</c>, a user may kick other users from voice channels, and move other users between voice channels. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.MentionEveryone">
            <summary> If <c>true</c>, a user may mention all users. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.AddReactions">
            <summary> If <c>true</c>, a user may add reactions. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.FollowReactions">
            <summary> If <c>true</c>, a user may follow added reactions. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.PassiveConnect">
            <summary> If <c>true</c>, a user may connect to a voice channel only when the user is invited or moved by other users. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.OnlyPushToTalk">
            <summary> If <c>true</c>, a user may speak only via push-to-talk. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.UseVoiceActivity">
            <summary> If <c>true</c>, a user may use voice activation. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.Speak">
            <summary> If <c>true</c>, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.DeafenMembers">
            <summary> If <c>true</c>, a user may deafen users. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.MuteMembers">
            <summary> If <c>true</c>, a user may mute users. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ManageNicknames">
            <summary> If <c>true</c>, a user may change the nickname of other users. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.PlaySoundtrack">
            <summary> If <c>true</c>, a user may play soundtracks in a voice channel. </summary>
        </member>
        <member name="P:Kook.GuildPermissions.ShareScreen">
            <summary> If <c>true</c>, a user may share screen in a voice channel. </summary>
        </member>
        <member name="M:Kook.GuildPermissions.#ctor(System.UInt64)">
            <summary> Creates a new <see cref="T:Kook.GuildPermissions"/> with the provided packed value. </summary>
        </member>
        <member name="M:Kook.GuildPermissions.#ctor(System.String)">
            <summary> Creates a new <see cref="T:Kook.GuildPermissions"/> with the provided packed value after converting to ulong. </summary>
        </member>
        <member name="M:Kook.GuildPermissions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Creates a new <see cref="T:Kook.GuildPermissions"/> structure with the provided permissions. </summary>
        </member>
        <member name="M:Kook.GuildPermissions.Modify(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary> Creates a new <see cref="T:Kook.GuildPermissions"/> from this one, changing the provided non-null permissions. </summary>
        </member>
        <member name="M:Kook.GuildPermissions.Has(Kook.GuildPermission)">
            <summary>
                Returns a value that indicates if a specific <see cref="T:Kook.GuildPermission"/> is enabled
                in these permissions.
            </summary>
            <param name="permission">The permission value to check for.</param>
            <returns><c>true</c> if the permission is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Kook.GuildPermissions.ToList">
            <summary>
                Returns a <see cref="T:System.Collections.Generic.List`1"/> containing all of the <see cref="T:Kook.GuildPermission"/>
                flags that are enabled.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing <see cref="T:Kook.GuildPermission"/> flags. Empty if none are enabled.</returns>
        </member>
        <member name="M:Kook.GuildPermissions.ToString">
            <summary>
                Gets the raw value of the permissions.
            </summary>
        </member>
        <member name="T:Kook.IPermissionOverwrite`1">
            <summary>
                Represents a generic permission overwrite.
            </summary>
            <typeparam name="TTarget">
                The type of the target.
            </typeparam>
        </member>
        <member name="P:Kook.IPermissionOverwrite`1.Target">
            <summary>
                Gets the target of this overwrite.
            </summary>
        </member>
        <member name="P:Kook.IPermissionOverwrite`1.Permissions">
            <summary>
                Gets the overwritten permission.
            </summary>
        </member>
        <member name="T:Kook.OverwritePermissions">
            <summary>
                Represents a container for a series of overwrite permissions.
            </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.InheritAll">
            <summary>
                Gets a blank <see cref="T:Kook.OverwritePermissions" /> that inherits all permissions.
            </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.AllowAll(Kook.IChannel)">
            <summary>
                Gets a <see cref="T:Kook.OverwritePermissions" /> that grants all permissions for the given channel.
            </summary>
            <exception cref="T:System.ArgumentException">Unknown channel type.</exception>
        </member>
        <member name="M:Kook.OverwritePermissions.DenyAll(Kook.IChannel)">
            <summary>
                Gets a <see cref="T:Kook.OverwritePermissions" /> that denies all permissions for the given channel.
            </summary>
            <exception cref="T:System.ArgumentException">Unknown channel type.</exception>
        </member>
        <member name="P:Kook.OverwritePermissions.AllowValue">
            <summary>
                Gets a packed value representing all the allowed permissions in this <see cref="T:Kook.OverwritePermissions"/>.
            </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.DenyValue">
            <summary>
                Gets a packed value representing all the denied permissions in this <see cref="T:Kook.OverwritePermissions"/>.
            </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.CreateInvites">
            <summary> If Allowed, a user may create invites. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ManageChannels">
            <summary> If Allowed, a user may create, delete and modify channels. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ManageRoles">
            <summary> If Allowed, a user may adjust roles. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ViewChannel">
            <summary> If Allowed, a user may view channels. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.SendMessages">
            <summary> If Allowed, a user may send messages. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ManageMessages">
            <summary> If Allowed, a user may delete messages. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.AttachFiles">
            <summary> If Allowed, a user may send files. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.Connect">
            <summary> If Allowed, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ManageVoice">
            <summary> If Allowed, a user may kick other users from voice channels, and move other users between voice channels. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.MentionEveryone">
            <summary> If Allowed, a user may mention all users. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.AddReactions">
            <summary> If Allowed, a user may add reactions. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.PassiveConnect">
            <summary> If Allowed, a user may connect to a voice channel only when the user is invited or moved by other users. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.UseVoiceActivity">
            <summary> If Allowed, a user may use voice activation. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.Speak">
            <summary> If Allowed, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.DeafenMembers">
            <summary> If Allowed, a user may deafen users. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.MuteMembers">
            <summary> If Allowed, a user may mute users. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.PlaySoundtrack">
            <summary> If Allowed, a user may play soundtracks in a voice channel. </summary>
        </member>
        <member name="P:Kook.OverwritePermissions.ShareScreen">
            <summary> If Allowed, a user may share screen in a voice channel. </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.#ctor(System.UInt64,System.UInt64)">
            <summary> Creates a new OverwritePermissions with the provided allow and deny packed values. </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.#ctor(System.String,System.String)">
            <summary> Creates a new OverwritePermissions with the provided allow and deny packed values after converting to ulong. </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.#ctor(Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue,Kook.PermValue)">
            <summary>
                Initializes a new <see cref="T:Kook.ChannelPermissions"/> struct with the provided permissions.
            </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.Modify(System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue},System.Nullable{Kook.PermValue})">
            <summary>
                Initializes a new <see cref="T:Kook.OverwritePermissions" /> from the current one, changing the provided
                non-null permissions.
            </summary>
        </member>
        <member name="M:Kook.OverwritePermissions.ToAllowList">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.List`1"/> of all the <see cref="T:Kook.ChannelPermission"/> values that are allowed.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of all allowed <see cref="T:Kook.ChannelPermission"/> flags. If none, the list will be empty.</returns>
        </member>
        <member name="M:Kook.OverwritePermissions.ToDenyList">
            <summary>
                Creates a <see cref="T:System.Collections.Generic.List`1"/> of all the <see cref="T:Kook.ChannelPermission"/> values that are denied.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of all denied <see cref="T:Kook.ChannelPermission"/> flags. If none, the list will be empty.</returns>
        </member>
        <member name="M:Kook.OverwritePermissions.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kook.PermValue">
            <summary> Specifies the permission value. </summary>
        </member>
        <member name="F:Kook.PermValue.Allow">
            <summary> Allows this permission. </summary>
        </member>
        <member name="F:Kook.PermValue.Deny">
            <summary> Denies this permission. </summary>
        </member>
        <member name="F:Kook.PermValue.Inherit">
            <summary> Inherits the permission settings. </summary>
        </member>
        <member name="T:Kook.RolePermissionOverwrite">
            <summary>
                Represent a permission object for a role.
            </summary>
        </member>
        <member name="P:Kook.RolePermissionOverwrite.Target">
            <summary>
                Gets the identifier for the role this overwrite is targeting.
            </summary>
        </member>
        <member name="P:Kook.RolePermissionOverwrite.Permissions">
            <summary>
                Gets the permissions associated with this overwrite entry for a role.
            </summary>
        </member>
        <member name="M:Kook.RolePermissionOverwrite.#ctor(System.UInt32,Kook.OverwritePermissions)">
            <summary>
                Initializes a new <see cref="T:Kook.RolePermissionOverwrite"/> with provided ID of the role and modified permissions.
            </summary>
        </member>
        <member name="T:Kook.UserPermissionOverwrite">
            <summary>
                Represent a permission object for a user.
            </summary>
        </member>
        <member name="P:Kook.UserPermissionOverwrite.Target">
            <summary>
                Gets the user this overwrite is targeting.
            </summary>
        </member>
        <member name="P:Kook.UserPermissionOverwrite.Permissions">
            <summary>
                Gets the permissions associated with this overwrite entry for a user.
            </summary>
        </member>
        <member name="M:Kook.UserPermissionOverwrite.#ctor(Kook.IUser,Kook.OverwritePermissions)">
            <summary>
                Initializes a new <see cref="T:Kook.UserPermissionOverwrite"/> with provided user information and modified permissions.
            </summary>
        </member>
        <member name="T:Kook.AlphaColor">
            <summary>
                Represents a <see cref="T:Kook.Color"/> with an alpha channel.
            </summary>
        </member>
        <member name="F:Kook.AlphaColor.MaxDecimalValue">
            <summary> Gets the max decimal value of an color with an alpha channel. </summary>
        </member>
        <member name="F:Kook.AlphaColor.Default">
            <summary> Gets the default user color value. </summary>
        </member>
        <member name="P:Kook.AlphaColor.RawValue">
            <summary>
                Gets the raw value for this color.
            </summary>
        </member>
        <member name="P:Kook.AlphaColor.R">
            <summary> Gets the red component for this color. </summary>
        </member>
        <member name="P:Kook.AlphaColor.G">
            <summary> Gets the green component for this color. </summary>
        </member>
        <member name="P:Kook.AlphaColor.B">
            <summary> Gets the blue component for this color. </summary>
        </member>
        <member name="P:Kook.AlphaColor.A">
            <summary> Gets the alpha component for this color. </summary>
        </member>
        <member name="P:Kook.AlphaColor.BaseColor">
            <summary>
                Gets the base color for this color without the alpha channel.
            </summary>
        </member>
        <member name="M:Kook.AlphaColor.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.AlphaColor"/> struct with the specified raw value.
            </summary>
            <param name="rawValue"> The raw value to use. </param>
        </member>
        <member name="M:Kook.AlphaColor.#ctor(Kook.Color,System.Byte)">
            <summary>
                Initializes a <see cref="T:Kook.AlphaColor" /> struct with the given base color and alpha channel.
            </summary>
            <param name="baseColor"> The base color to use. </param>
            <param name="alpha">The byte that represents the alpha channel.</param>
            <exception cref="T:System.ArgumentException">Value exceeds <see cref="F:Kook.AlphaColor.MaxDecimalValue"/>.</exception>
        </member>
        <member name="M:Kook.AlphaColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a <see cref="T:Kook.AlphaColor" /> struct with the given RGBA bytes.
            </summary>
            <example>
                The following will create a color that has a value of <c>#607D8BFF</c>.
                <code language="cs">
                AlphaColor darkGrey = new AlphaColor((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011, (byte)0b_11111111);
                </code>
            </example>
            <param name="r">The byte that represents the red color.</param>
            <param name="g">The byte that represents the green color.</param>
            <param name="b">The byte that represents the blue color.</param>
            <param name="a">The byte that represents the alpha channel.</param>
            <exception cref="T:System.ArgumentException">Value exceeds <see cref="F:Kook.AlphaColor.MaxDecimalValue"/>.</exception>
        </member>
        <member name="M:Kook.AlphaColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a <see cref="T:Kook.AlphaColor"/> struct with the given RGBA value.
            </summary>
            <example>
                The following will create a color that has a value of <c>#607D8BFF</c>.
                <code language="cs">
                AlphaColor darkGrey = new AlphaColor(96, 125, 139, 255);
                </code>
            </example>
            <param name="r">The value that represents the red color. Must be within 0~255.</param>
            <param name="g">The value that represents the green color. Must be within 0~255.</param>
            <param name="b">The value that represents the blue color. Must be within 0~255.</param>
            <param name="a">The value that represents the alpha channel. Must be within 0~255.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument value is not between 0 to 255.</exception>
        </member>
        <member name="M:Kook.AlphaColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a <see cref="T:Kook.AlphaColor"/> struct with the given RGBA float value.
            </summary>
            <example>
                The following will create a color that has a value of <c>#607C8CFF</c>.
                <code language="cs">
                AlphaColor darkGrey = new AlphaColor(0.38f, 0.49f, 0.55f, 1.00f);
                </code>
            </example>
            <param name="r">The value that represents the red color. Must be within 0~1.</param>
            <param name="g">The value that represents the green color. Must be within 0~1.</param>
            <param name="b">The value that represents the blue color. Must be within 0~1.</param>
            <param name="a">The value that represents the alpha channel. Must be within 0~1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument value is not between 0 to 1.</exception>
        </member>
        <member name="M:Kook.AlphaColor.op_Equality(Kook.AlphaColor,Kook.AlphaColor)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AlphaColor" /> is equal to this instance.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AlphaColor" /> is equal to this instance; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Kook.AlphaColor.op_Inequality(Kook.AlphaColor,Kook.AlphaColor)">
            <summary>
                Determines whether the specified <see cref="T:Kook.AlphaColor" /> is not equal to this instance.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.AlphaColor" /> is not equal to this instance; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Kook.AlphaColor.op_Implicit(System.UInt64)~Kook.AlphaColor">
            <summary>
                Converts the given raw value of <see cref="T:System.UInt32"/> to a <see cref="T:Kook.AlphaColor"/>.
            </summary>
            <param name="rawValue"> The raw value of the color. </param>
            <returns> The <see cref="T:Kook.AlphaColor"/> that represents the given raw value. </returns>
        </member>
        <member name="M:Kook.AlphaColor.op_Implicit(Kook.AlphaColor)~System.UInt64">
            <summary>
                Converts the given <see cref="T:Kook.AlphaColor"/> to its raw value of <see cref="T:System.UInt32"/>.
            </summary>
            <param name="color"> The <see cref="T:Kook.AlphaColor"/> to convert. </param>
            <returns> The raw value of the given <see cref="T:Kook.AlphaColor"/>. </returns>
        </member>
        <member name="M:Kook.AlphaColor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.AlphaColor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kook.AlphaColor.op_Implicit(Kook.Color)~Kook.AlphaColor">
            <summary>
                Converts the given Kook.Net-defined <see cref="T:Kook.Color"/> to a Kook.Net-defined <see cref="T:Kook.AlphaColor"/>.
            </summary>
            <param name="color"> The Kook.Net-defined <see cref="T:Kook.Color"/> to convert. </param>
            <returns> The Kook.Net-defined <see cref="T:Kook.AlphaColor"/> that represents the given Kook.Net-defined <see cref="T:Kook.Color"/>. </returns>
        </member>
        <member name="M:Kook.AlphaColor.op_Explicit(Kook.AlphaColor)~Kook.Color">
            <summary>
                Converts the given Kook.Net-defined <see cref="T:Kook.AlphaColor"/> to a Kook.Net-defined <see cref="T:Kook.Color"/>.
            </summary>
            <param name="color"> The Kook.Net-defined <see cref="T:Kook.AlphaColor"/> to convert. </param>
            <returns> The Kook.Net-defined <see cref="T:Kook.Color"/> that represents the given Kook.Net-defined <see cref="T:Kook.AlphaColor"/>. </returns>
            <remarks>
                <note type="warning">
                    This conversion will drop the alpha channel of the given <see cref="T:Kook.AlphaColor"/>.
                </note>
            </remarks>
        </member>
        <member name="M:Kook.AlphaColor.op_Implicit(Kook.AlphaColor)~System.Drawing.Color">
            <summary>
                Converts the given Kook.Net-defined <see cref="T:Kook.AlphaColor"/> to a .NET standard <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"> The Kook.Net-defined <see cref="T:Kook.AlphaColor"/> to convert. </param>
            <returns> The .NET standard <see cref="T:System.Drawing.Color"/> that represents the given Kook.Net-defined <see cref="T:Kook.AlphaColor"/>. </returns>
        </member>
        <member name="M:Kook.AlphaColor.op_Explicit(System.Drawing.Color)~Kook.AlphaColor">
            <summary>
                Converts the given .NET standard <see cref="T:System.Drawing.Color"/> to a Kook.Net-defined <see cref="T:Kook.AlphaColor"/>.
            </summary>
            <param name="color"> The .NET standard <see cref="T:System.Drawing.Color"/> to convert. </param>
            <returns> The Kook.Net-defined <see cref="T:Kook.AlphaColor"/> that represents the given .NET standard <see cref="T:System.Drawing.Color"/>. </returns>
        </member>
        <member name="M:Kook.AlphaColor.ToString">
            <summary>
                Gets the hexadecimal representation of the color (e.g. <c>#000cccff</c>).
            </summary>
            <returns>
                A hexadecimal string of the color.
            </returns>
        </member>
        <member name="T:Kook.Color">
            <summary>
                Represents a color used in Kook.
            </summary>
        </member>
        <member name="F:Kook.Color.MaxDecimalValue">
            <summary> Gets the max decimal value of color. </summary>
        </member>
        <member name="F:Kook.Color.Default">
            <summary> Gets the default user color value. </summary>
        </member>
        <member name="F:Kook.Color.Teal">
            <summary> Gets the teal color value. </summary>
            <returns> <para>A color struct with the hex value of 1ABC9C.</para> See http://www.color-hex.com/color/1ABC9C</returns>
        </member>
        <member name="F:Kook.Color.DarkTeal">
            <summary> Gets the dark teal color value. </summary>
            <returns> <para>A color struct with the hex value of 11806A.</para> See http://www.color-hex.com/color/11806A</returns>
        </member>
        <member name="F:Kook.Color.Green">
            <summary> Gets the green color value. </summary>
            <returns> <para>A color struct with the hex value of 2ECC71.</para> See http://www.color-hex.com/color/2ECC71</returns>
        </member>
        <member name="F:Kook.Color.DarkGreen">
            <summary> Gets the dark green color value. </summary>
            <returns> <para>A color struct with the hex value of 1F8B4C.</para> See http://www.color-hex.com/color/1F8B4C</returns>
        </member>
        <member name="F:Kook.Color.Blue">
            <summary> Gets the blue color value. </summary>
            <returns> <para>A color struct with the hex value of 3498DB.</para> See http://www.color-hex.com/color/3498DB</returns>
        </member>
        <member name="F:Kook.Color.DarkBlue">
            <summary> Gets the dark blue color value. </summary>
            <returns> <para>A color struct with the hex value of 206694.</para> See http://www.color-hex.com/color/206694</returns>
        </member>
        <member name="F:Kook.Color.Purple">
            <summary> Gets the purple color value. </summary>
            <returns> <para>A color struct with the hex value of 9B59B6.</para> See http://www.color-hex.com/color/9B59B6</returns>
        </member>
        <member name="F:Kook.Color.DarkPurple">
            <summary> Gets the dark purple color value. </summary>
            <returns> <para>A color struct with the hex value of 71368A.</para> See http://www.color-hex.com/color/71368A</returns>
        </member>
        <member name="F:Kook.Color.Magenta">
            <summary> Gets the magenta color value. </summary>
            <returns> <para>A color struct with the hex value of E91E63.</para> See http://www.color-hex.com/color/E91E63</returns>
        </member>
        <member name="F:Kook.Color.DarkMagenta">
            <summary> Gets the dark magenta color value. </summary>
            <returns> <para>A color struct with the hex value of AD1457.</para> See http://www.color-hex.com/color/AD1457</returns>
        </member>
        <member name="F:Kook.Color.Gold">
            <summary> Gets the gold color value. </summary>
            <returns> <para>A color struct with the hex value of F1C40F.</para> See http://www.color-hex.com/color/F1C40F</returns>
        </member>
        <member name="F:Kook.Color.LightOrange">
            <summary> Gets the light orange color value. </summary>
            <returns> <para>A color struct with the hex value of C27C0E.</para> See http://www.color-hex.com/color/C27C0E</returns>
        </member>
        <member name="F:Kook.Color.Orange">
            <summary> Gets the orange color value. </summary>
            <returns> <para>A color struct with the hex value of E67E22.</para> See http://www.color-hex.com/color/E67E22</returns>
        </member>
        <member name="F:Kook.Color.DarkOrange">
            <summary> Gets the dark orange color value. </summary>
            <returns> <para>A color struct with the hex value of A84300.</para> See http://www.color-hex.com/color/A84300</returns>
        </member>
        <member name="F:Kook.Color.Red">
            <summary> Gets the red color value. </summary>
            <returns> <para>A color struct with the hex value of E74C3C.</para> See http://www.color-hex.com/color/E74C3C</returns>
        </member>
        <member name="F:Kook.Color.DarkRed">
            <summary> Gets the dark red color value. </summary>
            <returns> <para>A color struct with the hex value of 992D22.</para> See http://www.color-hex.com/color/992D22</returns>
        </member>
        <member name="F:Kook.Color.LightGrey">
            <summary> Gets the light grey color value. </summary>
            <returns> <para>A color struct with the hex value of 95A5A6.</para> See http://www.color-hex.com/color/95A5A6</returns>
        </member>
        <member name="F:Kook.Color.Grey">
            <summary> Gets the grey color value. </summary>
            <returns> <para>A color struct with the hex value of 666D71.</para> See http://www.color-hex.com/color/666D71</returns>
        </member>
        <member name="F:Kook.Color.DarkGrey">
            <summary> Gets the dark grey color value. </summary>
            <returns> <para>A color struct with the hex value of 607D8B.</para> See http://www.color-hex.com/color/607D8B</returns>
        </member>
        <member name="F:Kook.Color.DarkerGrey">
            <summary> Gets the darker grey color value. </summary>
            <returns> <para>A color struct with the hex value of 3A4B53.</para> See http://www.color-hex.com/color/3A4B53</returns>
        </member>
        <member name="P:Kook.Color.RawValue">
            <summary> Gets the encoded value for this color. </summary>
            <remarks>
                This value is encoded as an unsigned integer value. The most-significant 8 bits contain the red value,
                the middle 8 bits contain the green value, and the least-significant 8 bits contain the blue value.
            </remarks>
        </member>
        <member name="P:Kook.Color.R">
            <summary> Gets the red component for this color. </summary>
        </member>
        <member name="P:Kook.Color.G">
            <summary> Gets the green component for this color. </summary>
        </member>
        <member name="P:Kook.Color.B">
            <summary> Gets the blue component for this color. </summary>
        </member>
        <member name="M:Kook.Color.#ctor(System.UInt32)">
            <summary>
                Initializes a <see cref="T:Kook.Color"/> struct with the given raw value.
            </summary>
            <example>
                The following will create a color that has a hex value of
                <see href="http://www.color-hex.com/color/607d8b">#607D8B</see>.
                <code language="cs">
                Color darkGrey = new Color(0x607D8B);
                </code>
            </example>
            <param name="rawValue">The raw value of the color (e.g. <c>0x607D8B</c>).</param>
            <exception cref="T:System.ArgumentException">Value exceeds <see cref="F:Kook.Color.MaxDecimalValue"/>.</exception>
        </member>
        <member name="M:Kook.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a <see cref="T:Kook.Color" /> struct with the given RGB bytes.
            </summary>
            <example>
                The following will create a color that has a value of
                <see href="http://www.color-hex.com/color/607d8b">#607D8B</see>.
                <code language="cs">
                Color darkGrey = new Color((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011);
                </code>
            </example>
            <param name="r">The byte that represents the red color.</param>
            <param name="g">The byte that represents the green color.</param>
            <param name="b">The byte that represents the blue color.</param>
            <exception cref="T:System.ArgumentException">Value exceeds <see cref="F:Kook.Color.MaxDecimalValue"/>.</exception>
        </member>
        <member name="M:Kook.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a <see cref="T:Kook.Color"/> struct with the given RGB value.
            </summary>
            <example>
                The following will create a color that has a value of
                <see href="http://www.color-hex.com/color/607d8b">#607D8B</see>.
                <code language="cs">
                Color darkGrey = new Color(96, 125, 139);
                </code>
            </example>
            <param name="r">The value that represents the red color. Must be within 0~255.</param>
            <param name="g">The value that represents the green color. Must be within 0~255.</param>
            <param name="b">The value that represents the blue color. Must be within 0~255.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument value is not between 0 to 255.</exception>
        </member>
        <member name="M:Kook.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a <see cref="T:Kook.Color"/> struct with the given RGB float value.
            </summary>
            <example>
                The following will create a color that has a value of
                <see href="http://www.color-hex.com/color/607c8c">#607C8C</see>.
                <code language="cs">
                Color darkGrey = new Color(0.38f, 0.49f, 0.55f);
                </code>
            </example>
            <param name="r">The value that represents the red color. Must be within 0~1.</param>
            <param name="g">The value that represents the green color. Must be within 0~1.</param>
            <param name="b">The value that represents the blue color. Must be within 0~1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument value is not between 0 to 1.</exception>
        </member>
        <member name="M:Kook.Color.op_Equality(Kook.Color,Kook.Color)">
            <summary>
                Determines whether the specified <see cref="T:Kook.Color" /> is equal to this instance.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.Color" /> is equal to this instance; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Kook.Color.op_Inequality(Kook.Color,Kook.Color)">
            <summary>
                Determines whether the specified <see cref="T:Kook.Color" /> is not equal to this instance.
            </summary>
            <returns> <c>true</c> if the specified <see cref="T:Kook.Color" /> is not equal to this instance; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Kook.Color.op_Implicit(System.UInt32)~Kook.Color">
            <summary>
                Converts the given raw value of <see cref="T:System.UInt32"/> to a <see cref="T:Kook.Color"/>.
            </summary>
            <param name="rawValue"> The raw value of the color. </param>
            <returns> The <see cref="T:Kook.Color"/> that represents the given raw value. </returns>
        </member>
        <member name="M:Kook.Color.op_Implicit(Kook.Color)~System.UInt32">
            <summary>
                Converts the given <see cref="T:Kook.Color"/> to its raw value of <see cref="T:System.UInt32"/>.
            </summary>
            <param name="color"> The <see cref="T:Kook.Color"/> to convert. </param>
            <returns> The raw value of the given <see cref="T:Kook.Color"/>. </returns>
        </member>
        <member name="M:Kook.Color.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.Color.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kook.Color.op_Implicit(Kook.Color)~System.Drawing.Color">
            <summary>
                Converts the given Kook.Net-defined <see cref="T:Kook.Color"/> to a .NET standard <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"> The Kook.Net-defined <see cref="T:Kook.Color"/> to convert. </param>
            <returns> The .NET standard <see cref="T:System.Drawing.Color"/> that represents the given Kook.Net-defined <see cref="T:Kook.Color"/>. </returns>
        </member>
        <member name="M:Kook.Color.op_Explicit(System.Drawing.Color)~Kook.Color">
            <summary>
                Converts the given .NET standard <see cref="T:System.Drawing.Color"/> to a Kook.Net-defined <see cref="T:Kook.Color"/>.
            </summary>
            <param name="color"> The .NET standard <see cref="T:System.Drawing.Color"/> to convert. </param>
            <returns> The Kook.Net-defined <see cref="T:Kook.Color"/> that represents the given .NET standard <see cref="T:System.Drawing.Color"/>. </returns>
        </member>
        <member name="M:Kook.Color.ToString">
            <summary>
                Gets the hexadecimal representation of the color (e.g. <c>#000ccc</c>).
            </summary>
            <returns>
                A hexadecimal string of the color.
            </returns>
        </member>
        <member name="T:Kook.ColorType">
            <summary>
                Represents the type of color a role has.
            </summary>
        </member>
        <member name="F:Kook.ColorType.Solid">
            <summary>
                The color is a solid color.
            </summary>
        </member>
        <member name="F:Kook.ColorType.Gradient">
            <summary>
                The color is a gradient.
            </summary>
        </member>
        <member name="T:Kook.GradientColor">
            <summary>
                Represents a gradient color.
            </summary>
        </member>
        <member name="M:Kook.GradientColor.#ctor(Kook.Color,Kook.Color)">
            <summary>
                Initializes a new instance of <see cref="T:Kook.GradientColor"/>.
            </summary>
            <param name="left"> The left color of the gradient. </param>
            <param name="right"> The right color of the gradient. </param>
        </member>
        <member name="P:Kook.GradientColor.Left">
            <summary>
                The left color of the gradient.
            </summary>
        </member>
        <member name="P:Kook.GradientColor.Right">
            <summary>
                The right color of the gradient.
            </summary>
        </member>
        <member name="M:Kook.GradientColor.op_Implicit(Kook.GradientColor)~System.ValueTuple{Kook.Color,Kook.Color}">
            <summary>
                Converts the <see cref="T:Kook.GradientColor"/> to a tuple of <see cref="T:Kook.Color"/>.
            </summary>
            <param name="gradient"> The gradient color to convert. </param>
            <returns> The tuple of <see cref="T:Kook.Color"/>. </returns>
        </member>
        <member name="M:Kook.GradientColor.op_Implicit(System.ValueTuple{Kook.Color,Kook.Color})~Kook.GradientColor">
            <summary>
                Converts the tuple of <see cref="T:Kook.Color"/> to a <see cref="T:Kook.GradientColor"/>.
            </summary>
            <param name="gradient"> The tuple of <see cref="T:Kook.Color"/> to convert. </param>
            <returns> The <see cref="T:Kook.GradientColor"/>. </returns>
        </member>
        <member name="T:Kook.IRole">
            <summary>
                Represents a generic role object to be given to a guild user.
            </summary>
        </member>
        <member name="P:Kook.IRole.Guild">
            <summary>
                Gets the guild that owns this role.
            </summary>
            <returns>
                A guild representing the parent guild of this role.
            </returns>
        </member>
        <member name="P:Kook.IRole.Name">
            <summary>
                Gets the name of this role.
            </summary>
            <returns>
                A string containing the name of this role.
            </returns>
        </member>
        <member name="P:Kook.IRole.Type">
            <summary>
                Gets the type of this role.
            </summary>
            <returns>
                A <see cref="T:Kook.RoleType" /> representing the type of this role.
            </returns>
        </member>
        <member name="P:Kook.IRole.Color">
            <summary>
                Gets the color given to users of this role.
            </summary>
            <returns>
                A <see cref="P:Kook.IRole.Color"/> struct representing the color of this role.
            </returns>
        </member>
        <member name="P:Kook.IRole.ColorType">
            <summary>
                Gets the type of the color given to users of this role.
            </summary>
            <returns>
                A <see cref="P:Kook.IRole.ColorType"/> struct representing the color type of this role.
            </returns>
        </member>
        <member name="P:Kook.IRole.GradientColor">
            <summary>
                Gets the gradient color given to users of this role.
            </summary>
            <returns>
                A <see cref="P:Kook.IRole.GradientColor"/> struct representing the gradient color of this role;
                <c>null</c> if the role does not have a gradient color.
            </returns>
        </member>
        <member name="P:Kook.IRole.Position">
            <summary>
                Gets this role's position relative to other roles in the same guild.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the position of the role in the role list of the guild.
            </returns>
        </member>
        <member name="P:Kook.IRole.IsHoisted">
            <summary>
                Gets a value that indicates whether the role can be separated in the user list.
            </summary>
            <returns>
                <c>true</c> if users of this role are separated in the user list; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IRole.IsMentionable">
            <summary>
                Gets a value that indicates whether the role is mentionable.
            </summary>
            <returns>
                <c>true</c> if this role may be mentioned in messages; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kook.IRole.Permissions">
            <summary>
                Gets the permissions granted to members of this role.
            </summary>
            <returns>
                A <see cref="T:Kook.GuildPermissions"/> struct that this role possesses.
            </returns>
        </member>
        <member name="M:Kook.IRole.ModifyAsync(System.Action{Kook.RoleProperties},Kook.RequestOptions)">
            <summary>
                Modifies this role.
            </summary>
            <remarks>
                This method modifies this role with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Kook.RoleProperties"/>.
            </remarks>
            <param name="func">A delegate containing the properties to modify the role with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="M:Kook.IRole.GetUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of users with this role.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <returns>
                Paged collection of users with this role.
            </returns>
        </member>
        <member name="T:Kook.RoleProperties">
            <summary>
                Properties that are used to modify an <see cref="T:Kook.IRole" /> with the specified changes.
            </summary>
            <seealso cref="M:Kook.IRole.ModifyAsync(System.Action{Kook.RoleProperties},Kook.RequestOptions)" />
        </member>
        <member name="P:Kook.RoleProperties.Name">
            <summary>
                Gets or sets the name of the role.
            </summary>
            <remarks>
                This value may not be set if the role is an @everyone role.
            </remarks>
        </member>
        <member name="P:Kook.RoleProperties.Color">
            <summary>
                Gets or sets the color of the role.
            </summary>
            <remarks>
                This value may not be set if the role is an @everyone role.
            </remarks>
        </member>
        <member name="P:Kook.RoleProperties.Hoist">
            <summary>
                Gets or sets whether or not this role should be displayed independently in the user list.
            </summary>
            <remarks>
                This value may not be set if the role is an @everyone role.
            </remarks>
        </member>
        <member name="P:Kook.RoleProperties.Mentionable">
            <summary>
                Gets or sets whether or not this role can be mentioned.
            </summary>
            <remarks>
                This value may not be set if the role is an @everyone role.
            </remarks>
        </member>
        <member name="P:Kook.RoleProperties.Permissions">
            <summary>
                Gets or sets the role's <see cref="T:Kook.GuildPermission"/>.
            </summary>
        </member>
        <member name="T:Kook.SortMode">
            <summary>
                Specifies the sorting mode.
            </summary>
        </member>
        <member name="F:Kook.SortMode.Ascending">
            <summary>
                The items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:Kook.SortMode.Descending">
            <summary>
                The items are sorted in descending order.
            </summary>
        </member>
        <member name="T:Kook.BoostSubscriptionMetadata">
            <summary>
                A meta data containing boost subscription information.
            </summary>
        </member>
        <member name="P:Kook.BoostSubscriptionMetadata.Since">
            <summary>
                Gets the date and time when this subscription began.
            </summary>
        </member>
        <member name="P:Kook.BoostSubscriptionMetadata.Until">
            <summary>
                Gets the date and time when this subscription will end or ended.
            </summary>
        </member>
        <member name="P:Kook.BoostSubscriptionMetadata.IsValid">
            <summary>
                Gets whether this subscription has not expired.
            </summary>
        </member>
        <member name="P:Kook.BoostSubscriptionMetadata.Count">
            <summary>
                Gets how many boost packs the user used for this subscription.
            </summary>
        </member>
        <member name="T:Kook.ClientType">
            <summary>
                Defines the types of clients a user can be active on.
            </summary>
        </member>
        <member name="F:Kook.ClientType.WebSocket">
            <summary>
                The user is active using a WebSocket connection to the server.
            </summary>
        </member>
        <member name="F:Kook.ClientType.Android">
            <summary>
                The user is active using the Android application.
            </summary>
        </member>
        <member name="F:Kook.ClientType.iOS">
            <summary>
                The user is active using the iOS application.
            </summary>
        </member>
        <member name="T:Kook.FriendState">
            <summary>
                Represents a state of a friend relationship with the current user.
            </summary>
        </member>
        <member name="F:Kook.FriendState.Pending">
            <summary>
                Represents a pending friend request that has not been accepted yet.
            </summary>
        </member>
        <member name="F:Kook.FriendState.Accepted">
            <summary>
                Represents an accepted friend request, where the user has been added to the current user's friend list.
            </summary>
        </member>
        <member name="F:Kook.FriendState.Blocked">
            <summary>
                Represents a blocked friend status, where the user has been blocked by the current user.
            </summary>
        </member>
        <member name="T:Kook.IFriendRequest">
            <summary>
                Represents a generic friend request.
            </summary>
        </member>
        <member name="P:Kook.IFriendRequest.User">
            <summary>
                Gets the user who sent this friend request.
            </summary>
        </member>
        <member name="M:Kook.IFriendRequest.AcceptAsync(Kook.RequestOptions)">
            <summary>
                Accepts this friend request.
            </summary>
            <param name="options"> The options to use when accepting this friend request. </param>
            <returns> A task that represents the asynchronous accept operation. </returns>
        </member>
        <member name="M:Kook.IFriendRequest.DeclineAsync(Kook.RequestOptions)">
            <summary>
                Declines this friend request.
            </summary>
            <param name="options"> The options to use when declining this friend request. </param>
            <returns> A task that represents the asynchronous decline operation. </returns>
        </member>
        <member name="T:Kook.IGuildUser">
            <summary>
                Represents a generic guild user.
            </summary>
        </member>
        <member name="P:Kook.IGuildUser.Nickname">
            <summary>
                Gets the nickname for this user.
            </summary>
            <returns>
                A string representing the nickname of the user; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.DisplayName">
            <summary>
                Gets the displayed name for this user.
            </summary>
            <returns>
                A string representing the display name of the user; If the nickname is null, this will be the username.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.RoleIds">
            <summary>
                Gets a collection of IDs for the roles that this user currently possesses in the guild.
            </summary>
            <remarks>
                This property returns a read-only collection of the identifiers of the roles that this user possesses.
                For WebSocket users, a Roles property can be found in place of this property. Due to the REST
                implementation, only a collection of identifiers can be retrieved instead of the full role objects.
            </remarks>
            <returns>
                A read-only collection of <c>uint</c>, each representing an identifier for a role that
                this user possesses.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.Guild">
            <summary>
                Gets the guild for this user.
            </summary>
            <returns>
                A guild object that this user belongs to.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.GuildId">
            <summary>
                Gets the ID of the guild for this user.
            </summary>
            <returns>
                An <c>ulong</c> representing the identifier of the guild that this user belongs to.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.IsMobileVerified">
            <summary>
                Gets whether the mobile number has been verified for this user.
            </summary>
            <returns>
                <c>true</c> if the mobile number has been verified; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.JoinedAt">
            <summary>
                Gets when this user joined the guild.
            </summary>
            <returns>
                The time of which the user has joined the guild.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.ActiveAt">
            <summary>
                Gets when this user was activated.
            </summary>
            <returns>
                The time of which the user was activated.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.Color">
            <summary>
                Gets the color the user's displayed name is being displayed in.
            </summary>
            <returns>
                A <see cref="P:Kook.IGuildUser.Color"/> struct representing the color the user's display name is being displayed in.
            </returns>
            <remarks>
                <note type="warning">
                    At present, the color of a role may be a solid color or a gradient. See <see cref="P:Kook.IRole.ColorType"/>,
                    which is guaranteed due to the fact that the guild's user list API endpoint returns the color type
                    and the gradient color information if exists. However, the value of this property is fetched
                    from the guild's user list API endpoint, which does not return the color type and the gradient
                    color information. Hence, the value of this property may be incorrect if the color of a role is
                    a gradient.
                </note>
            </remarks>
        </member>
        <member name="P:Kook.IGuildUser.IsOwner">
            <summary>
                Gets whether this user owns the current guild.
            </summary>
            <returns>
                <c>true</c> if this user owns the current guild; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Kook.IGuildUser.GuildPermissions">
            <summary>
                Gets the guild-level permissions for this user.
            </summary>
            <returns>
                A <see cref="T:Kook.GuildPermissions"/> structure for this user, representing what
                permissions this user has in the guild.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.GetPermissions(Kook.IGuildChannel)">
            <summary>
                Gets the level permissions granted to this user to a given channel.
            </summary>
            <param name="channel">The channel to get the permission from.</param>
            <returns>
                A <see cref="T:Kook.ChannelPermissions"/> structure representing the permissions that a user has in the
                specified channel.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.KickAsync(Kook.RequestOptions)">
            <summary>
                Kicks this user from this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous kick operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.ModifyNicknameAsync(System.String,Kook.RequestOptions)">
            <summary>
                Modifies this user's nickname in this guild.
            </summary>
            <remarks>
                This method modifies the nickname of current guild user.
                <note type="warning">
                    The KOOK API will clear the nickname if the nickname is set to
                    the same as the username at present. Hence either setting the nickname
                    to the same as the username or setting the nickname to null will clear
                    the nickname.
                </note>
            </remarks>
            <param name="name">The nickname to modify the user with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.GetBoostSubscriptionsAsync(Kook.RequestOptions)">
            <summary>
                Gets all subscriptions of this user for this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous retrieval operation. The task result contains
                a collection of <see cref="T:Kook.BoostSubscriptionMetadata"/>, each representing the subscriptions information.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.AddRoleAsync(System.UInt32,Kook.RequestOptions)">
            <summary>
                Adds the specified role to this user in the guild.
            </summary>
            <param name="roleId">The role to be added to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role addition operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.AddRoleAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Adds the specified role to this user in the guild.
            </summary>
            <param name="role">The role to be added to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role addition operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{System.UInt32},Kook.RequestOptions)">
            <summary>
                Adds the specified <paramref name="roleIds"/> to this user in the guild.
            </summary>
            <param name="roleIds">The roles to be added to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role addition operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Kook.IRole},Kook.RequestOptions)">
            <summary>
                Adds the specified <paramref name="roles"/> to this user in the guild.
            </summary>
            <param name="roles">The roles to be added to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role addition operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.RemoveRoleAsync(System.UInt32,Kook.RequestOptions)">
            <summary>
                Removes the specified <paramref name="roleId"/> from this user in the guild.
            </summary>
            <param name="roleId">The role to be removed from the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role removal operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.RemoveRoleAsync(Kook.IRole,Kook.RequestOptions)">
            <summary>
                Removes the specified <paramref name="role"/> from this user in the guild.
            </summary>
            <param name="role">The role to be removed from the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role removal operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{System.UInt32},Kook.RequestOptions)">
            <summary>
                Removes the specified <paramref name="roleIds"/> from this user in the guild.
            </summary>
            <param name="roleIds">The roles to be removed from the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role removal operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Kook.IRole},Kook.RequestOptions)">
            <summary>
                Removes the specified <paramref name="roles"/> from this user in the guild.
            </summary>
            <param name="roles">The roles to be removed from the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous role removal operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.MuteAsync(Kook.RequestOptions)">
            <summary>
                Mute this user in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous muting operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.DeafenAsync(Kook.RequestOptions)">
            <summary>
                Deafen this user in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous deafening operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.UnmuteAsync(Kook.RequestOptions)">
            <summary>
                Unmute this user in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous unmuting operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.UndeafenAsync(Kook.RequestOptions)">
            <summary>
                Undeafen this user in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous undeafening operation.
            </returns>
        </member>
        <member name="M:Kook.IGuildUser.GetConnectedVoiceChannelsAsync(Kook.RequestOptions)">
            <summary>
                Gets a collection of voice channels a user.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of
                voice channels the user is connected to.
            </returns>
        </member>
        <member name="T:Kook.IPresence">
            <summary>
                Represents the user's presence status. This may include their online status and their activity.
            </summary>
        </member>
        <member name="P:Kook.IPresence.IsOnline">
            <summary>
                Gets the current status of this user.
            </summary>
        </member>
        <member name="P:Kook.IPresence.ActiveClient">
            <summary>
                Gets the type of the client where this user is currently active.
            </summary>
        </member>
        <member name="T:Kook.ISelfUser">
            <summary>
                Represents the logged-in Kook user.
            </summary>
        </member>
        <member name="P:Kook.ISelfUser.MobilePrefix">
            <summary>
                Gets the mobile prefix of the logged-in user.
            </summary>
        </member>
        <member name="P:Kook.ISelfUser.Mobile">
            <summary>
                Gets the mobile number of the logged-in user.
            </summary>
        </member>
        <member name="P:Kook.ISelfUser.InvitedCount">
            <summary>
                TODO: To be documented.
            </summary>
        </member>
        <member name="P:Kook.ISelfUser.IsMobileVerified">
            <summary>
                Gets whether the mobile number of the logged-in user is verified.
            </summary>
        </member>
        <member name="M:Kook.ISelfUser.StartPlayingAsync(Kook.IGame,Kook.RequestOptions)">
            <summary>
                Starts a new game activity. After this operation, a game activity will be displayed on the currently connected user's profile.
            </summary>
            <param name="game">The game to be played.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for starting a game activity.
            </returns>
        </member>
        <member name="M:Kook.ISelfUser.StartPlayingAsync(Kook.Music,Kook.RequestOptions)">
            <summary>
                Starts a new music activity. After this operation, a music activity will be displayed on the currently connected user's profile.
            </summary>
            <param name="music">The music being listened to be showed.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for starting a music activity.
            </returns>
        </member>
        <member name="M:Kook.ISelfUser.StopPlayingAsync(Kook.ActivityType,Kook.RequestOptions)">
            <summary>
                Stops an activity. After this operation, the activity on the currently connected user's profile will disappear.
            </summary>
            <param name="type">The type of the activity to stop</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for stopping an activity.
            </returns>
        </member>
        <member name="T:Kook.IUser">
            <summary>
                Represents a generic user.
            </summary>
        </member>
        <member name="P:Kook.IUser.Username">
            <summary>
                Gets the username for this user.
            </summary>
        </member>
        <member name="P:Kook.IUser.IdentifyNumber">
            <summary>
                Gets the per-username unique ID for this user.
            </summary>
        </member>
        <member name="P:Kook.IUser.IdentifyNumberValue">
            <summary>
                Gets the per-username unique ID for this user.
            </summary>
        </member>
        <member name="P:Kook.IUser.IsBot">
            <summary>
                Gets whether this user is a bot; <c>null</c> if unknown.
            </summary>
        </member>
        <member name="P:Kook.IUser.IsBanned">
            <summary>
                Gets whether this user is banned; <c>null</c> if unknown.
            </summary>
        </member>
        <member name="P:Kook.IUser.HasBuff">
            <summary>
                Gets whether this user has subscribed to BUFF; <c>null</c> if unknown.
            </summary>
        </member>
        <member name="P:Kook.IUser.HasAnnualBuff">
            <summary>
                Gets whether this user's BUFF subscription is annual; <c>null</c> if unknown.
            </summary>
        </member>
        <member name="P:Kook.IUser.Avatar">
            <summary>
                Gets the link to this user's avatar.
            </summary>
        </member>
        <member name="P:Kook.IUser.BuffAvatar">
            <summary>
                Gets the link to this user's BUFF avatar.
            </summary>
        </member>
        <member name="P:Kook.IUser.Banner">
            <summary>
                Gets the link to this user's banner.
            </summary>
        </member>
        <member name="P:Kook.IUser.IsDenoiseEnabled">
            <summary>
                Gets whether this user enabled denoise feature; <c>null</c> if unknown.
            </summary>
        </member>
        <member name="P:Kook.IUser.UserTag">
            <summary>
                Get the tag this user has.
            </summary>
        </member>
        <member name="P:Kook.IUser.Nameplates">
            <summary>
                Gets the nameplates this user has.
            </summary>
        </member>
        <member name="P:Kook.IUser.IsSystemUser">
            <summary>
                Gets whether this user is a system user.
            </summary>
        </member>
        <member name="M:Kook.IUser.CreateDMChannelAsync(Kook.RequestOptions)">
            <summary>
                Creates the direct message channel of this user.
            </summary>
            <remarks>
                This method is used to obtain or create a channel used to send a direct message.
                <note type="warning">
                     In event that the current user cannot send a message to the target user, a channel can and will
                     still be created by Kook. However, attempting to send a message will yield a
                     <see cref="T:Kook.Net.HttpException"/> with a 403 as its
                     <see cref="P:Kook.Net.HttpException.HttpCode"/>. There are currently no official workarounds by
                     Kook.
                </note>
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for getting or creating a DM channel. The task result
                contains the DM channel associated with this user.
            </returns>
        </member>
        <member name="M:Kook.IUser.GetIntimacyAsync(Kook.RequestOptions)">
            <summary>
                Gets the intimacy information with this user.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for getting the intimacy information. The task result
                contains the intimacy information associated with this user.
            </returns>
        </member>
        <member name="M:Kook.IUser.UpdateIntimacyAsync(System.Action{Kook.IntimacyProperties},Kook.RequestOptions)">
            <summary>
                Updates the intimacy information with this user.
            </summary>
            <param name="func">A delegate containing the properties to modify the <see cref="T:Kook.IIntimacy"/> with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>A task that represents the asynchronous operation for updating the intimacy information.</returns>
        </member>
        <member name="M:Kook.IUser.BlockAsync(Kook.RequestOptions)">
            <summary>
                Gets the friend state with this user.
            </summary>
            <param name="options"> The options to be used when sending the request. </param>
            <returns> A task that represents the asynchronous operation for getting the friend state. </returns>
        </member>
        <member name="M:Kook.IUser.UnblockAsync(Kook.RequestOptions)">
            <summary>
                Gets the friend state with this user.
            </summary>
            <param name="options"> The options to be used when sending the request. </param>
            <returns> A task that represents the asynchronous operation for getting the friend state. </returns>
        </member>
        <member name="M:Kook.IUser.RequestFriendAsync(Kook.RequestOptions)">
            <summary>
                Sends a friend request to this user.
            </summary>
            <param name="options"> The options to be used when sending the request. </param>
            <returns> A task that represents the asynchronous operation for sending the friend request. </returns>
        </member>
        <member name="M:Kook.IUser.RemoveFriendAsync(Kook.RequestOptions)">
            <summary>
                Gets the friend state with this user.
            </summary>
            <param name="options"> The options to be used when sending the request. </param>
            <returns> A task that represents the asynchronous operation for getting the friend state. </returns>
        </member>
        <member name="T:Kook.IVoiceState">
            <summary>
                Represents a user's voice connection status.
            </summary>
        </member>
        <member name="P:Kook.IVoiceState.IsDeafened">
            <summary>
                Gets a value that indicates whether this user is deafened by the guild.
            </summary>
            <returns>
                <c>true</c> if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild;
                otherwise <c>false</c>; <c>null</c> if unknown.
            </returns>
        </member>
        <member name="P:Kook.IVoiceState.IsMuted">
            <summary>
                Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the
                guild.
            </summary>
            <returns>
                <c>true</c> if this user is muted by the guild; otherwise <c>false</c>; <c>null</c> if unknown.
            </returns>
        </member>
        <member name="P:Kook.IVoiceState.VoiceChannel">
            <summary>
                Gets the voice channel this user is currently in.
            </summary>
            <returns>
                A generic voice channel object representing the voice channel that the user is currently in; <c>null</c>
                if none.
            </returns>
        </member>
        <member name="T:Kook.Nameplate">
            <summary>
                Representing a nameplate an <see cref="T:Kook.IUser"/> can have.
            </summary>
        </member>
        <member name="P:Kook.Nameplate.Name">
            <summary>
                Gets the name of the nameplate given to user.
            </summary>
        </member>
        <member name="P:Kook.Nameplate.Type">
            <summary>
                Gets the type of the nameplate given to user.
            </summary>
        </member>
        <member name="P:Kook.Nameplate.Icon">
            <summary>
                Gets the resource uri of the icon of the nameplate given to user.
            </summary>
        </member>
        <member name="P:Kook.Nameplate.Tips">
            <summary>
                Gets the tips of the nameplate given to user.
            </summary>
        </member>
        <member name="M:Kook.Nameplate.Create(System.String,System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.Nameplate"/> class.
            </summary>
            <param name="name"> The name of the nameplate given to user. </param>
            <param name="type"> The type of the nameplate given to user. </param>
            <param name="icon"> The resource uri of the icon of the nameplate given to user. </param>
            <param name="tips"> The tips of the nameplate given to user. </param>
            <returns> A <see cref="T:Kook.Nameplate"/> representing the given parameters. </returns>
        </member>
        <member name="M:Kook.Nameplate.Equals(Kook.Nameplate)">
            <inheritdoc />
        </member>
        <member name="M:Kook.Nameplate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.Nameplate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.RequestFriendSource">
            <summary>
                Represents a source from which a friend request is sent.
            </summary>
        </member>
        <member name="F:Kook.RequestFriendSource.FullQualification">
            <summary>
                Represents the friend request is sent via the user's full qualification,
                such as <c>username#1234</c>.
            </summary>
        </member>
        <member name="F:Kook.RequestFriendSource.Guild">
            <summary>
                Represents the friend request is sent via a guild where the user and
                the current user are in.
            </summary>
        </member>
        <member name="T:Kook.SearchGuildMemberProperties">
            <summary>
                Properties that are used to search for a <see cref="T:Kook.IGuildUser" /> in a <see cref="T:Kook.IGuild" />.
            </summary>
            <seealso cref="M:Kook.IGuild.SearchUsersAsync(System.Action{Kook.SearchGuildMemberProperties},System.Int32,Kook.CacheMode,Kook.RequestOptions)"/>
        </member>
        <member name="P:Kook.SearchGuildMemberProperties.SearchName">
            <summary>
                Gets or sets the name of the user to be searched for;
                <c>null</c> to not search via a name.
            </summary>
        </member>
        <member name="P:Kook.SearchGuildMemberProperties.RoleId">
            <summary>
                Gets or sets the ID of the role the user must have to be searched for;
                <c>null</c> to not search via a role.
            </summary>
        </member>
        <member name="P:Kook.SearchGuildMemberProperties.IsMobileVerified">
            <summary>
                Gets or sets whether the user must have his/her mobile verified to be searched for;
                <c>null</c> to not search via a verified status.
            </summary>
        </member>
        <member name="P:Kook.SearchGuildMemberProperties.SortedByActiveTime">
            <summary>
                Gets or sets whether and how the searching results should be sorted by the activating time of the user;
                <c>null</c> to not sort by active time.
            </summary>
        </member>
        <member name="P:Kook.SearchGuildMemberProperties.SortedByJoinTime">
            <summary>
                Gets or sets whether and how the searching results should be sorted by the joining time of the user;
                <c>null</c> to not sort by joining time.
            </summary>
        </member>
        <member name="T:Kook.UserTag">
            <summary>
                Representing a tag an <see cref="T:Kook.IUser"/> can have.
            </summary>
        </member>
        <member name="P:Kook.UserTag.Color">
            <summary>
                Gets the color of the tag given to user.
            </summary>
            <returns>
                A <see cref="P:Kook.UserTag.Color"/> struct representing the color of this tag.
            </returns>
        </member>
        <member name="P:Kook.UserTag.BackgroundColor">
            <summary>
                Gets the background color of the tag given to user.
            </summary>
            <returns>
                A <see cref="T:Kook.AlphaColor"/> struct representing the background color of this tag.
            </returns>
        </member>
        <member name="P:Kook.UserTag.Text">
            <summary>
                Gets the text of the tag given to user.
            </summary>
            <returns>
                A <c>string</c> representing the text of this tag.
            </returns>
        </member>
        <member name="M:Kook.UserTag.Create(Kook.Color,Kook.AlphaColor,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.UserTag"/> class.
            </summary>
            <param name="color">
                The color of the tag given to user.
            </param>
            <param name="backgroundColor">
                The background color of the tag given to user.
            </param>
            <param name="text">
                The text of the tag given to user.
            </param>
            <returns>
                A <see cref="T:Kook.UserTag"/> representing the given parameters.
            </returns>
        </member>
        <member name="M:Kook.UserTag.Equals(Kook.UserTag)">
            <inheritdoc />
        </member>
        <member name="M:Kook.UserTag.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.UserTag.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kook.AsyncEnumerableExtensions">
            <summary> An extension class for squashing <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>. </summary>
            <remarks>
                This set of extension methods will squash an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> into a
                single <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is often associated with requests that has a
                set limit when requesting.
            </remarks>
        </member>
        <member name="M:Kook.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary> Flattens the specified pages into one <see cref="T:System.Collections.Generic.IEnumerable`1"/> asynchronously. </summary>
        </member>
        <member name="M:Kook.AsyncEnumerableExtensions.Flatten``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary> Flattens the specified pages into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>. </summary>
        </member>
        <member name="T:Kook.CardExtensions">
            <summary>
                Provides extension methods for <see cref="T:Kook.IElement"/>, <see cref="T:Kook.IModule"/> and <see cref="T:Kook.ICard"/>.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.IElement)">
            <summary>
                Converts the <see cref="T:Kook.IElement"/> to a <see cref="T:Kook.IElementBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.PlainTextElement)">
            <summary>
                Converts the <see cref="T:Kook.PlainTextElement"/> to a <see cref="T:Kook.PlainTextElementBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.KMarkdownElement)">
            <summary>
                Converts the <see cref="T:Kook.KMarkdownElement"/> to a <see cref="T:Kook.KMarkdownElementBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ImageElement)">
            <summary>
                Converts the <see cref="T:Kook.ImageElement"/> to a <see cref="T:Kook.ImageElementBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ButtonElement)">
            <summary>
                Converts the <see cref="T:Kook.ButtonElement"/> to a <see cref="T:Kook.ButtonElementBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ParagraphStruct)">
            <summary>
                Converts the <see cref="T:Kook.ParagraphStruct"/> to a <see cref="T:Kook.ParagraphStructBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.IModule)">
            <summary>
                Converts the <see cref="T:Kook.IModule"/> to a <see cref="T:Kook.IModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.HeaderModule)">
            <summary>
                Converts the <see cref="T:Kook.HeaderModule"/> to a <see cref="T:Kook.HeaderModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.SectionModule)">
            <summary>
                Converts the <see cref="T:Kook.SectionModule"/> to a <see cref="T:Kook.SectionModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ImageGroupModule)">
            <summary>
                Converts the <see cref="T:Kook.ImageGroupModule"/> to a <see cref="T:Kook.ImageGroupModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ContainerModule)">
            <summary>
                Converts the <see cref="T:Kook.ContainerModule"/> to a <see cref="T:Kook.ContainerModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ActionGroupModule)">
            <summary>
                Converts the <see cref="T:Kook.ActionGroupModule"/> to a <see cref="T:Kook.ActionGroupModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ContextModule)">
            <summary>
                Converts the <see cref="T:Kook.ContextModule"/> to a <see cref="T:Kook.ContextModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.DividerModule)">
            <summary>
                Converts the <see cref="T:Kook.DividerModule"/> to a <see cref="T:Kook.DividerModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.FileModule)">
            <summary>
                Converts the <see cref="T:Kook.FileModule"/> to a <see cref="T:Kook.FileModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.AudioModule)">
            <summary>
                Converts the <see cref="T:Kook.AudioModule"/> to a <see cref="T:Kook.AudioModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.VideoModule)">
            <summary>
                Converts the <see cref="T:Kook.VideoModule"/> to a <see cref="T:Kook.VideoModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.CountdownModule)">
            <summary>
                Converts the <see cref="T:Kook.CountdownModule"/> to a <see cref="T:Kook.CountdownModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.InviteModule)">
            <summary>
                Converts the <see cref="T:Kook.InviteModule"/> to a <see cref="T:Kook.InviteModuleBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.ICard)">
            <summary>
                Converts the <see cref="T:Kook.ICard"/> to a <see cref="T:Kook.ICardBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="M:Kook.CardExtensions.ToBuilder(Kook.Card)">
            <summary>
                Converts the <see cref="T:Kook.Card"/> to a <see cref="T:Kook.CardBuilder"/> with the same properties.
            </summary>
        </member>
        <member name="T:Kook.ChannelExtensions">
            <summary>
                Provides extension methods for <see cref="T:Kook.IChannel"/>.
            </summary>
        </member>
        <member name="M:Kook.ChannelExtensions.GetChannelType(Kook.IChannel)">
            <summary>
                Attempts to get the <see cref="T:Kook.ChannelType"/> based off of the channel's interfaces.
            </summary>
            <param name="channel">The channel to get the type of.</param>
            <returns>The <see cref="T:Kook.ChannelType"/> of the channel if found, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Kook.ChannelExtensions.GetJumpUrl(Kook.IChannel)">
            <summary>
                Gets a URL that jumps to the channel.
            </summary>
            <param name="channel">The channel to jump to.</param>
            <returns>
                A string that contains a URL for jumping to the message in chat.
            </returns>
        </member>
        <member name="T:Kook.MessageExtensions">
            <summary>
                Provides extension methods for <see cref="T:Kook.IMessage" />.
            </summary>
        </member>
        <member name="M:Kook.MessageExtensions.GetJumpUrl(Kook.IMessage)">
            <summary>
                Gets a URL that jumps to the message.
            </summary>
            <param name="msg">The message to jump to.</param>
            <returns>
                A string that contains a URL for jumping to the message in chat.
            </returns>
        </member>
        <member name="M:Kook.MessageExtensions.AddReactionsAsync(Kook.IUserMessage,System.Collections.Generic.IEnumerable{Kook.IEmote},Kook.RequestOptions)">
            <summary>
                Add multiple reactions to a message.
            </summary>
            <remarks>
                This method does not bulk add reactions! It will send a request for each reaction included.
            </remarks>
            <example>
            <code language="cs">
            IEmote A = new Emoji("🅰");
            IEmote B = new Emoji("🅱");
            await msg.AddReactionsAsync(new[] { A, B });
            </code>
            </example>
            <param name="msg">The message to add reactions to.</param>
            <param name="reactions">An array of reactions to add to the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for adding a reaction to this message.
            </returns>
            <seealso cref="M:Kook.IMessage.AddReactionAsync(Kook.IEmote,Kook.RequestOptions)"/>
            <seealso cref="T:Kook.IEmote"/>
        </member>
        <member name="M:Kook.MessageExtensions.RemoveReactionsAsync(Kook.IUserMessage,Kook.IUser,System.Collections.Generic.IEnumerable{Kook.IEmote},Kook.RequestOptions)">
            <summary>
                Remove multiple reactions from a message.
            </summary>
            <remarks>
                This method does not bulk remove reactions! It will send a request for each reaction included.
            </remarks>
            <example>
            <code language="cs">
            await msg.RemoveReactionsAsync(currentUser, new[] { A, B });
            </code>
            </example>
            <param name="msg">The message to remove reactions from.</param>
            <param name="user">The user who removed the reaction.</param>
            <param name="reactions">An array of reactions to remove from the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous operation for removing a reaction to this message.
            </returns>
            <seealso cref="M:Kook.IMessage.RemoveReactionAsync(Kook.IEmote,Kook.IUser,Kook.RequestOptions)"/>
            <seealso cref="T:Kook.IEmote"/>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyFileAsync(Kook.IUserMessage,System.String,System.String,Kook.AttachmentType,System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends an inline reply of file that references a message.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="path">The file path of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="isQuote"> <c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>. </param>
            <param name="isEphemeral"> <c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>. </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyFileAsync(Kook.IUserMessage,System.IO.Stream,System.String,Kook.AttachmentType,System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends an inline reply of file that references a message.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="stream">Stream of the file to be sent.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="isQuote"> <c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>. </param>
            <param name="isEphemeral"> <c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>. </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyFileAsync(Kook.IUserMessage,Kook.FileAttachment,System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends an inline reply of file that references a message.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="attachment">The attachment containing the file.</param>
            <param name="isQuote"> <c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>. </param>
            <param name="isEphemeral"> <c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>. </param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyTextAsync(Kook.IUserMessage,System.String,System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends an inline reply of text that references a message.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="content">Contents of the message.</param>
            <param name="isQuote"><c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>.</param>
            <param name="isEphemeral"><c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>.</param>
            <param name="options">The request options for this <c>async</c> request.</param>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyCardsAsync(Kook.IUserMessage,System.Collections.Generic.IEnumerable{Kook.ICard},System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends a card message to the source channel.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="cards">The cards to be sent.</param>
            <param name="isQuote"><c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>.</param>
            <param name="isEphemeral"><c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>.</param>
            <param name="options">The request options for this <c>async</c> request.</param>
        </member>
        <member name="M:Kook.MessageExtensions.ReplyCardAsync(Kook.IUserMessage,Kook.ICard,System.Boolean,System.Boolean,Kook.RequestOptions)">
            <summary>
                Sends a card message to the source channel.
            </summary>
            <param name="message">The message that is being replied on.</param>
            <param name="card">The card to be sent.</param>
            <param name="isQuote"><c>true</c> if the source message will be quoted in this message; otherwise, <c>false</c>.</param>
            <param name="isEphemeral"><c>true</c> if the message to be sent can be seen only by the command invoker; otherwise, <c>false</c>.</param>
            <param name="options">The request options for this <c>async</c> request.</param>
        </member>
        <member name="T:Kook.UserExtensions">
            <summary> An extension class for various Kook user objects. </summary>
        </member>
        <member name="M:Kook.UserExtensions.SendFileAsync(Kook.IUser,System.String,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="path">The file path of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.UserExtensions.SendFileAsync(Kook.IUser,System.IO.Stream,System.String,Kook.AttachmentType,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="stream">The stream of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="type">The type of the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.UserExtensions.SendFileAsync(Kook.IUser,Kook.FileAttachment,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a file via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="attachment">The attachment containing the file.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.UserExtensions.SendTextAsync(Kook.IUser,System.String,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a text message via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="content">The KMarkdown content to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="M:Kook.UserExtensions.SendCardsAsync(Kook.IUser,System.Collections.Generic.IEnumerable{Kook.ICard},Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message message via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="cards">The cards to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The request options for this <c>async</c> request.</param>
        </member>
        <member name="M:Kook.UserExtensions.SendCardAsync(Kook.IUser,Kook.ICard,Kook.IQuote,Kook.RequestOptions)">
            <summary>
                Sends a card message message via DM.
            </summary>
            <param name="user">The user to send the DM to.</param>
            <param name="card">The card to be sent.</param>
            <param name="quote">The message quote to be included. Used to reply to specific messages.</param>
            <param name="options">The request options for this <c>async</c> request.</param>
        </member>
        <member name="M:Kook.UserExtensions.BanAsync(Kook.IGuildUser,System.Int32,System.String,Kook.RequestOptions)">
            <summary>
                Bans the user from the guild and optionally prunes their recent messages.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="pruneDays">The number of days to remove messages from this <paramref name="user"/> for - must be between [0, 7]</param>
            <param name="reason">The reason of the ban to be written in the audit log.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pruneDays" /> is not between 0 to 7.</exception>
            <returns>
                A task that represents the asynchronous operation for banning a user.
            </returns>
        </member>
        <member name="T:Kook.Format">
            <summary>
                A helper class for formatting characters.
            </summary>
        </member>
        <member name="M:Kook.Format.Bold(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with bold formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the formatted text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>*</c> with <c>\*</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Italics(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with italics formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the formatted text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>*</c> with <c>\*</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.BoldItalics(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with bold italics formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the formatted text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>*</c> with <c>\*</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Strikethrough(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with strike-through formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the formatted text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>~</c> with <c>\~</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Colorize(System.String,Kook.TextTheme,System.Boolean)">
            <summary> Returns a markdown-formatted string colored with the specified <see cref="T:Kook.TextTheme"/>. </summary>
            <param name="text">The text to colorize.</param>
            <param name="theme"> The theme to colorize the text with. </param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the colorized text.</returns>
            <remarks>
                <note type="warning">
                    Colored text is only supported in cards.
                </note>
            </remarks>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>(</c> and <c>)</c> with <c>\(</c> and <c>\)</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Url(System.String,System.String,System.Boolean)">
            <summary> Returns a markdown-formatted URL. </summary>
            <param name="text">The text to format.</param>
            <param name="url"> The URL to format. </param>
            <param name="sanitize"> Whether to sanitize the text and URL. </param>
            <returns>Gets the formatted URL.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>[</c> and <c>]</c> with <c>\[</c> and <c>\]</c>, and the URL by replacing all occurrences of
                <c>(</c> and <c>)</c> with <c>\(</c> and <c>\)</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Url(System.String,System.Uri,System.Boolean)">
            <inheritdoc cref="M:Kook.Format.Url(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Kook.Format.Sanitize(System.String,System.String[])">
            <summary> Sanitizes the string, safely escaping any Markdown sequences. </summary>
            <param name="text">The text to sanitize.</param>
            <param name="sensitiveCharacters"> The characters to sanitize. </param>
            <returns>Gets the sanitized text.</returns>
            <remarks>
                If no sensitive characters are specified, the default sensitive characters are used.
                The default sensitive characters are: <c>\</c>, <c>*</c>, <c>~</c>, <c>`</c>, <c>:</c>, <c>-</c>, <c>]</c>, <c>)</c>, <c>&gt;</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Quote(System.String,System.Boolean)">
            <summary>
                Formats a string as split quotes seperated by multiple new lines.
            </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize"> Whether to sanitize the text. </param>
            <returns>Gets the formatted quote text.</returns>
            <remarks>
                <note type="warning">
                    Due to the mechanism of the KOOK KMarkdown renderer, this method recognizes multiple text blocks
                    based on two or more consecutive line breaks, and formats each block as a quote. For each text block,
                    a greater than sign (<c>&gt;</c>) and a space is inserted at the beginning of the string, and a
                    zero-width joiner (<c>\u200d</c>) is inserted when the beginning of the block is a whitespace
                    character, to ensure proper display of the quote. When the user copies the text inside
                    the quote, they will not copy this special character. However, if you obtain the
                    message text from the server through message-related APIs, it will contain the
                    special character inserted by this method. An additional line break is also appended
                    at the end of the block to correct any missing line breaks caused by the quote formatting.
                    The appended line break is consistent with the style of the nearby line breaks.
                    To quote the entire text as a whole, use <see cref="M:Kook.Format.BlockQuote(System.String,System.Boolean)"/> instead.
                </note>
                <para>
                    Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                    <c>&gt;</c> with <c>\&gt;</c>.
                </para>
            </remarks>
            <seealso cref="M:Kook.Format.BlockQuote(System.String,System.Boolean)"/>
        </member>
        <member name="M:Kook.Format.Underline(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with underline formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize">Whether to sanitize the text.</param>
            <returns>Gets the formatted underlined text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>(</c> and <c>)</c> with <c>\(</c> and <c>\)</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Spoiler(System.String,System.Boolean)">
            <summary> Returns a string with spoiler formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize">Whether to sanitize the text.</param>
            <returns>Gets the formatted spoiled text.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>(</c> and <c>)</c> with <c>\(</c> and <c>\)</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.Code(System.String,System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with inline code or code block formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="language"> The language of the code block. </param>
            <param name="sanitize">Whether to sanitize the text.</param>
            <returns>Gets the formatted inline code or code block.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>`</c> with <c>\`</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.CodeBlock(System.String,System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with code block formatting. </summary>
            <param name="text">The text to format.</param>
            <param name="language"> The language of the code block. </param>
            <param name="sanitize">Whether to sanitize the text.</param>
            <returns>Gets the formatted code block.</returns>
            <remarks>
                Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing all occurrences of
                <c>`</c> with <c>\`</c>.
            </remarks>
        </member>
        <member name="M:Kook.Format.BlockQuote(System.String,System.Boolean)">
            <summary>
                Formats a string as a block quote as a whole.
            </summary>
            <param name="text">The text to format.</param>
            <param name="sanitize">Whether to sanitize the text.</param>
            <returns>Gets the formatted block quote text.</returns>
            <remarks>
                <note type="warning">
                    Due to the working mechanism of the KOOK KMarkdown renderer, this method will
                    insert zero-width joiner special characters (\u200d) before the first empty line
                    and between each empty line in the text by default, so that the renderer can
                    display the entire text as a single quote. When the user copies the text inside
                    the quote, they will not copy this special character. However, if you obtain the
                    message text from the server through message-related APIs, it will contain the
                    special character inserted by this method. If you want to disable this feature,
                    please use <see cref="M:Kook.Format.Quote(System.String,System.Boolean)"/> instead.
                </note>
                <para>
                    Set <paramref name="sanitize"/> to <c>true</c> will sanitize the text by replacing
                    all occurrences of <c>&gt;</c> with <c>\&gt;</c>.
                </para>
            </remarks>
            <seealso cref="M:Kook.Format.Quote(System.String,System.Boolean)"/>
        </member>
        <member name="M:Kook.Format.StripMarkDown(System.String)">
            <summary>
            Remove Kook supported markdown from text.
            </summary>
            <param name="text">The to remove markdown from.</param>
            <returns>Gets the unformatted text.</returns>
        </member>
        <member name="M:Kook.Format.UsernameAndIdentifyNumber(Kook.IUser,System.Boolean)">
            <summary>
                Formats a user's username + identify number while maintaining bidirectional unicode
            </summary>
            <param name="user">The user whose username and identify number to format.</param>
            <param name="doBidirectional">To format the string in bidirectional unicode or not.</param>
            <returns>The username#identifyNumber.</returns>
        </member>
        <member name="T:Kook.IKookClient">
            <summary>
                Represents a generic Kook client.
            </summary>
        </member>
        <member name="P:Kook.IKookClient.ConnectionState">
            <summary>
                Gets the current state of connection.
            </summary>
        </member>
        <member name="P:Kook.IKookClient.CurrentUser">
            <summary>
                Gets the currently logged-in user.
            </summary>
        </member>
        <member name="P:Kook.IKookClient.TokenType">
            <summary>
                Gets the token type of the logged-in user.
            </summary>
        </member>
        <member name="M:Kook.IKookClient.StartAsync">
            <summary>
                Starts the connection between Kook and the client..
            </summary>
            <remarks>
                This method will initialize the connection between the client and Kook.
                <note type="important">
                    This method will immediately return after it is called, as it will initialize the connection on
                    another thread.
                </note>
            </remarks>
            <returns>
                A task that represents the asynchronous start operation.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.StopAsync">
            <summary>
                Stops the connection between Kook and the client.
            </summary>
            <returns>
                A task that represents the asynchronous stop operation.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetChannelAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a generic channel.
            </summary>
            <param name="id">The identifier of the channel.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the channel associated
                with the identifier; <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetDMChannelAsync(System.Guid,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a direct message channel.
            </summary>
            <param name="chatCode">The identifier of the channel.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of direct-message channels that the user currently partakes in.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetDMChannelsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of direct message channels opened in this session.
            </summary>
            <remarks>
                This method returns a collection of currently opened direct message channels.
                <note type="warning">
                    This method will not return previously opened DM channels outside of the current session! If you
                    have just started the client, this may return an empty collection.
                </note>
            </remarks>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of direct-message channels that the user currently partakes in.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetGuildAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a guild.
            </summary>
            <param name="id">The guild identifier.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the guild associated
                with the identifier; <c>null</c> when the guild cannot be found.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetGuildsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a collection of guilds that the user is currently in.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of guilds that the current user is in.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetUserAsync(System.UInt64,Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets a user.
            </summary>
            <param name="id">The identifier of the user.</param>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the user associated with
                the identifier; <c>null</c> if the user is not found.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetUserAsync(System.String,System.String,Kook.RequestOptions)">
            <summary>
                Gets a user.
            </summary>
            <param name="username">The name of the user (e.g. `Still`).</param>
            <param name="identifyNumber">The identify value of the user (e.g. `2876`).</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the user associated with
                the name and the identifyNumber; <c>null</c> if the user is not found.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetFriendsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets friends.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options"> The options to be used when sending the request. </param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of users
                that are friends with the current user.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetFriendRequestsAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets friend requests.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options"> The options to be used when sending the request. </param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of users
                that requested to be friends with the current user.
            </returns>
        </member>
        <member name="M:Kook.IKookClient.GetBlockedUsersAsync(Kook.CacheMode,Kook.RequestOptions)">
            <summary>
                Gets blocked users.
            </summary>
            <param name="mode">The <see cref="T:Kook.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options"> The options to be used when sending the request. </param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of users
                that are blocked by the current user.
            </returns>
        </member>
        <member name="T:Kook.KookConfig">
            <summary>
                Defines various behaviors of Kook.Net.
            </summary>
        </member>
        <member name="F:Kook.KookConfig.APIVersion">
            <summary>
                Returns the API version Kook.Net uses.
            </summary>
            <returns>
                An int representing the API version that Kook.Net uses to communicate with Kook.
                <para>A list of available API version can be seen on the official
                <see href="https://developer.kookapp.cn/doc/reference">Kook API documentation</see>
                .</para>
            </returns>
        </member>
        <member name="P:Kook.KookConfig.Version">
            <summary>
                Gets the Kook.Net version, including the build number.
            </summary>
            <returns>
                A string containing the detailed version information, including its build number; <c>Unknown</c> when
                the version fails to be fetched.
            </returns>
        </member>
        <member name="P:Kook.KookConfig.UserAgent">
            <summary>
                Gets the user agent that Kook.Net uses in its clients.
            </summary>
            <returns>
                The user agent used in each Kook.Net request.
            </returns>
        </member>
        <member name="P:Kook.KookConfig.AcceptLanguage">
            <summary>
                Gets the accept language that Kook.Net uses in its clients.
            </summary>
            <returns>
                The accept language used in each Kook.Net request.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.APIUrl">
            <summary>
                Returns the base Kook API URL.
            </summary>
            <returns>
                The Kook API URL using <see cref="F:Kook.KookConfig.APIVersion"/>.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.DefaultRequestTimeout">
            <summary>
                Returns the default timeout for requests.
            </summary>
            <returns>
                The amount of time it takes in milliseconds before a request is timed out.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MaxMessageSize">
            <summary>
                Returns the max length for a Kook message.
            </summary>
            <returns>
                The maximum length of a message allowed by Kook.
            </returns>
            <remarks>
                <note type="warning">
                    The accurate value of this property is not known.
                    It is set to <c>int.MaxValue</c> at current so that it does not work.
                </note>
            </remarks>
        </member>
        <member name="F:Kook.KookConfig.MaxUsersPerBatch">
            <summary>
                Returns the max users allowed to be in a request.
            </summary>
            <returns>
                The maximum number of users that can be gotten per-batch.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MaxMessagesPerBatch">
            <summary>
                Returns the max messages allowed to be in a request.
            </summary>
            <returns>
                The maximum number of messages that can be gotten per-batch.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MaxItemsPerBatchByDefault">
            <summary>
                Returns the max items allowed to be in a request by default.
            </summary>
            <returns>
                The maximum number of items that can be gotten per-batch by default.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MinNicknameSize">
            <summary>
                Returns the min length for a Kook guild nickname.
            </summary>
            <returns>
                The minimum length of a nickname allowed by Kook.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MaxNicknameSize">
            <summary>
                Returns the max length for a Kook guild nickname.
            </summary>
            <returns>
                The maximum length of a nickname allowed by Kook.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MinIntimacyScore">
            <summary>
                Returns the min value for a Kook intimacy score.
            </summary>
            <returns>
                The minimum value of an intimacy score allowed by Kook.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.MaxIntimacyScore">
            <summary>
                Returns the max value for a Kook intimacy score.
            </summary>
            <returns>
                The maximum value of an intimacy score allowed by Kook.
            </returns>
        </member>
        <member name="F:Kook.KookConfig.BoostPackDuration">
            <summary>
                Returns the duration of a Kook boost pack.
            </summary>
        </member>
        <member name="P:Kook.KookConfig.DefaultRetryMode">
            <summary>
                Gets or sets how a request should act in the case of an error, by default.
            </summary>
            <returns>
                The currently set <see cref="T:Kook.RetryMode"/>.
            </returns>
        </member>
        <member name="P:Kook.KookConfig.DefaultRatelimitCallback">
            <summary>
                Gets or sets the default callback for rate limits.
            </summary>
            <remarks>
                This property is mutually exclusive with <see cref="P:Kook.RequestOptions.RatelimitCallback"/>.
            </remarks>
        </member>
        <member name="P:Kook.KookConfig.LogLevel">
            <summary>
                Gets or sets the minimum log level severity that will be sent to the Log event.
            </summary>
            <returns>
                The currently set <see cref="T:Kook.LogSeverity"/> for logging level.
            </returns>
        </member>
        <member name="P:Kook.KookConfig.DisplayInitialLog">
            <summary>
                Gets or sets whether the initial log entry should be printed.
            </summary>
            <remarks>
                If set to <c>true</c>, the library will attempt to print the current version of the library, as well as
                the API version it uses on startup.
            </remarks>
        </member>
        <member name="F:Kook.KookConfig.SystemMessageAuthorID">
            <summary>
                Gets the user identifier of the author who sends system messages from Kook official.
            </summary>
        </member>
        <member name="P:Kook.KookConfig.FormatUsersInBidirectionalUnicode">
            <summary>
                Gets or sets if the Rest/Socket user <see cref="M:System.Object.ToString"/> override formats the string in respect to bidirectional unicode.
            </summary>
            <remarks>
                By default, the returned value will be "?Discord?#1234", to work with bidirectional usernames.
                <br/>
                If set to <c>false</c>, this value will be "Discord#1234".
            </remarks>
        </member>
        <member name="T:Kook.KookErrorCode">
            <summary>
                Represents a set of json error codes received by Kook.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.Success">
            <summary>
                The operation was successful.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.GeneralError">
            <summary>
                The operation failed due to an unspecified error.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.MissingArgument">
            <summary>
                The operation failed due to an missing argument.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.InvalidAuthenticationToken">
            <summary>
                The operation failed due to an invalid authentication token.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.TokenVerificationFailed">
            <summary>
                The operation failed because the authentication token verification failed.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.TokenExpired">
            <summary>
                The operation failed because the authentication token has expired.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.RequestEntityTooLarge">
            <summary>
                The operation failed because the request was too large.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.MissingResumeArgument">
            <summary>
                The KOOK gateway requested a reconnect due to missing resume arguments.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.SessionExpired">
            <summary>
                The KOOK gateway requested a reconnect because the session has expired.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.InvalidSequenceNumber">
            <summary>
                The KOOK gateway requested a reconnect due to an invalid sequence number.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.MissingPermissions">
            <summary>
                The operation failed due to missing permissions.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.HasBeenFriend">
            <summary>
                The operation failed because the user has become a friend of the current user.
            </summary>
        </member>
        <member name="F:Kook.KookErrorCode.RequestFriendTooFast">
            <summary>
                The operation failed because the current user has requested to be friends with the user too fast.
            </summary>
        </member>
        <member name="T:Kook.KookJsonError">
            <summary>
                Represents a generic parsed json error received from Kook after performing a rest request.
            </summary>
        </member>
        <member name="P:Kook.KookJsonError.Path">
            <summary>
                Gets the json path of the error.
            </summary>
        </member>
        <member name="P:Kook.KookJsonError.Errors">
            <summary>
                Gets a collection of errors associated with the specific property at the path.
            </summary>
        </member>
        <member name="T:Kook.KookError">
            <summary>
                Represents an error with a property.
            </summary>
        </member>
        <member name="P:Kook.KookError.Code">
            <summary>
                Gets the code of the error.
            </summary>
        </member>
        <member name="P:Kook.KookError.Message">
            <summary>
                Gets the message describing what went wrong.
            </summary>
        </member>
        <member name="T:Kook.LogMessage">
            <summary>
                Provides a message object used for logging purposes.
            </summary>
        </member>
        <member name="P:Kook.LogMessage.Severity">
            <summary>
                Gets the severity of the log entry.
            </summary>
            <returns>
                A <see cref="T:Kook.LogSeverity"/> enum to indicate the severeness of the incident or event.
            </returns>
        </member>
        <member name="P:Kook.LogMessage.Source">
            <summary>
                Gets the source of the log entry.
            </summary>
            <returns>
                A string representing the source of the log entry.
            </returns>
        </member>
        <member name="P:Kook.LogMessage.Message">
            <summary>
                Gets the message of this log entry.
            </summary>
            <returns>
                A string containing the message of this log entry.
            </returns>
        </member>
        <member name="P:Kook.LogMessage.Exception">
            <summary>
                Gets the exception of this log entry.
            </summary>
            <returns>
                A <see cref="P:Kook.LogMessage.Exception" /> object associated with an incident; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Kook.LogMessage.#ctor(Kook.LogSeverity,System.String,System.String,System.Exception)">
            <summary>
                Initializes a new <see cref="T:Kook.LogMessage"/> struct with the severity, source, message of the event, and
                optionally, an exception.
            </summary>
            <param name="severity">The severity of the event.</param>
            <param name="source">The source of the event.</param>
            <param name="message">The message of the event.</param>
            <param name="exception">The exception of the event.</param>
        </member>
        <member name="M:Kook.LogMessage.ToString">
            <summary>
                Returns a string representation of this log message.
            </summary>
            <returns> A string representation of this log message. </returns>
        </member>
        <member name="M:Kook.LogMessage.ToString(System.Text.StringBuilder,System.Boolean,System.Boolean,System.DateTimeKind,System.Nullable{System.Int32})">
            <summary>
                Returns a string representation of this log message.
            </summary>
            <param name="builder"> The string builder to use. </param>
            <param name="fullException"> Whether to include the full exception in the string. </param>
            <param name="prependTimestamp"> Whether to prepend the timestamp to the string. </param>
            <param name="timestampKind"> The kind of timestamp to use. </param>
            <param name="padSource"> The amount of padding to use for the source. </param>
            <returns> A string representation of this log message. </returns>
        </member>
        <member name="T:Kook.LogSeverity">
            <summary>
                Specifies the severity of the log message.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Critical">
            <summary>
                Logs that contain the most severe level of error. This type of error indicate that immediate attention
                may be required.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Error">
            <summary>
                Logs that highlight when the flow of execution is stopped due to a failure.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Warning">
            <summary>
                Logs that highlight an abnormal activity in the flow of execution.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Info">
            <summary>
                Logs that track the general flow of the application.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Verbose">
            <summary>
                Logs that are used for interactive investigation during development.
            </summary>
        </member>
        <member name="F:Kook.LogSeverity.Debug">
            <summary>
                Logs that contain the most detailed messages.
            </summary>
        </member>
        <member name="T:Kook.LoginState">
            <summary> Specifies the state of the client's login status. </summary>
        </member>
        <member name="F:Kook.LoginState.LoggedOut">
            <summary> The client is currently logged out. </summary>
        </member>
        <member name="F:Kook.LoginState.LoggingIn">
            <summary> The client is currently logging in. </summary>
        </member>
        <member name="F:Kook.LoginState.LoggedIn">
            <summary> The client is currently logged in. </summary>
        </member>
        <member name="F:Kook.LoginState.LoggingOut">
            <summary> The client is currently logging out. </summary>
        </member>
        <member name="T:Kook.Net.BucketId">
            <summary>
                Represents a ratelimit bucket.
            </summary>
        </member>
        <member name="P:Kook.Net.BucketId.HttpMethod">
            <summary>
                Gets the http method used to make the request if available.
            </summary>
        </member>
        <member name="P:Kook.Net.BucketId.Endpoint">
            <summary>
                Gets the endpoint that is going to be requested if available.
            </summary>
        </member>
        <member name="P:Kook.Net.BucketId.MajorParameters">
            <summary>
                Gets the major parameters of the route.
            </summary>
        </member>
        <member name="P:Kook.Net.BucketId.BucketHash">
            <summary>
                Gets the hash of this bucket.
            </summary>
            <remarks>
                The hash is provided by Kook to group ratelimits.
            </remarks>
        </member>
        <member name="P:Kook.Net.BucketId.IsHashBucket">
            <summary>
                Gets if this bucket is a hash type.
            </summary>
        </member>
        <member name="M:Kook.Net.BucketId.Create(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Creates a new <see cref="T:Kook.Net.BucketId"/> based on the
                <see cref="P:Kook.Net.BucketId.HttpMethod"/> and <see cref="P:Kook.Net.BucketId.Endpoint"/>.
            </summary>
            <param name="httpMethod">Http method used to make the request.</param>
            <param name="endpoint">Endpoint that is going to receive requests.</param>
            <param name="majorParams">Major parameters of the route of this endpoint.</param>
            <returns>
                A <see cref="T:Kook.Net.BucketId"/> based on the <see cref="P:Kook.Net.BucketId.HttpMethod"/>
                and the <see cref="P:Kook.Net.BucketId.Endpoint"/> with the provided data.
            </returns>
        </member>
        <member name="M:Kook.Net.BucketId.Create(System.String,Kook.Net.BucketId)">
            <summary>
                Creates a new <see cref="T:Kook.Net.BucketId"/> based on a
                <see cref="P:Kook.Net.BucketId.BucketHash"/> and a previous <see cref="T:Kook.Net.BucketId"/>.
            </summary>
            <param name="hash">Bucket hash provided by Kook.</param>
            <param name="oldBucket"><see cref="T:Kook.Net.BucketId"/> that is going to be upgraded to a hash type.</param>
            <returns>
                A <see cref="T:Kook.Net.BucketId"/> based on the <see cref="P:Kook.Net.BucketId.BucketHash"/>
                and <see cref="P:Kook.Net.BucketId.MajorParameters"/>.
            </returns>
        </member>
        <member name="M:Kook.Net.BucketId.GetBucketHash">
            <summary>
                Gets the string that will define this bucket as a hash based one.
            </summary>
            <returns>
                A string that defines this bucket as a hash based one.
            </returns>
        </member>
        <member name="M:Kook.Net.BucketId.GetUniqueEndpoint">
            <summary>
                Gets the string that will define this bucket as an endpoint based one.
            </summary>
            <returns>
                A string that defines this bucket as an endpoint based one.
            </returns>
        </member>
        <member name="M:Kook.Net.BucketId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kook.Net.BucketId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kook.Net.BucketId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kook.Net.BucketId.Equals(Kook.Net.BucketId)">
            <inheritdoc />
        </member>
        <member name="T:Kook.Net.HttpException">
            <summary>
                The exception that is thrown if an error occurs while processing an Kook HTTP request.
            </summary>
        </member>
        <member name="P:Kook.Net.HttpException.HttpCode">
            <summary>
                Gets the HTTP status code returned by Kook.
            </summary>
            <returns>
                An HTTP status code from Kook.
            </returns>
        </member>
        <member name="P:Kook.Net.HttpException.KookCode">
            <summary>
                Gets the JSON error code returned by Kook.
            </summary>
            <returns>
                A JSON error code from Kook, or <c>null</c> if none.
            </returns>
        </member>
        <member name="P:Kook.Net.HttpException.Reason">
            <summary>
                Gets the reason of the exception.
            </summary>
        </member>
        <member name="P:Kook.Net.HttpException.Request">
            <summary>
                Gets the request object used to send the request.
            </summary>
        </member>
        <member name="P:Kook.Net.HttpException.Errors">
            <summary>
                Gets a collection of json errors describing what went wrong with the request.
            </summary>
        </member>
        <member name="M:Kook.Net.HttpException.#ctor(System.Net.HttpStatusCode,Kook.Net.IRequest,System.Nullable{Kook.KookErrorCode},System.String,Kook.KookJsonError[])">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.Net.HttpException" /> class.
            </summary>
            <param name="httpCode"> The HTTP status code returned. </param>
            <param name="request"> The request that was sent prior to the exception. </param>
            <param name="kookCode"> The Kook status code returned. </param>
            <param name="reason"> The reason behind the exception. </param>
            <param name="errors"> A collection of json errors describing what went wrong with the request. </param>
        </member>
        <member name="T:Kook.Net.IRequest">
            <summary>
                Represents a generic request to be sent to Kook.
            </summary>
        </member>
        <member name="P:Kook.Net.IRequest.TimeoutAt">
            <summary>
                Gets how long the request should wait before timing out.
            </summary>
        </member>
        <member name="P:Kook.Net.IRequest.Options">
            <summary>
                Gets the options to be used when sending the request.
            </summary>
        </member>
        <member name="T:Kook.Net.RateLimitedException">
            <summary>
                The exception that is thrown when the user is being rate limited by Kook.
            </summary>
        </member>
        <member name="P:Kook.Net.RateLimitedException.Request">
            <summary>
                Gets the request object used to send the request.
            </summary>
        </member>
        <member name="M:Kook.Net.RateLimitedException.#ctor(Kook.Net.IRequest)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.Net.RateLimitedException" /> class using the
                <paramref name="request"/> sent.
            </summary>
        </member>
        <member name="T:Kook.Net.Rest.IRestClient">
            <summary>
                Represents a generic REST-based client.
            </summary>
        </member>
        <member name="M:Kook.Net.Rest.IRestClient.SetHeader(System.String,System.String)">
            <summary>
                Sets the HTTP header of this client for all requests.
            </summary>
            <param name="key">The field name of the header.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Kook.Net.Rest.IRestClient.SetCancelToken(System.Threading.CancellationToken)">
            <summary>
                Sets the cancellation token for this client.
            </summary>
            <param name="cancelToken">The cancellation token.</param>
        </member>
        <member name="M:Kook.Net.Rest.IRestClient.SendAsync(System.Net.Http.HttpMethod,System.String,System.Threading.CancellationToken,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                Sends a REST request.
            </summary>
            <param name="method">The method used to send this request (see <see cref="T:System.Net.Http.HttpMethod"/>).</param>
            <param name="endpoint">The endpoint to send this request to.</param>
            <param name="cancelToken">The cancellation token used to cancel the task.</param>
            <param name="reason">The audit log reason.</param>
            <param name="requestHeaders">Additional headers to be sent with the request.</param>
            <returns> A task that represents an asynchronous send operation. The task result contains the REST response of the request. </returns>
        </member>
        <member name="M:Kook.Net.Rest.IRestClient.SendAsync(System.Net.Http.HttpMethod,System.String,System.String,System.Threading.CancellationToken,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                Sends a REST request with a JSON body.
            </summary>
            <param name="method">The method used to send this request (see <see cref="T:System.Net.Http.HttpMethod"/>).</param>
            <param name="endpoint">The endpoint to send this request to.</param>
            <param name="json">The JSON body of the request.</param>
            <param name="cancelToken">The cancellation token used to cancel the task.</param>
            <param name="reason">The audit log reason.</param>
            <param name="requestHeaders">Additional headers to be sent with the request.</param>
            <returns> A task that represents an asynchronous send operation. The task result contains the REST response of the request. </returns>
        </member>
        <member name="M:Kook.Net.Rest.IRestClient.SendAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                Sends a REST request with multipart parameters.
            </summary>
            <param name="method">The method used to send this request (see <see cref="T:System.Net.Http.HttpMethod"/>).</param>
            <param name="endpoint">The endpoint to send this request to.</param>
            <param name="multipartParams">The multipart parameters.</param>
            <param name="cancelToken">The cancellation token used to cancel the task.</param>
            <param name="reason">The audit log reason.</param>
            <param name="requestHeaders">Additional headers to be sent with the request.</param>
            <returns> A task that represents an asynchronous send operation. The task result contains the REST response of the request. </returns>
        </member>
        <member name="T:Kook.Net.Rest.RestClientProvider">
            <summary>
                Represents a delegate that provides a <see cref="T:Kook.Net.Rest.IRestClient"/> instance.
            </summary>
        </member>
        <member name="T:Kook.Net.Rest.RestResponse">
            <summary>
                Represents a REST response.
            </summary>
        </member>
        <member name="P:Kook.Net.Rest.RestResponse.StatusCode">
            <summary>
                Gets the status code of the response.
            </summary>
        </member>
        <member name="P:Kook.Net.Rest.RestResponse.Headers">
            <summary>
                Gets the headers of the response.
            </summary>
        </member>
        <member name="P:Kook.Net.Rest.RestResponse.Stream">
            <summary>
                Gets the stream of the response.
            </summary>
        </member>
        <member name="P:Kook.Net.Rest.RestResponse.MediaTypeHeader">
            <summary>
                Gets the media type header of the response.
            </summary>
        </member>
        <member name="T:Kook.Net.Udp.IUdpSocket">
            <summary>
                Represents a generic UDP socket.
            </summary>
        </member>
        <member name="E:Kook.Net.Udp.IUdpSocket.ReceivedDatagram">
            <summary>
                Fired when a datagram is received.
            </summary>
        </member>
        <member name="P:Kook.Net.Udp.IUdpSocket.Port">
            <summary>
                Gets the port of the socket.
            </summary>
        </member>
        <member name="M:Kook.Net.Udp.IUdpSocket.SetCancelToken(System.Threading.CancellationToken)">
            <summary>
                Sets the cancellation token.
            </summary>
            <param name="cancelToken"> The cancellation token. </param>
        </member>
        <member name="M:Kook.Net.Udp.IUdpSocket.SetDestination(System.String,System.Int32)">
            <summary>
                Sets the destination of the socket.
            </summary>
            <param name="ip"> The IP address of the destination. </param>
            <param name="port"> The port of the destination. </param>
        </member>
        <member name="M:Kook.Net.Udp.IUdpSocket.StartAsync">
            <summary>
                Starts the socket.
            </summary>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Kook.Net.Udp.IUdpSocket.StopAsync">
            <summary>
                Stops the socket.
            </summary>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Kook.Net.Udp.IUdpSocket.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a datagram.
            </summary>
            <param name="data"> The data to send. </param>
            <param name="index"> The index of the data to start sending from. </param>
            <param name="count"> The number of bytes to send. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Kook.Net.Udp.UdpSocketProvider">
            <summary>
                Represents a delegate that provides a new <see cref="T:Kook.Net.Udp.IUdpSocket"/> instance.
            </summary>
        </member>
        <member name="T:Kook.Net.WebSocketClosedException">
            <summary>
                The exception that is thrown when the WebSocket session is closed by Kook.
            </summary>
        </member>
        <member name="P:Kook.Net.WebSocketClosedException.CloseCode">
            <summary>
                Gets the close code sent by Kook.
            </summary>
            <returns>
                A 
                <see href="https://developer.kaiheila.cn/doc/websocket">close code</see>
                from Kook.
            </returns>
        </member>
        <member name="P:Kook.Net.WebSocketClosedException.Reason">
            <summary>
                Gets the reason of the interruption.
            </summary>
        </member>
        <member name="M:Kook.Net.WebSocketClosedException.#ctor(System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Kook.Net.WebSocketClosedException" /> using a Kook close code
                and an optional reason.
            </summary>
        </member>
        <member name="T:Kook.Net.WebSockets.IWebSocketClient">
            <summary>
                Represents a generic WebSocket client.
            </summary>
        </member>
        <member name="E:Kook.Net.WebSockets.IWebSocketClient.BinaryMessage">
            <summary>
                Fired when a binary message is received.
            </summary>
        </member>
        <member name="E:Kook.Net.WebSockets.IWebSocketClient.TextMessage">
            <summary>
                Fired when a text message is received.
            </summary>
        </member>
        <member name="E:Kook.Net.WebSockets.IWebSocketClient.Closed">
            <summary>
                Fired when the WebSocket connection is closed.
            </summary>
        </member>
        <member name="M:Kook.Net.WebSockets.IWebSocketClient.SetHeader(System.String,System.String)">
            <summary>
                Sets a header to be sent with the future requests.
            </summary>
            <param name="key"> The field name of the header. </param>
            <param name="value"> The value of the header. </param>
        </member>
        <member name="M:Kook.Net.WebSockets.IWebSocketClient.SetCancelToken(System.Threading.CancellationToken)">
            <summary>
                Sets the cancellation token for this client.
            </summary>
            <param name="cancelToken"> The cancellation token to be used. </param>
        </member>
        <member name="M:Kook.Net.WebSockets.IWebSocketClient.ConnectAsync(System.String)">
            <summary>
                Connects to the specified host.
            </summary>
            <param name="host"> The host to connect to. </param>
            <returns> A task that represents an asynchronous connect operation. </returns>
        </member>
        <member name="M:Kook.Net.WebSockets.IWebSocketClient.DisconnectAsync(System.Int32)">
            <summary>
                Disconnects from the host.
            </summary>
            <param name="closeCode"> The close code to be sent to the host. </param>
            <returns> A task that represents an asynchronous disconnect operation. </returns>
        </member>
        <member name="M:Kook.Net.WebSockets.IWebSocketClient.SendAsync(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
                Sends a message to the host.
            </summary>
            <param name="data"> The data to be sent. </param>
            <param name="index"> The index of the data to start sending from. </param>
            <param name="count"> The amount of data to send. </param>
            <param name="isText"> Whether the data is text or binary. </param>
            <returns> A task that represents an asynchronous send operation. </returns>
        </member>
        <member name="T:Kook.Net.WebSockets.WebSocketProvider">
            <summary>
                Represents a delegate that provides a new <see cref="T:Kook.Net.WebSockets.IWebSocketClient"/> instance.
            </summary>
        </member>
        <member name="T:Kook.IRateLimitInfo">
            <summary>
                Represents a generic ratelimit info.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.IsGlobal">
            <summary>
                Gets whether or not this ratelimit info is global.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.Limit">
            <summary>
                Gets the number of requests that can be made.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.Remaining">
            <summary>
                Gets the number of remaining requests that can be made.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.ResetAfter">
            <summary>
                Gets the absolute time when this ratelimit resets.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.Bucket">
            <summary>
                Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path).
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.Lag">
            <summary>
                Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires.
            </summary>
        </member>
        <member name="P:Kook.IRateLimitInfo.Endpoint">
            <summary>
                Gets the endpoint that this ratelimit info came from.
            </summary>
        </member>
        <member name="T:Kook.RequestOptions">
            <summary>
                Represents options that should be used when sending a request.
            </summary>
        </member>
        <member name="P:Kook.RequestOptions.Default">
            <summary>
                Creates a new <see cref="T:Kook.RequestOptions" /> class with its default settings.
            </summary>
        </member>
        <member name="P:Kook.RequestOptions.Timeout">
            <summary>
                Gets or sets the maximum time to wait for this request to complete.
            </summary>
            <remarks>
                Gets or set the max time, in milliseconds, to wait for this request to complete. If
                <c>null</c>, a request will not time out. If a rate limit has been triggered for this request's bucket
                and will not be unpaused in time, this request will fail immediately.
            </remarks>
            <returns>
                An int in milliseconds for when the request times out.
            </returns>
        </member>
        <member name="P:Kook.RequestOptions.CancelToken">
            <summary>
                Gets or sets the cancellation token for this request.
            </summary>
            <returns>
                A <see cref="T:System.Threading.CancellationToken"/> for this request.
            </returns>
        </member>
        <member name="P:Kook.RequestOptions.RetryMode">
            <summary>
                Gets or sets the retry behavior when the request fails.
            </summary>
        </member>
        <member name="P:Kook.RequestOptions.AuditLogReason">
            <summary>
                Gets or sets the reason for this action in the guild's audit log.
            </summary>
            <remarks>
                Gets or sets the reason that will be written to the guild's audit log if applicable. This may not apply
                to all actions.
            </remarks>
        </member>
        <member name="P:Kook.RequestOptions.RatelimitCallback">
            <summary>
                Gets or sets the callback to execute regarding ratelimits for this request.
            </summary>
        </member>
        <member name="M:Kook.RequestOptions.#ctor">
            <summary>
                Initializes a new <see cref="T:Kook.RequestOptions" /> class with the default request timeout set in
                <see cref="T:Kook.KookConfig"/>.
            </summary>
        </member>
        <member name="M:Kook.RequestOptions.Clone">
            <summary>
                Memberwise clones this <see cref="T:Kook.RequestOptions"/> object.
            </summary>
            <returns> A cloned <see cref="T:Kook.RequestOptions"/> object. </returns>
        </member>
        <member name="T:Kook.RetryMode">
            <summary> Specifies how a request should act in the case of an error. </summary>
        </member>
        <member name="F:Kook.RetryMode.AlwaysFail">
            <summary> If a request fails, an exception is thrown immediately. </summary>
        </member>
        <member name="F:Kook.RetryMode.RetryTimeouts">
            <summary> Retry if a request timed out. </summary>
        </member>
        <member name="F:Kook.RetryMode.RetryRatelimit">
            <summary> Retry if a request failed due to a rate-limit. </summary>
        </member>
        <member name="F:Kook.RetryMode.Retry502">
            <summary> Retry if a request failed due to an HTTP error 502. </summary>
        </member>
        <member name="F:Kook.RetryMode.AlwaysRetry">
            <summary> Continuously retry a request until it times out, its cancel token is triggered, or the server responds with a non-502 error. </summary>
        </member>
        <member name="T:Kook.TokenType">
            <summary>
                Specifies the type of token to use with the client.
            </summary>
        </member>
        <member name="F:Kook.TokenType.Bearer">
            <summary>
                An OAuth2 token type.
            </summary>
        </member>
        <member name="F:Kook.TokenType.Bot">
            <summary>
                A bot token type.
            </summary>
        </member>
        <member name="T:Kook.Cacheable`2">
            <summary>
                Represents a cached entity.
            </summary>
            <typeparam name="TEntity">The type of entity that is cached.</typeparam>
            <typeparam name="TId">The type of this entity's ID.</typeparam>
        </member>
        <member name="P:Kook.Cacheable`2.HasValue">
            <summary>
                Gets whether this entity is cached.
            </summary>
        </member>
        <member name="P:Kook.Cacheable`2.Id">
            <summary>
                Gets the ID of this entity.
            </summary>
        </member>
        <member name="P:Kook.Cacheable`2.Value">
            <summary>
                Gets the entity if it could be pulled from cache.
            </summary>
            <remarks>
                This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is
                <c>null</c>.
            </remarks>
        </member>
        <member name="M:Kook.Cacheable`2.DownloadAsync">
            <summary>
                Downloads this entity to cache.
            </summary>
            <exception cref="T:Kook.Net.HttpException">Thrown when used from a user account.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the entity is deleted.</exception>
            <returns>
                A task that represents the asynchronous download operation. The task result contains the downloaded
                entity.
            </returns>
        </member>
        <member name="M:Kook.Cacheable`2.GetOrDownloadAsync">
            <summary>
                Returns the cached entity if it exists; otherwise downloads it.
            </summary>
            <exception cref="T:Kook.Net.HttpException">Thrown when used from a user account.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the entity is deleted and is not in cache.</exception>
            <returns>
                A task that represents the asynchronous operation that attempts to get the entity via cache or to
                download the entity. The task result contains the downloaded entity.
            </returns>
        </member>
        <member name="T:Kook.Cacheable`4">
            <summary>
                Represents a cached entity that can be downloaded.
            </summary>
            <typeparam name="TCachedEntity"> The type of entity that is cached. </typeparam>
            <typeparam name="TDownloadableEntity"> The type of entity that can be downloaded. </typeparam>
            <typeparam name="TRelationship"> The common type of <typeparamref name="TCachedEntity" /> and <typeparamref name="TDownloadableEntity" />. </typeparam>
            <typeparam name="TId"> The type of the corresponding entity's ID. </typeparam>
        </member>
        <member name="P:Kook.Cacheable`4.HasValue">
            <summary>
                Gets whether this entity is cached.
            </summary>
        </member>
        <member name="P:Kook.Cacheable`4.Id">
            <summary>
                Gets the ID of this entity.
            </summary>
        </member>
        <member name="P:Kook.Cacheable`4.Value">
            <summary>
                Gets the entity if it could be pulled from cache.
            </summary>
            <remarks>
                This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is
                <c>null</c>.
            </remarks>
        </member>
        <member name="M:Kook.Cacheable`4.DownloadAsync">
            <summary>
                Downloads this entity.
            </summary>
            <exception cref="T:Kook.Net.HttpException">Thrown when used from a user account.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the entity is deleted.</exception>
            <returns>
                A task that represents the asynchronous download operation. The task result contains the downloaded
                entity.
            </returns>
        </member>
        <member name="M:Kook.Cacheable`4.GetOrDownloadAsync">
            <summary>
                Returns the cached entity if it exists; otherwise downloads it.
            </summary>
            <exception cref="T:Kook.Net.HttpException">Thrown when used from a user account.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the entity is deleted and is not in cache.</exception>
            <returns>
                A task that represents the asynchronous operation that attempts to get the entity via cache or to
                download the entity. The task result contains the downloaded entity.
            </returns>
        </member>
        <member name="M:Kook.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
        </member>
        <member name="M:Kook.ConcurrentHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection" /> or <paramref name="comparer" /> is <c>null</c>
            </exception>
        </member>
        <member name="M:Kook.ConcurrentHashSet`1.ContainsKey(`0)">
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Kook.ConcurrentHashSet`1.TryAdd(`0)">
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Kook.ConcurrentHashSet`1.TryRemove(`0)">
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="T:Kook.MentionUtils">
            <summary>
                Provides a series of helper methods for parsing mentions.
            </summary>
        </member>
        <member name="M:Kook.MentionUtils.KMarkdownMentionUser(System.UInt64)">
            <summary>
                Returns a KMarkdown formatted mention string based on the user ID.
            </summary>
            <returns>
                A user mention string formatted to KMarkdown.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.KMarkdownMentionChannel(System.UInt64)">
            <summary>
                Returns a KMarkdown formatted mention string based on the channel ID.
            </summary>
            <returns>
                A channel mention string formatted to KMarkdown.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.KMarkdownMentionRole(System.UInt32)">
            <summary>
                Returns a KMarkdown formatted mention string based on the role ID.
            </summary>
            <returns>
                A role mention string formatted to KMarkdown.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.PlainTextMentionUser(System.String,System.UInt64)">
            <summary>
                Returns a plain text formatted mention string based on the user ID.
            </summary>
            <returns>
                A user mention string formatted to plain text.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.PlainTextMentionChannel(System.UInt64)">
            <summary>
                Returns a plain text formatted mention string based on the channel ID.
            </summary>
            <returns>
                A channel mention string formatted to plain text.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.PlainTextMentionRole(System.UInt32)">
            <summary>
                Returns a plain text formatted mention string based on the role ID.
            </summary>
            <returns>
                A role mention string formatted to plain text.
            </returns>
        </member>
        <member name="M:Kook.MentionUtils.ParseUser(System.String,Kook.TagMode)">
            <summary>
                Parses a provided user mention string.
            </summary>
            <param name="text">The user mention.</param>
            <param name="tagMode"></param>
            <exception cref="T:System.ArgumentException">Invalid mention format.</exception>
        </member>
        <member name="M:Kook.MentionUtils.TryParseUser(System.String,System.UInt64@,Kook.TagMode)">
            <summary>
                Tries to parse a provided user mention string.
            </summary>
            <param name="text">The user mention.</param>
            <param name="userId">The UserId of the user.</param>
            <param name="tagMode">Parse as PlainText or KMarkdown.</param>
        </member>
        <member name="M:Kook.MentionUtils.ParseChannel(System.String,Kook.TagMode)">
            <summary>
                Parses a provided channel mention string.
            </summary>
            <exception cref="T:System.ArgumentException">Invalid mention format.</exception>
        </member>
        <member name="M:Kook.MentionUtils.TryParseChannel(System.String,System.UInt64@,Kook.TagMode)">
            <summary>
                Tries to parse a provided channel mention string.
            </summary>
        </member>
        <member name="M:Kook.MentionUtils.ParseRole(System.String,Kook.TagMode)">
            <summary>
                Parses a provided role mention string.
            </summary>
            <exception cref="T:System.ArgumentException">Invalid mention format.</exception>
        </member>
        <member name="M:Kook.MentionUtils.TryParseRole(System.String,System.UInt32@,Kook.TagMode)">
            <summary>
                Tries to parse a provided role mention string.
            </summary>
        </member>
        <member name="T:Kook.Preconditions">
            <summary>
                Provides methods to check preconditions.
            </summary>
        </member>
        <member name="M:Kook.Preconditions.NotNull``1(``0,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> must not be <c>null</c>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEmpty(System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> cannot be blank.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotNullOrEmpty(System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> cannot be blank.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> must not be <c>null</c>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotNullOrWhitespace(System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> cannot be blank.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> must not be <c>null</c>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.SByte,System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Byte,System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Int16,System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.UInt16,System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Int32,System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.UInt32,System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Int64,System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.UInt64,System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Guid,System.Guid,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.SByte},System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.Byte},System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.Int16},System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.UInt16},System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.Int32},System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.UInt32},System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.Int64},System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.UInt64},System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.NotEqual(System.Nullable{System.Guid},System.Guid,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value may not be equal to <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.SByte,System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Byte,System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Int16,System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.UInt16,System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Int32,System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.UInt32,System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Int64,System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.UInt64,System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.SByte},System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.Byte},System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.Int16},System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.UInt16},System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.Int32},System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.UInt32},System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.Int64},System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtLeast(System.Nullable{System.UInt64},System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at least <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.SByte,System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Byte,System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Int16,System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.UInt16,System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Int32,System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.UInt32,System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Int64,System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.UInt64,System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.SByte},System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.Byte},System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.Int16},System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.UInt16},System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.Int32},System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.UInt32},System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.Int64},System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.GreaterThan(System.Nullable{System.UInt64},System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be greater than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.SByte,System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Byte,System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Int16,System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.UInt16,System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Int32,System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.UInt32,System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Int64,System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.UInt64,System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.SByte},System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.Byte},System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.Int16},System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.UInt16},System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.Int32},System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.UInt32},System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.Int64},System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.AtMost(System.Nullable{System.UInt64},System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be at most <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.SByte,System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Byte,System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Int16,System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.UInt16,System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Int32,System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.UInt32,System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Int64,System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.UInt64,System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.SByte},System.SByte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.Byte},System.Byte,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.Int16},System.Int16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.UInt16},System.UInt16,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.Int32},System.Int32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.UInt32},System.UInt32,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.Int64},System.Int64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="M:Kook.Preconditions.LessThan(System.Nullable{System.UInt64},System.UInt64,System.String,System.String)">
            <exception cref="T:System.ArgumentException">Value must be less than <paramref name="value"/>.</exception>
        </member>
        <member name="T:Kook.TokenUtils">
            <summary>
                Provides a series of helper methods for handling Kook login tokens.
            </summary>
        </member>
        <member name="F:Kook.TokenUtils.MinBotTokenLength">
            <summary>
                The minimum length of a Bot token.
            </summary>
            <remarks>
                This value was determined by comparing against the examples in the Kook
                documentation, and pre-existing tokens.
            </remarks>
        </member>
        <member name="F:Kook.TokenUtils.StandardBotTokenLength">
            <summary>
                The standard length of a Bot token.
            </summary>
            <remarks>
                This value was determined by comparing against the examples in the Kook
                documentation, and pre-existing tokens.
            </remarks>
        </member>
        <member name="M:Kook.TokenUtils.PadBase64String(System.String)">
            <summary>
                Pads a base64-encoded string with 0, 1, or 2 '=' characters,
                if the string is not a valid multiple of 4.
                Does not ensure that the provided string contains only valid base64 characters.
                Strings that already contain padding will not have any more padding applied.
            </summary>
            <remarks>
                A string that would require 3 padding characters is considered to be already corrupt.
                Some older bot tokens may require padding, as the format provided by Kook
                does not include this padding in the token.
            </remarks>
            <param name="encodedBase64">The base64 encoded string to pad with characters.</param>
            <returns>A string containing the base64 padding.</returns>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="encodedBase64"/> would require an invalid number of padding characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="encodedBase64"/> is null, empty, or whitespace.
            </exception>
        </member>
        <member name="M:Kook.TokenUtils.DecodeBase64UserId(System.String)">
            <summary>
                Decodes a base 64 encoded string into a ulong value.
            </summary>
            <param name="encoded"> A base 64 encoded string containing a User Id.</param>
            <returns> A ulong containing the decoded value of the string, or null if the value was invalid. </returns>
        </member>
        <member name="M:Kook.TokenUtils.CheckBotTokenValidity(System.String)">
            <summary>
                Checks the validity of a bot token by attempting to decode a ulong userid
                from the bot token.
            </summary>
            <param name="message">
                The bot token to validate.
            </param>
            <returns>
                <c>true</c> if the token is valid, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="F:Kook.TokenUtils.IllegalTokenCharacters">
            <summary>
                The set of all characters that are not allowed inside of a token.
            </summary>
        </member>
        <member name="M:Kook.TokenUtils.CheckContainsIllegalCharacters(System.String)">
            <summary>
                Checks if the given token contains a whitespace or newline character
                that would fail to log in.
            </summary>
            <param name="token"> The token to validate. </param>
            <returns>
                <c>true</c> if the token contains a whitespace or newline character.
            </returns>
        </member>
        <member name="M:Kook.TokenUtils.ValidateToken(Kook.TokenType,System.String)">
            <summary>
                Checks the validity of the supplied token of a specific type.
            </summary>
            <param name="tokenType"> The type of token to validate. </param>
            <param name="token"> The token value to validate. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown when the supplied token string is <c>null</c>, empty, or contains only whitespace.</exception>
            <exception cref="T:System.ArgumentException"> Thrown when the supplied <see cref="T:Kook.TokenType"/> or token value is invalid. </exception>
        </member>
        <member name="M:Kook.Utils.UrlValidation.Validate(System.String)">
            <summary>
                Not full URL validation right now. Just ensures protocol is present and that it's either http or https.
            </summary>
            <param name="url">The URL to validate before sending to Kook.</param>
            <exception cref="T:System.InvalidOperationException">A URL must include a protocol (http or https).</exception>
            <returns><c>true</c> if URL is valid by our standard, <c>false</c> if null, throws an error upon invalid.</returns>
        </member>
        <member name="M:Kook.Utils.UrlValidation.ValidateKookAssetUrl(System.String)">
            <summary>
                Ensures that the URL represents an asset on the Kook OSS server.
            </summary>
            <remarks>
                This method checks the URL from 3 parts:
                <list type="number">
                    <item>The scheme must be either http or https</item>
                    <item>
                        The host must be one of the following:
                        <list type="bullet">
                            <item>img.kaiheila.cn</item>
                            <item>img.kookapp.cn</item>
                            <item>kaiheila.oss-cn-beijing.aliyuncs.com</item>
                        </list>
                    </item>
                    <item>The path must in the form of the following:
                        <list type="bullet">
                            <item>/assets/2021-01/7kr4FkWpLV0ku0ku.jpeg</item>
                            <item>/assets/2022-01/21/HwuGGgpohG0ku0ku.jpeg</item>
                            <item>/attachments/2022-08/19/GHUrXywopm1hc0u0.png</item>
                        </list>
                    </item>
                </list>
            </remarks>
            <param name="url">The URL to validate before sending to Kook.</param>
            <exception cref="T:System.InvalidOperationException">The URL provided is not an asset on the Kook OSS.</exception>
            <returns><c>true</c> if URL represents a valid asset on the Kook OSS, <c>false</c> if null, throws an error upon invalid.</returns>
        </member>
    </members>
</doc>
